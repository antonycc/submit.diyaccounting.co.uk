# .github/workflows/set-repository-variables.yml
name: set-repository-variables
concurrency: set-repository-variables
run-name: "set repository variables [${{ github.ref_name }}]"

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/set-repository-variables.yml'
      - '.github/repository.env'
  workflow_dispatch:

permissions:
  contents: read
  actions: write

jobs:
  sync-variables:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Sync repository.env â†’ GitHub Repository Variables
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail

          variables_file=".github/repository.env"

          if [[ ! -f "$variables_file" ]]; then
            echo "Error: repository.env not found at $variables_file"
            exit 1
          fi

          echo "Reading repository variables from $variables_file"

          # Process each line in the repository.env file
          while IFS= read -r line || [[ -n "$line" ]]; do
            # Skip empty lines and comments
            [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue

            # Parse variable assignment (name=value)
            if [[ "$line" =~ ^([^=]+)=(.*)$ ]]; then
              name="${BASH_REMATCH[1]// /}"  # Remove spaces
              value="${BASH_REMATCH[2]}"

              # Strip surrounding quotes if present
              if [[ "$value" =~ ^\"(.*)\"$ ]] || [[ "$value" =~ ^\'(.*)\'$ ]]; then
                value="${BASH_REMATCH[1]}"
              fi

              # Check if variable already exists with same value
              if existing_value=$(gh variable get "$name" --repo "${{ github.repository }}" 2>/dev/null); then
                if [[ "$existing_value" == "$value" ]]; then
                  echo "Variable $name already exists with same value, skipping"
                  continue
                else
                  echo "Updating repository variable: $name (value changed)"
                fi
              else
                echo "Creating new repository variable: $name"
              fi

              # Set the variable using gh CLI
              gh variable set "$name" --body "$value" --repo "${{ github.repository }}"

            else
              echo "Skipping invalid entry: '$line'"
            fi
          done < "$variables_file"