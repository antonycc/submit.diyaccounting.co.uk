# .github/workflows/set-repository-variables.yml
name: set-repository-variables
concurrency: set-repository-variables
run-name: "set repository variables [${{ github.ref_name }}]"

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/set-repository-variables.yml'
      - '.github/repository.env'
  workflow_dispatch:

permissions:
  contents: read
  actions: write

jobs:
  sync-variables:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Sync repository.env → GitHub Repository Variables
        uses: actions/github-script@v7
        env:
          #repositoryRootDirectory: ${{ github.workspace }}
          variablesSourceFilepath: '.github/repository.env'
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { owner, repo } = context.repo;
            //const variablesSourceFilepath = path.join(process.env.repositoryRootDirectory, process.env.variablesSourceFilepath);
            const variablesSourceFilepath = process.env.variablesSourceFilepath;

            if (!fs.existsSync(variablesSourceFilepath)) {
              core.setFailed(`repository.env not found at ${variablesSourceFilepath}`);
              return;
            }

            core.info(`Reading repository variables from ${variablesSourceFilepath}`);
            const lines = fs.readFileSync(variablesSourceFilepath, 'utf8')
              .split(/\r?\n/)
              .map(l => l.trim());

            for (const line of lines) {
              // skip empty lines or comments
              if (!line || line.startsWith('#')) continue;

              const eq = line.indexOf('=');
              if (eq < 0) {
                core.info(`Skipping invalid entry: “${line}”`);
                continue;
              }

              const name = line.slice(0, eq);
              let value = line.slice(eq + 1);

              // strip surrounding quotes if present
              if ((value.startsWith('"') && value.endsWith('"')) ||
                  (value.startsWith("'") && value.endsWith("'"))) {
                value = value.slice(1, -1);
              }

              core.info(`Setting repo variable: ${name}`);
              await github.request(
                'PATCH /repos/{owner}/{repo}/actions/variables/{name}',
                { owner, repo, name, value }
              );
              //await github.rest.actions.createOrUpdateRepoVariable({
              //  owner,
              //  repo,
              //  name,
              //  value
              //});
            }
