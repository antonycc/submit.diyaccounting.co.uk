# .github/workflows/set-repository-variables.yml
name: set-repository-variables
concurrency: set-repository-variables
run-name: "set repository variables [${{ github.ref_name }}]"

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/set-repository-variables.yml'
      - '.github/repository.env'
  workflow_dispatch:

permissions:
  contents: read
  actions: write

jobs:
  sync-variables:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Sync repository.env → GitHub Repository Variables
        uses: actions/github-script@v7
        env:
          variablesSourceFilepath: '.github/repository.env'
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const { owner, repo } = context.repo;
            const variablesSourceFilepath = process.env.variablesSourceFilepath;

            if (!fs.existsSync(variablesSourceFilepath)) {
              core.setFailed(`repository.env not found at ${variablesSourceFilepath}`);
              return;
            }

            core.info(`Reading repository variables from ${variablesSourceFilepath}`);
            const lines = fs.readFileSync(variablesSourceFilepath, 'utf8')
              .split(/\r?\n/)
              .map(l => l.trim());

            // Get existing repository variables
            core.info('Fetching existing repository variables');
            let existingVariables = {};
            try {
              const response = await github.request(
                'GET /repos/{owner}/{repo}/actions/variables',
                { owner, repo }
              );
              for (const variable of response.data.variables) {
                existingVariables[variable.name] = variable.value;
              }
              core.info(`Found ${Object.keys(existingVariables).length} existing repository variables`);
            } catch (error) {
              core.info(`Failed to fetch existing variables: ${error.message}`);
            }

            for (const line of lines) {
              // skip empty lines or comments
              if (!line || line.startsWith('#')) continue;

              const eq = line.indexOf('=');
              if (eq < 0) {
                core.info(`Skipping invalid entry: “${line}”`);
                continue;
              }

              const name = line.slice(0, eq).trim();
              let value = line.slice(eq + 1).trim();

              // strip surrounding quotes if present
              if ((value.startsWith('"') && value.endsWith('"')) ||
                  (value.startsWith("'") && value.endsWith("'"))) {
                value = value.slice(1, -1);
              }

              // Check if variable exists and compare values
              if (existingVariables.hasOwnProperty(name)) {
                if (existingVariables[name] === value) {
                  core.info(`Variable ${name} already exists with same value, skipping`);
                  continue;
                } else {
                  core.info(`Updating repo variable: ${name} (value changed)`);
                  await github.request(
                    'PATCH /repos/{owner}/{repo}/actions/variables/{name}',
                    { owner, repo, name, value }
                  );
                }
              } else {
                core.info(`Creating new repo variable: ${name}`);
                await github.request(
                  'POST /repos/{owner}/{repo}/actions/variables',
                  { 
                    owner, 
                    repo,
                    data: {
                      name: name,
                      value: value
                    }
                  }
                );
              }
            }
