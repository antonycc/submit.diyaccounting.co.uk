name: destroy
run-name: "destroy [${{ github.event_name == 'delete' && github.event.ref || github.ref_name }}"
concurrency:
  group: deploy-${{ github.event_name == 'delete' && github.event.ref || github.ref_name }}
  cancel-in-progress: false

on:
  workflow_dispatch:
  delete:

permissions:
  id-token: write
  contents: read

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '22'
  ACTIONS_ROLE_ARN: 'arn:aws:iam::887764105431:role/submit-github-actions-role'
  DEPLOY_ROLE_ARN: 'arn:aws:iam::887764105431:role/submit-deployment-role'
  AWS_REGION: 'eu-west-2'

jobs:
  destroy:
    if: ${{ github.event_name != 'delete' || github.event.ref_type == 'branch' }} # skip non-branch deletions
    runs-on: ubuntu-latest
    environment: ${{ (github.event_name == 'delete' && github.event.ref == 'refs/heads/main') || (github.event_name != 'delete' && github.ref == 'refs/heads/main') && 'prod' || 'ci' }}
    steps:
      - name: Checkout default branch
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.repository.default_branch }} # e.g. main
          fetch-depth: 0

      - name: Report deleted ref
        run: |
          echo "Deleted: ${{ github.event.ref }}"      # branch name
          echo "Ref type: ${{ github.event.ref_type }}"

      - name: Checkout
        uses: actions/checkout@v5

      - name: Compute deployment name and environment
        id: deployment-config
        run: |
          # For delete events, use the deleted ref; otherwise use current ref
          if [ "${{ github.event_name }}" = "delete" ]; then
              # Extract branch name from refs/heads/branch-name
              REF_NAME=$(echo "${{ github.event.ref }}" | sed 's|^refs/heads/||')
              echo "Delete event detected, using deleted ref: $REF_NAME"
          else
              REF_NAME="${{ github.ref_name }}"
              echo "Workflow dispatch event, using current ref: $REF_NAME"
          fi

          INPUT_DEPLOYMENT_NAME="${{ inputs.deploymentName }}"

          # Clean branch name: lowercase, replace non-alphanumeric with hyphens, collapse consecutive hyphens
          CLEANED=$(echo "$REF_NAME" | tr '[:upper:]' '[:lower:]' | sed -e 's/[^a-z0-9]/-/g' -e 's/-\{2,\}/-/g' -e 's/^-//' -e 's/-$//')

          if [ "$REF_NAME" = "main" ]; then
              ENV_NAME="prod"
              DEPLOYMENT_NAME="prod"
          elif [ "$INPUT_DEPLOYMENT_NAME" = "ci" ]; then
              ENV_NAME="ci"
              DEPLOYMENT_NAME="ci"
          elif [ -n "$INPUT_DEPLOYMENT_NAME" ]; then
              ENV_NAME="ci"
              DEPLOYMENT_NAME="$INPUT_DEPLOYMENT_NAME"
          else
              ENV_NAME="ci"
              # Truncate to 16 chars for branch-based deployments
              DEPLOYMENT_NAME="ci-${CLEANED:0:16}"
          fi

          echo "Computed ENV_NAME: $ENV_NAME"
          echo "Computed DEPLOYMENT_NAME: $DEPLOYMENT_NAME"

          echo "ENV_NAME=$ENV_NAME" >> "$GITHUB_ENV"
          echo "DEPLOYMENT_NAME=$DEPLOYMENT_NAME" >> "$GITHUB_ENV"
          echo "ENV_NAME=$ENV_NAME" >> "$GITHUB_OUTPUT"
          echo "DEPLOYMENT_NAME=$DEPLOYMENT_NAME" >> "$GITHUB_OUTPUT"

          echo "Actual ENV_NAME: $ENV_NAME"
          echo "Actual DEPLOYMENT_NAME: $DEPLOYMENT_NAME"

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Node test
        run: npm ci && npm test

      - name: Build CDK and synth
        run: ./mvnw --errors clean package

      - name: Destroy OpsStack
        if: ${{ env.DEPLOYMENT_NAME != 'prod' }}
        run: npx dotenv -e .env.${{ env.ENV_NAME }} -- npx cdk destroy ${DEPLOYMENT_NAME}-OpsStack --exclusively --force
        env:
          DEPLOYMENT_NAME: ${{ env.DEPLOYMENT_NAME }}
          ENV_NAME: ${{ env.ENV_NAME }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Destroy PublishStack
        if: ${{ env.DEPLOYMENT_NAME != 'prod' }}
        run: npx dotenv -e .env.${{ env.ENV_NAME }} -- npx cdk destroy ${DEPLOYMENT_NAME}-PublishStack --exclusively --force
        env:
          DEPLOYMENT_NAME: ${{ env.DEPLOYMENT_NAME }}
          ENV_NAME: ${{ env.ENV_NAME }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Destroy EdgeStack
        if: ${{ env.DEPLOYMENT_NAME != 'prod' }}
        run: npx dotenv -e .env.${{ env.ENV_NAME }} -- npx cdk destroy ${DEPLOYMENT_NAME}-EdgeStack --exclusively --force
        env:
          DEPLOYMENT_NAME: ${{ env.DEPLOYMENT_NAME }}
          ENV_NAME: ${{ env.ENV_NAME }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Destroy AuthStack
        if: ${{ env.DEPLOYMENT_NAME != 'prod' }}
        run: npx dotenv -e .env.${{ env.ENV_NAME }} -- npx cdk destroy ${DEPLOYMENT_NAME}-AuthStack --exclusively --force
        env:
          DEPLOYMENT_NAME: ${{ env.DEPLOYMENT_NAME }}
          ENV_NAME: ${{ env.ENV_NAME }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Destroy ApplicationStack
        if: ${{ env.DEPLOYMENT_NAME != 'prod' }}
        run: npx dotenv -e .env.${{ env.ENV_NAME }} -- npx cdk destroy ${DEPLOYMENT_NAME}-ApplicationStack --exclusively --force
        env:
          DEPLOYMENT_NAME: ${{ env.DEPLOYMENT_NAME }}
          ENV_NAME: ${{ env.ENV_NAME }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Destroy WebStack
        if: ${{ env.DEPLOYMENT_NAME != 'prod' }}
        run: npx dotenv -e .env.${{ env.ENV_NAME }} -- npx cdk destroy ${DEPLOYMENT_NAME}-WebStack --exclusively --force
        env:
          DEPLOYMENT_NAME: ${{ env.DEPLOYMENT_NAME }}
          ENV_NAME: ${{ env.ENV_NAME }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Destroy IdentityStack
        if: ${{ env.DEPLOYMENT_NAME != 'prod' }}
        run: npx dotenv -e .env.${{ env.ENV_NAME }} -- npx cdk destroy ${DEPLOYMENT_NAME}-IdentityStack --exclusively --force
        env:
          DEPLOYMENT_NAME: ${{ env.DEPLOYMENT_NAME }}
          ENV_NAME: ${{ env.ENV_NAME }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Destroy DevStack
        if: ${{ env.DEPLOYMENT_NAME != 'prod' }}
        run: npx dotenv -e .env.${{ env.ENV_NAME }} -- npx cdk destroy ${DEPLOYMENT_NAME}-DevStack --exclusively --force
        env:
          DEPLOYMENT_NAME: ${{ env.DEPLOYMENT_NAME }}
          ENV_NAME: ${{ env.ENV_NAME }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Destroy SelfDestructStack
        if: ${{ env.DEPLOYMENT_NAME != 'prod' }}
        run: npx dotenv -e .env.${{ env.ENV_NAME }} -- npx cdk destroy ${DEPLOYMENT_NAME}-SelfDestructStack --exclusively --force
        env:
          DEPLOYMENT_NAME: ${{ env.DEPLOYMENT_NAME }}
          ENV_NAME: ${{ env.ENV_NAME }}

      - name: Destroy ObservabilityStack
        if: ${{ env.DEPLOYMENT_NAME != 'prod' }}
        run: npx dotenv -e .env.${{ env.ENV_NAME }} -- npx cdk destroy ${DEPLOYMENT_NAME}-ObservabilityStack --exclusively --force
        env:
          DEPLOYMENT_NAME: ${{ env.DEPLOYMENT_NAME }}
          ENV_NAME: ${{ env.ENV_NAME }}
          GITHUB_ACTOR: ${{ github.actor }}
