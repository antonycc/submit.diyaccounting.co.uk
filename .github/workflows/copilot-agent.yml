# .github/workflows/copilot-agent.yml

name: copilot-agent
concurrency: copilot-agent
run-name: "copilot-agent [${{ inputs.prompt_selection || 'auto-select' }}] [${{ github.ref_name }}]"

on:
  workflow_dispatch:
    inputs:
      prompt_selection:
        description: 'Prompt to send to GitHub Copilot Agent'
        required: false
        default: 'auto-select'
        type: choice
        options:
          - auto-select
          - expand-capabilities
          - prune-focus
          - abstract-libraries
          - increase-consistency
          - refresh-documentation
      target_branch:
        description: 'Target branch to create PR against'
        required: false
        default: 'main'
        type: string
      dry_run:
        description: 'Run in dry-run mode (no changes made)'
        required: false
        default: false
        type: boolean

env:
  PROMPT_SELECTION: ${{ inputs.prompt_selection || 'auto-select' }}
  TARGET_BRANCH: ${{ inputs.target_branch || 'main' }}
  DRY_RUN: ${{ inputs.dry_run || 'false' }}

jobs:
  analyze-repository:
    name: 'Analyze Repository State'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      analysis_complete: ${{ steps.analyze.outputs.analysis_complete }}
      repository_state: ${{ steps.analyze.outputs.repository_state }}
      recommended_prompt: ${{ steps.analyze.outputs.recommended_prompt }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - run: npm install --ignore-engines

      - name: Analyze repository state
        id: analyze
        run: |
          echo "Analyzing repository state for prompt selection..."
          
          # Gather repository metrics
          TOTAL_JS_FILES=$(find . -name "*.js" -o -name "*.ts" | wc -l)
          TOTAL_JAVA_FILES=$(find . -name "*.java" | wc -l)
          TODO_COUNT=$(grep -rn "TODO" --include="*.js" --include="*.ts" --include="*.java" . 2>/dev/null | wc -l)
          TEST_FILES=$(find . -name "*.test.js" -o -name "*.spec.js" | wc -l)
          
          # Check for recent commits indicating development focus
          RECENT_COMMITS=$(git log --oneline -10 | head -10)
          
          # Check for dependencies that might need updating
          OUTDATED_DEPS=$(npm outdated 2>/dev/null | wc -l || echo "0")
          
          # Analyze code complexity indicators
          LONG_FUNCTIONS=$(find ./app ./web -name "*.js" 2>/dev/null | xargs grep -l "function\|=>" 2>/dev/null | wc -l || echo "0")
          
          # Check documentation freshness
          DOC_FILES=$(find . -name "*.md" | wc -l)
          README_AGE=$(stat -c %Y README.md 2>/dev/null || echo "0")
          CURRENT_TIME=$(date +%s)
          README_DAYS_OLD=$(( (CURRENT_TIME - README_AGE) / 86400 ))
          
          # Create repository state summary
          REPOSITORY_STATE="Repository Analysis:
          - JavaScript/TypeScript files: $TOTAL_JS_FILES
          - Java files: $TOTAL_JAVA_FILES  
          - TODO comments: $TODO_COUNT
          - Test files: $TEST_FILES
          - Documentation files: $DOC_FILES
          - README last modified: $README_DAYS_OLD days ago
          - Potentially outdated dependencies: $OUTDATED_DEPS
          - Files with functions: $LONG_FUNCTIONS
          
          Recent development activity:
          $RECENT_COMMITS"
          
          echo "repository_state<<EOF" >> $GITHUB_OUTPUT
          echo "$REPOSITORY_STATE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Auto-recommend prompt based on analysis
          RECOMMENDED_PROMPT="expand-capabilities"  # Default
          
          if [ "$TODO_COUNT" -gt 20 ]; then
            RECOMMENDED_PROMPT="prune-focus"
          elif [ "$LONG_FUNCTIONS" -gt 50 ]; then
            RECOMMENDED_PROMPT="abstract-libraries"
          elif [ "$README_DAYS_OLD" -gt 90 ]; then
            RECOMMENDED_PROMPT="refresh-documentation"
          elif [ "$TOTAL_JS_FILES" -gt 100 ]; then
            RECOMMENDED_PROMPT="increase-consistency"
          fi
          
          echo "recommended_prompt=$RECOMMENDED_PROMPT" >> $GITHUB_OUTPUT
          echo "analysis_complete=true" >> $GITHUB_OUTPUT
          
          echo "::group::Repository Analysis"
          echo "$REPOSITORY_STATE"
          echo "Recommended prompt: $RECOMMENDED_PROMPT"
          echo "::endgroup::"

  setup-copilot:
    name: 'Setup GitHub Copilot CLI'
    needs: analyze-repository
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      copilot_available: ${{ steps.setup.outputs.copilot_available }}
    steps:
      - name: Setup GitHub CLI and Copilot
        id: setup
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Setting up GitHub CLI and Copilot extension..."
          
          # Install GitHub CLI if not available
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          fi
          
          # Authenticate with GitHub CLI
          echo "$GITHUB_TOKEN" | gh auth login --with-token
          
          # Install or upgrade Copilot extension
          echo "Installing GitHub Copilot CLI extension..."
          gh extension install github/gh-copilot --force || echo "Copilot extension installation failed"
          
          # Test Copilot availability
          if gh copilot --help &> /dev/null; then
            echo "copilot_available=true" >> $GITHUB_OUTPUT
            echo "GitHub Copilot CLI is available"
          else
            echo "copilot_available=false" >> $GITHUB_OUTPUT
            echo "GitHub Copilot CLI is not available"
          fi

  invoke-copilot-agent:
    name: 'Invoke GitHub Copilot Agent'
    needs: [analyze-repository, setup-copilot]
    if: needs.analyze-repository.outputs.analysis_complete == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      agent_response_generated: ${{ steps.invoke.outputs.agent_response_generated }}
      selected_prompt: ${{ steps.invoke.outputs.selected_prompt }}
    steps:
      - name: Checkout repository  
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Invoke Copilot Agent with selected prompt
        id: invoke
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_CERTIFICATE_ARN: ${{ vars.AWS_CERTIFICATE_ARN }}
          AWS_HOSTED_ZONE_ID: ${{ vars.AWS_HOSTED_ZONE_ID }}
          AWS_HOSTED_ZONE_NAME: ${{ vars.AWS_HOSTED_ZONE_NAME }}
        run: |
          echo "Invoking GitHub Copilot Agent with prompt selection: ${{ env.PROMPT_SELECTION }}"
          
          # Determine which prompt to use
          if [ "${{ env.PROMPT_SELECTION }}" = "auto-select" ]; then
            SELECTED_PROMPT="${{ needs.analyze-repository.outputs.recommended_prompt }}"
            echo "Auto-selected prompt: $SELECTED_PROMPT based on repository analysis"
          else
            SELECTED_PROMPT="${{ env.PROMPT_SELECTION }}"
            echo "Using user-selected prompt: $SELECTED_PROMPT"
          fi
          
          echo "selected_prompt=$SELECTED_PROMPT" >> $GITHUB_OUTPUT
          
          # Load the appropriate prompt content
          case "$SELECTED_PROMPT" in
            "expand-capabilities")
              PROMPT_FILE="expand-capabilities.md"
              ;;
            "prune-focus") 
              PROMPT_FILE="prune-focus.md"
              ;;
            "abstract-libraries")
              PROMPT_FILE="abstract-libraries.md"
              ;;
            "increase-consistency")
              PROMPT_FILE="increase-consistency.md"
              ;;
            "refresh-documentation")
              PROMPT_FILE="refresh-documentation.md"
              ;;
            *)
              echo "Unknown prompt selection: $SELECTED_PROMPT"
              exit 1
              ;;
          esac
          
          if [ ! -f "$PROMPT_FILE" ]; then
            echo "Prompt file not found: $PROMPT_FILE"
            exit 1
          fi
          
          echo "Using prompt file: $PROMPT_FILE"
          
          # Create comprehensive prompt for Copilot Agent
          cat > copilot_agent_prompt.txt << EOF
          $(cat $PROMPT_FILE)
          
          Repository Context:
          ${{ needs.analyze-repository.outputs.repository_state }}
          
          Environment Variables Available:
          - AWS_CERTIFICATE_ARN: ${{ vars.AWS_CERTIFICATE_ARN && 'configured' || 'not set' }}
          - AWS_HOSTED_ZONE_ID: ${{ vars.AWS_HOSTED_ZONE_ID && 'configured' || 'not set' }}
          - AWS_HOSTED_ZONE_NAME: ${{ vars.AWS_HOSTED_ZONE_NAME && 'configured' || 'not set' }}
          
          Please provide specific, actionable recommendations based on the current repository state.
          Focus on changes that can be implemented incrementally and maintain the existing architecture patterns.
          EOF
          
          echo "::group::Generated Prompt"
          cat copilot_agent_prompt.txt
          echo "::endgroup::"
          
          # Invoke Copilot Agent (using gh copilot suggest as the available interface)
          if [ "${{ needs.setup-copilot.outputs.copilot_available }}" = "true" ]; then
            echo "Sending prompt to GitHub Copilot..."
            gh copilot suggest "$(cat copilot_agent_prompt.txt)" \
              > copilot_agent_response.txt 2>&1 || echo "Copilot invocation completed with warnings"
            
            if [ -f copilot_agent_response.txt ] && [ -s copilot_agent_response.txt ]; then
              echo "agent_response_generated=true" >> $GITHUB_OUTPUT
              echo "::group::Copilot Agent Response"
              cat copilot_agent_response.txt
              echo "::endgroup::"
            else
              echo "agent_response_generated=false" >> $GITHUB_OUTPUT
              echo "No response generated from Copilot Agent"
            fi
          else
            echo "GitHub Copilot CLI not available, creating placeholder response"
            cat > copilot_agent_response.txt << EOF
          GitHub Copilot CLI was not available during this workflow run.
          
          Prompt that would have been sent:
          $(cat copilot_agent_prompt.txt)
          
          Recommended prompt selection: $SELECTED_PROMPT
          EOF
            echo "agent_response_generated=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload agent response
        uses: actions/upload-artifact@v4
        with:
          name: copilot-agent-response-${{ github.run_id }}
          path: |
            copilot_agent_*.txt
          retention-days: 7

  create-summary:
    name: 'Create Summary'  
    needs: [analyze-repository, setup-copilot, invoke-copilot-agent]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Workflow Summary
        run: |
          echo "## GitHub Copilot Agent Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Prompt Selection**: ${{ env.PROMPT_SELECTION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Selected Prompt**: ${{ needs.invoke-copilot-agent.outputs.selected_prompt }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository Analysis**: ${{ needs.analyze-repository.outputs.analysis_complete }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Copilot Available**: ${{ needs.setup-copilot.outputs.copilot_available }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Agent Response Generated**: ${{ needs.invoke-copilot-agent.outputs.agent_response_generated }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Branch**: ${{ env.TARGET_BRANCH }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: ${{ env.DRY_RUN }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.analyze-repository.outputs.analysis_complete }}" != "true" ]; then
            echo "- **Result**: Repository analysis failed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.setup-copilot.outputs.copilot_available }}" != "true" ]; then
            echo "- **Result**: GitHub Copilot CLI unavailable" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.invoke-copilot-agent.outputs.agent_response_generated }}" = "true" ]; then
            echo "- **Result**: Successfully invoked Copilot Agent" >> $GITHUB_STEP_SUMMARY
            echo "- **Artifact**: Check copilot-agent-response-${{ github.run_id }} for detailed response" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Result**: Copilot Agent invocation completed but no response generated" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Prompts" >> $GITHUB_STEP_SUMMARY
          echo "- **expand-capabilities**: Suggest ways to expand repository capabilities" >> $GITHUB_STEP_SUMMARY  
          echo "- **prune-focus**: Identify areas to prune for improved focus" >> $GITHUB_STEP_SUMMARY
          echo "- **abstract-libraries**: Find opportunities to abstract to libraries" >> $GITHUB_STEP_SUMMARY
          echo "- **increase-consistency**: Improve consistency across the codebase" >> $GITHUB_STEP_SUMMARY
          echo "- **refresh-documentation**: Update and improve documentation" >> $GITHUB_STEP_SUMMARY
          echo "- **auto-select**: Automatically choose the most appropriate prompt" >> $GITHUB_STEP_SUMMARY