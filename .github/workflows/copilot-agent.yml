# .github/workflows/copilot-agent.yml

name: copilot-agent
concurrency: copilot-agent
run-name: "copilot-agent [${{ inputs.prompt_selection || 'auto-select' }}] [${{ github.ref_name }}]"

on:
  workflow_dispatch:
    inputs:
      prompt_selection:
        description: 'Prompt to send to GitHub Copilot Agent'
        required: false
        default: 'auto-select'
        type: choice
        options:
          - auto-select
          - todo-inator
          - security-compliance-hardening
          - create-new-prompt
          - what-next-for-mtd-vat-submission
      target_branch:
        description: 'Target branch to create PR against'
        required: false
        default: 'main'
        type: string
      copilot_agent_login:
        description: 'GitHub login name of the Copilot agent to assign issues to'
        required: false
        default: 'copilot-swe-agent'
        type: string
      skip_if_open_issues:
        description: 'Skip creating new issue if there are already open issues (can be overridden for manual operation)'
        required: false
        default: true
        type: boolean
  #schedule:
  #  - cron: '15 6 * * 1'  # Weekly on Mondays at 6:15 AM UTC

env:
  PROMPT_SELECTION: ${{ inputs.prompt_selection || 'auto-select' }}
  TARGET_BRANCH: ${{ inputs.target_branch || 'main' }}
  COPILOT_AGENT_LOGIN: ${{ inputs.copilot_agent_login || 'copilot-swe-agent' }}
  SKIP_IF_OPEN_ISSUES: ${{ inputs.skip_if_open_issues == null && 'true' || inputs.skip_if_open_issues }}
  TRIGGER_TYPE: manual

jobs:

  check-open-issues:
    name: 'Check for Existing Open Issues'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
    outputs:
      has_open_issues: ${{ steps.check.outputs.has_open_issues }}
      open_issues_count: ${{ steps.check.outputs.open_issues_count }}
      should_create_issue: ${{ steps.check.outputs.should_create_issue }}
    steps:
      - name: Check for open issues
        id: check
        uses: actions/github-script@v8
        with:
          script: |
            console.log("Checking for existing open issues...");
            console.log("SKIP_IF_OPEN_ISSUES setting: ${{ env.SKIP_IF_OPEN_ISSUES }}");

            try {
              const { data: issues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 1
              });

              const openIssuesCount = issues.length > 0 ? 'unknown' : '0'; // We only fetch 1 to check existence
              const hasOpenIssues = issues.length > 0;

              console.log(`Found ${hasOpenIssues ? '1 or more' : '0'} open issues`);

              const skipIfOpenIssues = '${{ env.SKIP_IF_OPEN_ISSUES }}' === 'true';
              const shouldCreateIssue = !skipIfOpenIssues || !hasOpenIssues;

              console.log(`Skip if open issues: ${skipIfOpenIssues}`);
              console.log(`Should create issue: ${shouldCreateIssue}`);

              core.setOutput('has_open_issues', hasOpenIssues.toString());
              core.setOutput('open_issues_count', openIssuesCount);
              core.setOutput('should_create_issue', shouldCreateIssue.toString());

              if (!shouldCreateIssue) {
                console.log("‚è≠Ô∏è Skipping issue creation due to existing open issues and skip_if_open_issues=true");
              }

            } catch (error) {
              console.error('Failed to check for open issues:', error);
              // On error, default to creating the issue
              core.setOutput('has_open_issues', 'false');
              core.setOutput('open_issues_count', '0');
              core.setOutput('should_create_issue', 'true');
            }

  create-issue:
    name: 'Create Issue for GitHub Copilot Agent'
    needs: [check-open-issues]
    if: needs.check-open-issues.outputs.should_create_issue == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    outputs:
      issue_created: ${{ steps.create.outputs.issue_created }}
      issue_number: ${{ steps.create.outputs.issue_number }}
      issue_id: ${{ steps.create.outputs.issue_id }}
      issue_url: ${{ steps.create.outputs.issue_url }}
      selected_prompt: ${{ steps.create.outputs.selected_prompt }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Create issue using GitHub Script
        id: create
        uses: actions/github-script@v8
        env:
          AWS_CERTIFICATE_ARN: ${{ vars.AWS_CERTIFICATE_ARN }}
          AWS_HOSTED_ZONE_ID: ${{ vars.AWS_HOSTED_ZONE_ID }}
          AWS_HOSTED_ZONE_NAME: ${{ vars.AWS_HOSTED_ZONE_NAME }}
        with:
          script: |
            const fs = require('fs');

            console.log("Creating GitHub issue for Copilot Agent with prompt selection: ${{ env.PROMPT_SELECTION }}");
            console.log("Trigger type: ${{ env.TRIGGER_TYPE }}");

            const selectedPrompt = "${{ env.PROMPT_SELECTION }}";
            console.log(`Using user-selected prompt: ${selectedPrompt}`);
            core.setOutput('selected_prompt', selectedPrompt);

            const promptFile = `${selectedPrompt}.md`;
            const promptPath = `prompts/${promptFile}`;

            if (!fs.existsSync(promptPath)) {
              core.setFailed(`Prompt file not found: ${promptPath}`);
              return;
            }
            console.log(`Using prompt file: ${promptPath}`);

            // Read prompt content
            const promptContent = fs.readFileSync(promptPath, 'utf8');

            // Create issue title and body for Copilot Agent
            const issueTitle = `Repository Enhancement: ${selectedPrompt}`;

            const envConfig = [
              `- AWS_CERTIFICATE_ARN: ${{ vars.AWS_CERTIFICATE_ARN && 'configured' || 'not set' }}`,
              `- AWS_HOSTED_ZONE_ID: ${{ vars.AWS_HOSTED_ZONE_ID && 'configured' || 'not set' }}`,
              `- AWS_HOSTED_ZONE_NAME: ${{ vars.AWS_HOSTED_ZONE_NAME && 'configured' || 'not set' }}`
            ].join('\n');

            const issueBody = `## Repository Enhancement Request

            **Prompt Type:** ${selectedPrompt}
            **Target Branch:** ${{ env.TARGET_BRANCH }}
            **Triggered by:** ${{ github.workflow }} workflow
            **Run ID:** ${{ github.run_id }}

            ### Task Description
            ${promptContent}

            ### Environment Configuration
            ${envConfig}

            ### Instructions for Copilot Agent
            Please provide specific, actionable recommendations and implementations based on the current repository state. Focus on changes that can be implemented incrementally and maintain the existing architecture patterns.

            Create a pull request with your proposed changes targeting the \`${{ env.TARGET_BRANCH }}\` branch.

            If no changes would be a useful improvement within the scope of the Task Description, you may close the issue with a comment suggesting areas where the scope could be increased mentioning specific oppertunities for change.
            `;

            console.log("Issue Content:");
            console.log(`Title: ${issueTitle}`);
            console.log(`Body: ${issueBody}`);

            try {
              // Get repository ID first
              const repoQuery = `
                query($owner: String!, $name: String!) {
                  repository(owner: $owner, name: $name) {
                    id
                  }
                }
              `;

              const repoResult = await github.graphql(repoQuery, {
                owner: context.repo.owner,
                name: context.repo.repo
              });

              const repositoryId = repoResult.repository.id;
              console.log(`Repository ID: ${repositoryId}`);

              // Create issue using GraphQL
              const createIssueMutation = `
                mutation($repositoryId: ID!, $title: String!, $body: String!) {
                  createIssue(input: {
                    repositoryId: $repositoryId,
                    title: $title,
                    body: $body,
                    labelIds: []
                  }) {
                    issue {
                      id
                      number
                      title
                      url
                    }
                  }
                }
              `;

              const createResult = await github.graphql(createIssueMutation, {
                repositoryId: repositoryId,
                title: issueTitle,
                body: issueBody
              });

              const issue = createResult.createIssue.issue;

              console.log(`Successfully created issue #${issue.number} (ID: ${issue.id})`);
              console.log(`Issue URL: ${issue.url}`);

              // Add labels using REST API as it's more straightforward
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ["enhancement", "copilot-agent"]
              });

              core.setOutput('issue_created', 'true');
              core.setOutput('issue_number', issue.number.toString());
              core.setOutput('issue_id', issue.id);
              core.setOutput('issue_url', issue.url);

            } catch (error) {
              console.error('Failed to create issue:', error);
              core.setFailed(`Failed to create issue: ${error.message}`);
              core.setOutput('issue_created', 'false');
            }

      - name: Display issue link
        if: steps.create.outputs.issue_created == 'true'
        run: |
          echo "‚úÖ **Issue Created:** #${{ steps.create.outputs.issue_number }}"
          echo "üîó **Issue Link:** ${{ steps.create.outputs.issue_url }}"

  assign-issue:
    name: 'Assign Issue to GitHub Copilot Agent'
    needs: [check-open-issues, create-issue]
    if: needs.check-open-issues.outputs.should_create_issue == 'true' && needs.create-issue.outputs.issue_created == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    outputs:
      issue_assigned: ${{ steps.assign.outputs.issue_assigned }}
    steps:
      - name: Assign issue to Copilot using GitHub Script
        id: assign
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            const issueNumber = ${{ needs.create-issue.outputs.issue_number }};
            const issueId = '${{ needs.create-issue.outputs.issue_id }}';

            console.log(`Assigning issue #${issueNumber} (ID: ${issueId}) to Copilot Agent`);

            try {
              // First, get the Copilot bot ID from repository suggested actors
              const suggestedActorsQuery = `
                query($owner: String!, $name: String!) {
                  repository(owner: $owner, name: $name) {
                    suggestedActors(capabilities: [CAN_BE_ASSIGNED], first: 100) {
                      nodes {
                        login
                        __typename
                        ... on Bot {
                          id
                        }
                        ... on User {
                          id
                        }
                      }
                    }
                  }
                }
              `;

              const actorsResult = await github.graphql(suggestedActorsQuery, {
                owner: context.repo.owner,
                name: context.repo.repo
              });

              console.log('Available suggested actors:', actorsResult.repository.suggestedActors.nodes.map(n => n.login));

              // Find the copilot agent
              const copilotBot = actorsResult.repository.suggestedActors.nodes.find(
                actor => actor.login === '${{ env.COPILOT_AGENT_LOGIN }}'
              );

              if (!copilotBot) {
                console.log('Copilot coding agent not found in suggested actors. Available actors:',
                  actorsResult.repository.suggestedActors.nodes.map(n => n.login));
                core.setOutput('issue_assigned', 'false');
                // Don't fail the workflow - just log that assignment wasn't possible
                return;
              }

              console.log(`Found Copilot bot with ID: ${copilotBot.id}`);

              // Assign the issue to Copilot using GraphQL mutation
              const assignIssueMutation = `
                mutation($assignableId: ID!, $actorIds: [ID!]!) {
                  replaceActorsForAssignable(input: {
                    assignableId: $assignableId,
                    actorIds: $actorIds
                  }) {
                    assignable {
                      ... on Issue {
                        id
                        title
                        assignees(first: 10) {
                          nodes {
                            login
                          }
                        }
                      }
                    }
                  }
                }
              `;

              const assignResult = await github.graphql(assignIssueMutation, {
                assignableId: issueId,
                actorIds: [copilotBot.id]
              });

              const assignees = assignResult.replaceActorsForAssignable.assignable.assignees.nodes.map(n => n.login);
              console.log(`Successfully assigned issue to: ${assignees.join(', ')}`);

              core.setOutput('issue_assigned', 'true');

            } catch (error) {
              console.error('Failed to assign issue to Copilot:', error);
              console.log('Issue was created successfully but assignment failed - this is not critical');
              core.setOutput('issue_assigned', 'false');
              // Don't fail the workflow - the issue was created successfully
            }

      - name: Display assignment status
        run: |
          if [ "${{ steps.assign.outputs.issue_assigned }}" = "true" ]; then
            echo "‚úÖ **Assignment:** Successfully assigned to ${{ env.COPILOT_AGENT_LOGIN }}"
          else
            echo "‚ö†Ô∏è **Assignment:** Failed or ${{ env.COPILOT_AGENT_LOGIN }} not available (issue still created)"
          fi

  workflow-summary:
    name: 'Workflow Summary'
    needs: [check-open-issues, create-issue, assign-issue]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Display workflow summary
        run: |
          echo "## Copilot Agent Workflow Summary"
          echo ""
          echo "**Prompt Selection:** ${{ env.PROMPT_SELECTION }}"
          echo "**Target Branch:** ${{ env.TARGET_BRANCH }}"
          echo "**Skip if Open Issues:** ${{ env.SKIP_IF_OPEN_ISSUES }}"
          echo ""
          echo "### Issue Check Results"
          echo "**Has Open Issues:** ${{ needs.check-open-issues.outputs.has_open_issues }}"
          echo "**Should Create Issue:** ${{ needs.check-open-issues.outputs.should_create_issue }}"
          echo ""
          if [ "${{ needs.check-open-issues.outputs.should_create_issue }}" = "true" ]; then
            echo "### Issue Creation"
            if [ "${{ needs.create-issue.outputs.issue_created }}" = "true" ]; then
              echo "‚úÖ **Issue Created:** #${{ needs.create-issue.outputs.issue_number }}"
              echo "üîó **Issue Link:** ${{ needs.create-issue.outputs.issue_url }}"
              if [ "${{ needs.assign-issue.outputs.issue_assigned }}" = "true" ]; then
                echo "‚úÖ **Assignment:** Successfully assigned to ${{ env.COPILOT_AGENT_LOGIN }}"
              else
                echo "‚ö†Ô∏è **Assignment:** Failed or ${{ env.COPILOT_AGENT_LOGIN }} not available"
              fi
            else
              echo "‚ùå **Issue Creation:** Failed"
            fi
          else
            echo "‚è≠Ô∏è **Issue Creation:** Skipped due to existing open issues"
            echo ""
            echo "üí° **Tip:** To override this behavior, set 'skip_if_open_issues' to 'false' when manually triggering the workflow."
          fi
