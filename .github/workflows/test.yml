# .github/workflows/test.yml

name: test
concurrency: ngrok
run-name: 'test [${{ github.ref_name }}] [${{ github.event.head_commit.message }}]'

on:
  push:
    branches:
      - '**'
      - '!gh_pages'
    paths:
      - 'infra/**'
      - 'app/**'
      - 'web/**'
      - 'cdk.json'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/test.yml'
      - '**/pom.xml'
  workflow_dispatch:
    inputs:
        environment:
            description: 'Environment to run the tests against'
            required: false
            default: 'test'
            options:
              - test
              - proxy
              - ci
              - production
            type: choice
  schedule:
    - cron: '23 * * * *'

env:
  environment: ${{ inputs.environment || 'proxy' }}

jobs:

  npm-test:
    name: 'npm test'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - run: npm ci || npm install

      - run: source .env.${{ env.environment }} && npm test

  npm-unit-test:
    name: 'npm unit test with coverage'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - run: npm ci || npm install

      - run: source .env.${{ env.environment }} && npm run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: coverage-reports-slow
          path: coverage/
          retention-days: 30

  npm-integration-test:
    name: 'npm integration test'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - run: npm ci || npm install

      - run: source .env.${{ env.environment }} && npm run test:integration

  npm-system-test:
    name: 'npm system test'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - run: npm ci || npm install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - run: source .env.${{ env.environment }} && npm run test:system

  npm-test-web-unit:
    name: 'npm unit test with coverage'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - run: npm ci || npm install

      - run: source .env.${{ env.environment }} && npm run test:web-unit

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: coverage-reports-slow
          path: coverage/
          retention-days: 30

  npm-browser-test:
    name: 'npm browser test'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - run: npm ci || npm install

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}

      - run: npx playwright install chromium --with-deps

      - run: source .env.${{ env.environment }} && npm run test:browser

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: test-results-browser
          path: target/browser-test-results/
          retention-days: 30

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: test-reports-browser
          path: target/test-reports/
          retention-days: 30

  npm-behaviour-test:
    name: 'npm behaviour test'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'proxy' }}
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - run: npm ci || npm install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Authenticate ngrok
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          npx ngrok config add-authtoken "${NGROK_AUTH_TOKEN?}"

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}

      - run: npx playwright install chromium --with-deps

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::887764105431:role/submit-github-actions-role
          role-chaining: false
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - run: aws sts get-caller-identity --region eu-west-2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::887764105431:role/submit-deployment-role
          role-chaining: true
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - run: aws sts get-caller-identity --region eu-west-2

      - run: npx dotenv -e '.env.${{ env.environment }}' -- npm run test:behaviour
        if: env.environment == 'proxy'
        env:
          DIY_SUBMIT_HMRC_CLIENT_SECRET: ${{ secrets.HMRC_CLIENT_SECRET }}
          DIY_SUBMIT_GOOGLE_CLIENT_SECRET: ${{ secrets.DIY_SUBMIT_GOOGLE_CLIENT_SECRET }}
      - run: cp '.env.${{ env.environment }}' '.env.proxy' ; npx dotenv -e '.env.${{ env.environment }}' -- npm run test:behaviour
        if: env.environment != 'proxy'
        env:
          DIY_SUBMIT_HMRC_CLIENT_SECRET: ${{ secrets.HMRC_CLIENT_SECRET }}
          DIY_SUBMIT_GOOGLE_CLIENT_SECRET: ${{ secrets.DIY_SUBMIT_GOOGLE_CLIENT_SECRET }}

      - name: Convert Playwright video to MP4
        if: ${{ !cancelled() }}
        run: |
          set -euo pipefail
          root="target/behaviour-test-results"
          shopt -s nullglob

          # Flatten nested .webm files into $root preserving only filenames (no paths)
          while IFS= read -r -d '' f; do
            base=$(basename "$f")
            dest="$root/$base"
            if [[ "$f" != "$dest" ]]; then
              cp -v "$f" "$dest"
            fi
          done < <(find "$root" -mindepth 2 -type f -name '*.webm' -print0)

          # Transcode all .webm files at the root concurrently
          pids=()
          for f in "$root"/*.webm; do
            [[ -e "$f" ]] || continue
            base="${f##*/}"
            out="$root/${base%.webm}.mp4"
            echo "Transcoding $f -> $out"
            npm run convert:video -- --in "$f" --out "$out" &
            pids+=($!)
          done

          # Wait for all transcodes to complete
          fail=0
          for pid in "${pids[@]:-}"; do
            if ! wait "$pid"; then
              fail=1
            fi
          done

          # Back-compat: if exactly one MP4 exists and it's not named video.mp4, copy it for the single-artifact step
          mp4s=("$root"/*.mp4)
          if [[ ${#mp4s[@]} -eq 1 && "${mp4s[0]}" != "$root/video.mp4" ]]; then
            cp -v "${mp4s[0]}" "$root/video.mp4" || true
          fi

          exit $fail

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: test-results-behaviour
          path: "target/behaviour-test-results/"
          retention-days: 30

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: test-reports-behaviour
          path: "target/test-reports/"
          retention-days: 30

      - name: Copy test server logs
        if: ${{ !cancelled() }}
        run: |
          mkdir -p test-server-logs/
          cp -r submit-*.log test-server-logs/

      - name: Upload test logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-server-logs-behaviour
          path: "test-server-logs/"
          retention-days: 30

  mvn-test:
    name: 'maven test'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 21
          cache: 'maven'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: package
        id: package
        shell: bash
        run: source .env.${{ env.environment }} && ./mvnw clean test

  npm-test-cdk:
    name: 'npm test:cdk'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - run: npm ci

      - uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 21
          cache: 'maven'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: test:cdk
        id: test-cdk
        shell: bash
        run: source .env.${{ env.environment }} && npm run test:cdk
