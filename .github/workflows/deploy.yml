name: deploy
run-name: "deploy from ${{ github.ref_name }}"
concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: false

on:
  workflow_dispatch:
    inputs:
      forceAllStackDeployment:
        description: 'Force re-deploy of all stacks even if they already exist or pass comparison checks'
        type: choice
        options:
          - 'true'
          - 'false'
        required: false
        default: 'false'
      skipDeploy:
        description: 'Skip deploy (run tests only, no deployment)'
        type: choice
        options:
            - 'true'
            - 'false'
        required: false
        default: 'false'
      deploymentName:
        description: 'Deployment name (ci for shared CI, or custom name)'
        required: false
        default: ''
      loadTestDuration:
        description: 'Duration for load test (e.g. 30s, 10m, 1h)'
        required: false
        default: '30s'
      selfDestructDelayHours:
        description: 'Hours before self-destruct triggers for non-prod environments'
        required: false
        default: '8'
  push:
    branches:
      - '**'
      - '!gh_pages'
    paths:
      - 'app/functions/**'
      - 'app/lib/**'
      - 'infra/main/**'
      - 'tests/**'
      - 'web/public/**'
      - '.env.ci'
      - '.env.prod'
      - 'cdk-application/cdk.json'
      - 'cdk-delivery/cdk.json'
      - 'Dockerfile'
      - 'LICENSE'
      - 'package.json'
      - 'package-lock.json'
      - 'pom.xml'
      - 'product-catalogue.toml'
      - '.github/actions/get-names'
      - '.github/actions/set-origins'
      - '.github/workflows/deploy.yml'
  schedule:
    - cron: '23 4 * * *'

permissions:
  id-token: write
  contents: read
  pages: write

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '22'
  ACTIONS_ROLE_ARN: 'arn:aws:iam::887764105431:role/submit-github-actions-role'
  DEPLOY_ROLE_ARN:  'arn:aws:iam::887764105431:role/submit-deployment-role'
  AWS_REGION: 'eu-west-2'
  AWS_ACCOUNT_ID: '887764105431'
  AWS_HOSTED_ZONE_ID: 'Z0315522208PWZSSBI9AL'
  BASE_IMAGE_TAG_PREFIX: 'submit-base'
  deploymentName: ${{ inputs.deploymentName || '' }}
  loadTestDuration: ${{ inputs.loadTestDuration || '30s' }}
  GITHUB_ACTOR: ${{ github.actor }}
  SELF_DESTRUCT_DELAY_HOURS: ${{ inputs.selfDestructDelayHours || '1' }}
  BASE_IMAGE_TAG: ${{ github.sha }}
  FORCE_ALL_STACK_DEPLOYMENT: ${{ inputs.forceAllStackDeployment || 'false' }}
  COMMIT_HASH: ${{ github.sha }}
  BUILD_NUMBER: ${{ github.run_number }}

jobs:

  names:
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Compute deployment name and environment
        id: deployment-config
        uses: ./.github/actions/get-names
    outputs:
      environment-name: ${{ steps.deployment-config.outputs.environment-name }}
      deployment-name: ${{ steps.deployment-config.outputs.deployment-name }}
      base-domain: ${{ steps.deployment-config.outputs.base-domain }}
      base-url:      ${{ steps.deployment-config.outputs.base-url }}
      apex-domain: ${{ steps.deployment-config.outputs.apex-domain }}
      apex-url: ${{ steps.deployment-config.outputs.apex-url }}
      holding-domain: ${{ steps.deployment-config.outputs.holding-domain }}
      holding-url: ${{ steps.deployment-config.outputs.holding-url }}

  npm-test:
    name: 'npm test'
    runs-on: ubuntu-24.04
    needs:
      - names
    permissions:
      contents: read
      packages: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - run: npm ci || npm install

      - run: npm test

  npm-unit-test:
    name: 'npm unit test'
    runs-on: ubuntu-latest
    needs:
      - names
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - run: npm ci || npm install

      - run: npm run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 30

  npm-integration-test:
    name: 'npm integration test'
    runs-on: ubuntu-latest
    needs:
      - names
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - run: npm ci || npm install

      - run: npm run test:integration

  npm-system-test:
    name: 'npm system test'
    runs-on: ubuntu-latest
    needs:
      - names
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - run: npm ci || npm install

      - run: npm run test:system

  npm-test-web-unit:
    name: 'npm unit test with coverage'
    runs-on: ubuntu-latest
    needs:
      - names
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - run: npm ci || npm install

      - run: npm run test:web-unit

  npm-browser-test:
    name: 'npm browser test'
    runs-on: ubuntu-latest
    needs:
      - names
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - run: npm ci

      - run: npx playwright install chromium --with-deps

      - run: npm run test:browser

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: test-results-browser
          path: target/browser-test-results/
          retention-days: 30

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: test-reports-browser
          path: target/test-reports/
          retention-days: 30

  mvn-test:
    name: 'maven test'
    runs-on: ubuntu-latest
    needs:
      - names
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: package
        id: package
        shell: bash
        run: |
          ./mvnw clean package

  npm-test-cdk:
    name: 'npm test cdk'
    needs:
      - names
      - mvn-package
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: test cdk
        id: test-cdk
        shell: bash
        run: npm run cdk${{ github.ref == 'refs/heads/main' && '' || '-ci' }}
        env:
          ENVIRONMENT_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.environment-name }}
          SELF_DESTRUCT_HANDLER_SOURCE: "../${{ needs.mvn-package.outputs.self-destruct-handler-source }}"
          SELF_DESTRUCT_START_DATETIME: ${{ needs.mvn-package.outputs.self-destruct-start-datetime }}
          # Set by deploy-environment.yml after the environment's AuthStack is deployed
          COGNITO_USER_POOL_ARN: ${{ vars.COGNITO_USER_POOL_ARN }}
          COGNITO_CLIENT_ID: ${{ vars.COGNITO_CLIENT_ID }}

  behaviour-test:
    name: 'behaviour test (proxy)'
    needs:
      - names
    runs-on: ubuntu-24.04
    # TODO: Reinstate this because it could have just been the missing NGROK_AUTH_TOKEN that held up the tests
    #container: mcr.microsoft.com/playwright:v1.55.1-jammy
    # Match version number with @playwright/test in package.json with: https://mcr.microsoft.com/en-us/artifact/mar/playwright/tags
    # and extension with ubuntu distribution e.g. https://releases.ubuntu.com/jammy/
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # TODO: Part 2: Reinstate this because it could have just been the missing NGROK_AUTH_TOKEN that held up the tests
      #  npm ci --ignore-scripts
      #  env:
      #    PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      - name: Install dependencies
        run: |
           npm install
           npx playwright install chromium --with-deps

      - name: Authenticate ngrok
        shell: bash
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          npx ngrok config add-authtoken "${NGROK_AUTH_TOKEN?}"

      - name: Run behaviour tests
        run: |
          npm run test:originBehaviour || exit_code=$? \
          ; cp ./target/submit*.log ./target/behaviour-test-results/ || true \
          ; exit ${exit_code:-0} \
          ;
        env:
          #DIY_SUBMIT_BASE_URL: ${{ needs.names.outputs.base-url }}
          TEST_HMRC_USERNAME: ${{ vars.TEST_HMRC_USERNAME }}
          TEST_HMRC_PASSWORD: ${{ secrets.TEST_HMRC_PASSWORD }}
          TEST_HMRC_VAT_NUMBER: ${{ vars.TEST_HMRC_VAT_NUMBER }}

      - name: Upload artifacts (results)
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: behaviour-test-artifacts
          retention-days: 30
          path: |
            target/behaviour-test-results/

      - name: Upload artifacts (reports)
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: behaviour-test-reports
          retention-days: 30
          path: |
            target/test-reports/

  test-aws-credentials:
    name: 'test aws credentials'
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

  mvn-package:
    name: 'maven package'
    runs-on: ubuntu-latest
    needs:
      - names
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: package
        id: package
        shell: bash
        run: |
          ./mvnw clean package -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }}
          echo "SELF_DESTRUCT_HANDLER_SOURCE=target/self-destruct-lambda.jar"
          echo "SELF_DESTRUCT_HANDLER_SOURCE=target/self-destruct-lambda.jar" >> $GITHUB_OUTPUT
          ls -l target/self-destruct-lambda.jar

      - name: Self Destruct Start Datetime (ISO 8601) now plus SELF_DESTRUCT_DELAY_HOURS
        id: self-destruct-start
        shell: bash
        run: |
          SELF_DESTRUCT_START_DATETIME=$(date -u -d "+${{ env.SELF_DESTRUCT_DELAY_HOURS }} hours" +"%Y-%m-%dT%H:%M:%SZ")
          echo "SELF_DESTRUCT_START_DATETIME=$SELF_DESTRUCT_START_DATETIME"
          echo "SELF_DESTRUCT_START_DATETIME=$SELF_DESTRUCT_START_DATETIME" >> $GITHUB_OUTPUT

      - name: Upload self-destruct handler JAR
        uses: actions/upload-artifact@v4
        with:
          name: self-destruct-handler-${{ github.sha }}
          path: target/self-destruct-lambda.jar
          retention-days: 1

    outputs:
      self-destruct-handler-source: ${{ steps.package.outputs.SELF_DESTRUCT_HANDLER_SOURCE }}
      self-destruct-start-datetime: ${{ steps.self-destruct-start.outputs.SELF_DESTRUCT_START_DATETIME }}

  skip-deploy-check:
    name: 'skip deploy check'
    if: ${{ (inputs.skipDeploy != 'true') && (github.event_name != 'push' || !contains(github.event.head_commit.message, 'skip:')) }}
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Check if skipDeploy is set
        id: check
        run: |
          inputsSkipDeploy="${{ inputs.skipDeploy }}"
          skipDeploy="${{ (inputs.skipDeploy != 'true') && (github.event_name != 'push' || !contains(github.event.head_commit.message, 'skip:')) }}"
          echo "inputsSkipDeploy=$inputsSkipDeploy"
          echo "inputsSkipDeploy=$inputsSkipDeploy" >> "$GITHUB_OUTPUT"
          echo "skipDeploy=$skipDeploy"
          echo "skipDeploy=$skipDeploy" >> "$GITHUB_OUTPUT"

    outputs:
      inputsSkipDeploy: ${{ steps.check.outputs.inputsSkipDeploy }}
      skipDeploy: ${{ steps.check.outputs.skipDeploy }}

  docker-build:
    name: 'docker build'
    needs:
      - skip-deploy-check
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - name: Build base image
        run: |
          docker build \
            -t "${{ env.BASE_IMAGE_TAG_PREFIX }}:${{ github.sha }}" \
            -f Dockerfile .

      - name: Save image artifact
        run: |
          mkdir docker-image
          docker save -o docker-image/image.tar "${{ env.BASE_IMAGE_TAG_PREFIX }}:${{ github.sha }}"

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: docker-image/image.tar
          if-no-files-found: error

  deploy-application-self-destruct:
    name: 'deploy application self-destruct'
    needs:
      - names
      - skip-deploy-check
      - mvn-package
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Download self-destruct handler JAR
        uses: actions/download-artifact@v5
        with:
          name: self-destruct-handler-${{ github.sha }}
          path: cdk-submit-application.out/

      - name: Deploy SelfDestruct Stack (CDK)
        run: |
          ./mvnw --errors clean package -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-application \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                app-${{ needs.names.outputs.deployment-name }}-SelfDestructStack \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-application.out/cdk-outputs-self-destruct.json \
          && cd .. \
          ;
        env:
          ENVIRONMENT_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          SELF_DESTRUCT_HANDLER_SOURCE: "../${{ needs.mvn-package.outputs.self-destruct-handler-source }}"
          SELF_DESTRUCT_START_DATETIME: ${{ needs.mvn-package.outputs.self-destruct-start-datetime }}
          # Set by deploy-environment.yml after the environment's AuthStack is deployed
          COGNITO_USER_POOL_ARN: ${{ vars.COGNITO_USER_POOL_ARN }}
          COGNITO_CLIENT_ID: ${{ vars.COGNITO_CLIENT_ID }}

  deploy-dev:
    name: 'deploy dev'
    needs:
      - names
      - skip-deploy-check
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Check if DevStack exists
        id: static-skip
        shell: bash
        run: |
          STACK_NAME="app-${{ needs.names.outputs.deployment-name }}-DevStack"
          echo "Checking for existing COMPLETE stack: $STACK_NAME"
          COUNT=$(aws cloudformation list-stacks \
            --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE \
            --query "length(StackSummaries[?StackName=='${STACK_NAME}'])" \
            --output text)
          if [ "$COUNT" -ge 1 ]; then
            echo "skipStaticStackDeployment=true" >> "$GITHUB_OUTPUT"
          else
            echo "skipStaticStackDeployment=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        uses: actions/checkout@v5

      - name: Setup Node
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        run: npm ci

      - uses: actions/setup-java@v5
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Deploy Dev Stack (CDK)
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        run: |
          ./mvnw --errors clean package -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-application \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                app-${{ needs.names.outputs.deployment-name }}-DevStack \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-application.out/cdk-outputs-dev.json \
            && cd .. \
          ;
        env:
          ENVIRONMENT_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          SELF_DESTRUCT_HANDLER_SOURCE: "../infra/test/resources/fake-self-destruct-lambda.jar"
          # Set by deploy-environment.yml after the environment's AuthStack is deployed
          COGNITO_USER_POOL_ARN: ${{ vars.COGNITO_USER_POOL_ARN }}
          COGNITO_CLIENT_ID: ${{ vars.COGNITO_CLIENT_ID }}

  push-images:
    name: 'push images'
    needs:
      - names
      - skip-deploy-check
      - deploy-dev
      - docker-build
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Login to Amazon ECR
        shell: bash
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
            | docker login \
                --username AWS \
                --password-stdin "${ECR_REPOSITORY_BASE_URL?}/${ECR_REPOSITORY_NAME?}" \
            ;
        env:
          ECR_REPOSITORY_BASE_URL: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY_NAME: app-${{ needs.names.outputs.deployment-name }}-submit-diyaccounting-co-uk-ecr

      - name: Check if image already exists in ECR
        id: image-exists
        shell: bash
        run: |
          REPO_URI="${ECR_REPOSITORY_BASE_URL?}/${ECR_REPOSITORY_NAME?}"
          REPO_NAME="${REPO_URI##*/}"
          echo "Checking if image with tag ${{ github.sha }} exists in $REPO_NAME"
          if aws ecr describe-images --repository-name "$REPO_NAME" --image-ids imageTag="${{ github.sha }}" >/dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi
        env:
          ECR_REPOSITORY_BASE_URL: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY_NAME: app-${{ needs.names.outputs.deployment-name }}-submit-diyaccounting-co-uk-ecr

      - name: Checkout
        if: ${{ steps.image-exists.outputs.exists != 'true' }}
        uses: actions/checkout@v5

      - name: Setup Node
        if: ${{ steps.image-exists.outputs.exists != 'true' }}
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        if: ${{ steps.image-exists.outputs.exists != 'true' }}
        run: npm ci

      - name: Download image artifact
        if: ${{ steps.image-exists.outputs.exists != 'true' }}
        uses: actions/download-artifact@v5
        with:
          name: docker-image
          path: docker-image/

      - name: Load Docker image
        if: ${{ steps.image-exists.outputs.exists != 'true' }}
        run: docker load -i docker-image/image.tar

      - name: Tag and push Docker image to ECR
        if: ${{ steps.image-exists.outputs.exists != 'true' }}
        shell: bash
        run: |
          docker tag "${{ env.BASE_IMAGE_TAG_PREFIX }}:${{ github.sha }}" "${ECR_REPOSITORY_BASE_URL?}/${ECR_REPOSITORY_NAME?}:${{ github.sha }}"
          docker tag "${{ env.BASE_IMAGE_TAG_PREFIX }}:${{ github.sha }}" "${ECR_REPOSITORY_BASE_URL?}/${ECR_REPOSITORY_NAME?}:latest"
          docker push "${ECR_REPOSITORY_BASE_URL?}/${ECR_REPOSITORY_NAME?}:${{ github.sha }}"
          docker push "${ECR_REPOSITORY_BASE_URL?}/${ECR_REPOSITORY_NAME?}:latest"
        env:
          ECR_REPOSITORY_BASE_URL: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY_NAME: app-${{ needs.names.outputs.deployment-name }}-submit-diyaccounting-co-uk-ecr
    outputs:
      base-image-tag: ${{ github.sha }}

  deploy-auth:
    name: 'deploy auth'
    needs:
      - names
      - skip-deploy-check
      - deploy-dev
      - push-images
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Deploy Auth stack (CDK)
        run: |
          ./mvnw --errors clean package -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-application \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                app-${{ needs.names.outputs.deployment-name }}-AuthStack \
                --exclusively \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-application.out/cdk-outputs-auth.json \
            && cd .. \
            ;
        env:
          ENVIRONMENT_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          SELF_DESTRUCT_HANDLER_SOURCE: "../infra/test/resources/fake-self-destruct-lambda.jar"
          BASE_IMAGE_TAG: ${{ needs.push-images.outputs.base-image-tag }}
          # Set by deploy-environment.yml after the environment's AuthStack is deployed
          COGNITO_USER_POOL_ARN: ${{ vars.COGNITO_USER_POOL_ARN }}
          COGNITO_CLIENT_ID: ${{ vars.COGNITO_CLIENT_ID }}

      - run: cat cdk-submit-application.out/cdk-outputs-auth.json | jq '.'

      - name: Resolve stack outputs
        id: auth-outputs
        run: |
          AUTH_URL_MOCK_LAMBDA_URL=$(jq -r '.["app-${{ needs.names.outputs.deployment-name }}-AuthStack"].AuthUrlMockLambdaUrl' cdk-submit-application.out/cdk-outputs-auth.json)
          AUTH_URL_COGNITO_LAMBDA_URL=$(jq -r '.["app-${{ needs.names.outputs.deployment-name }}-AuthStack"].AuthUrlCognitoLambdaUrl' cdk-submit-application.out/cdk-outputs-auth.json)
          COGNITO_EXCHANGE_TOKEN_LAMBDA_URL=$(jq -r '.["app-${{ needs.names.outputs.deployment-name }}-AuthStack"].ExchangeCognitoTokenLambdaUrl' cdk-submit-application.out/cdk-outputs-auth.json)
          echo "AUTH_URL_MOCK_LAMBDA_URL=$AUTH_URL_MOCK_LAMBDA_URL"
          echo "AUTH_URL_COGNITO_LAMBDA_URL=$AUTH_URL_COGNITO_LAMBDA_URL"
          echo "COGNITO_EXCHANGE_TOKEN_LAMBDA_URL=$COGNITO_EXCHANGE_TOKEN_LAMBDA_URL"
          echo "AUTH_URL_MOCK_LAMBDA_URL=$AUTH_URL_MOCK_LAMBDA_URL" >> $GITHUB_OUTPUT
          echo "AUTH_URL_COGNITO_LAMBDA_URL=$AUTH_URL_COGNITO_LAMBDA_URL" >> $GITHUB_OUTPUT
          echo "COGNITO_EXCHANGE_TOKEN_LAMBDA_URL=$COGNITO_EXCHANGE_TOKEN_LAMBDA_URL" >> $GITHUB_OUTPUT
        shell: bash
    outputs:
      authUrlMockLambdaUrl: ${{ steps.auth-outputs.outputs.AUTH_URL_MOCK_LAMBDA_URL }}
      authUrlCognitoLambdaUrl: ${{ steps.auth-outputs.outputs.AUTH_URL_COGNITO_LAMBDA_URL }}
      exchangeCognitoTokenLambdaUrl: ${{ steps.auth-outputs.outputs.COGNITO_EXCHANGE_TOKEN_LAMBDA_URL }}

  deploy-hmrc:
    name: 'deploy hmrc'
    needs:
      - names
      - skip-deploy-check
      - deploy-dev
      - docker-build
      - push-images
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Deploy HMRC stack (CDK)
        run: |
          ./mvnw --errors clean package -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-application \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                app-${{ needs.names.outputs.deployment-name }}-HmrcStack \
                --exclusively \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-application.out/cdk-outputs-hmrc.json \
            && cd .. \
            ;
        env:
          ENVIRONMENT_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          SELF_DESTRUCT_HANDLER_SOURCE: "../infra/test/resources/fake-self-destruct-lambda.jar"
          BASE_IMAGE_TAG: ${{ needs.push-images.outputs.base-image-tag }}
          # Set by deploy-environment.yml after the environment's AuthStack is deployed
          COGNITO_USER_POOL_ARN: ${{ vars.COGNITO_USER_POOL_ARN }}
          COGNITO_CLIENT_ID: ${{ vars.COGNITO_CLIENT_ID }}

      - run: cat cdk-submit-application.out/cdk-outputs-hmrc.json | jq '.'

      - name: Resolve stack outputs
        id: hmrc-outputs
        run: |
          AUTH_URL_HMRC_LAMBDA_URL=$(jq -r '.["app-${{ needs.names.outputs.deployment-name }}-HmrcStack"].AuthUrlHmrcLambdaUrl' cdk-submit-application.out/cdk-outputs-hmrc.json)
          EXCHANGE_HMRC_TOKEN_LAMBDA_URL=$(jq -r '.["app-${{ needs.names.outputs.deployment-name }}-HmrcStack"].ExchangeHmrcTokenLambdaUrl' cdk-submit-application.out/cdk-outputs-hmrc.json)
          SUBMIT_VAT_LAMBDA_URL=$(jq -r '.["app-${{ needs.names.outputs.deployment-name }}-HmrcStack"].SubmitVatLambdaUrl' cdk-submit-application.out/cdk-outputs-hmrc.json)
          LOG_RECEIPT_LAMBDA_URL=$(jq -r '.["app-${{ needs.names.outputs.deployment-name }}-HmrcStack"].LogReceiptLambdaUrl' cdk-submit-application.out/cdk-outputs-hmrc.json)
          MY_RECEIPTS_LAMBDA_URL=$(jq -r '.["app-${{ needs.names.outputs.deployment-name }}-HmrcStack"].MyReceiptsLambdaUrl' cdk-submit-application.out/cdk-outputs-hmrc.json)
          echo "AUTH_URL_HMRC_LAMBDA_URL=$AUTH_URL_HMRC_LAMBDA_URL"
          echo "AUTH_URL_HMRC_LAMBDA_URL=$AUTH_URL_HMRC_LAMBDA_URL" >> $GITHUB_OUTPUT
          echo "EXCHANGE_HMRC_TOKEN_LAMBDA_URL=$EXCHANGE_HMRC_TOKEN_LAMBDA_URL"
          echo "EXCHANGE_HMRC_TOKEN_LAMBDA_URL=$EXCHANGE_HMRC_TOKEN_LAMBDA_URL" >> $GITHUB_OUTPUT
          echo "SUBMIT_VAT_LAMBDA_URL=$SUBMIT_VAT_LAMBDA_URL"
          echo "SUBMIT_VAT_LAMBDA_URL=$SUBMIT_VAT_LAMBDA_URL" >> $GITHUB_OUTPUT
          echo "LOG_RECEIPT_LAMBDA_URL=$LOG_RECEIPT_LAMBDA_URL"
          echo "LOG_RECEIPT_LAMBDA_URL=$LOG_RECEIPT_LAMBDA_URL" >> $GITHUB_OUTPUT
          echo "MY_RECEIPTS_LAMBDA_URL=$MY_RECEIPTS_LAMBDA_URL"
          echo "MY_RECEIPTS_LAMBDA_URL=$MY_RECEIPTS_LAMBDA_URL" >> $GITHUB_OUTPUT
        shell: bash
    outputs:
      authUrlHmrcLambdaUrl: ${{ steps.hmrc-outputs.outputs.AUTH_URL_HMRC_LAMBDA_URL }}
      exchangeHmrcTokenLambdaUrl: ${{ steps.hmrc-outputs.outputs.EXCHANGE_HMRC_TOKEN_LAMBDA_URL }}
      submitVatLambdaUrl: ${{ steps.hmrc-outputs.outputs.SUBMIT_VAT_LAMBDA_URL }}
      logReceiptLambdaUrl: ${{ steps.hmrc-outputs.outputs.LOG_RECEIPT_LAMBDA_URL }}
      myReceiptsLambdaUrl: ${{ steps.hmrc-outputs.outputs.MY_RECEIPTS_LAMBDA_URL }}

  deploy-account:
    name: 'deploy account'
    needs:
      - names
      - skip-deploy-check
      - deploy-dev
      - docker-build
      - push-images
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Deploy Account stack (CDK)
        run: |
          ./mvnw --errors clean package -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-application \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                app-${{ needs.names.outputs.deployment-name }}-AccountStack \
                --exclusively \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-application.out/cdk-outputs-account.json \
            && cd .. \
            ;
        env:
          ENVIRONMENT_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          SELF_DESTRUCT_HANDLER_SOURCE: "../infra/test/resources/fake-self-destruct-lambda.jar"
          HMRC_CLIENT_SECRET_ARN: "arn:aws:secretsmanager:eu-west-2:887764105431:secret:${{ needs.names.outputs.environment-name }}/submit/hmrc/client_secret"
          BASE_IMAGE_TAG: ${{ needs.push-images.outputs.base-image-tag }}
          # Set by deploy-environment.yml after the environment's AuthStack is deployed
          COGNITO_USER_POOL_ARN: ${{ vars.COGNITO_USER_POOL_ARN }}
          COGNITO_CLIENT_ID: ${{ vars.COGNITO_CLIENT_ID }}

      - run: cat cdk-submit-application.out/cdk-outputs-account.json | jq '.'

      - name: Resolve stack outputs
        id: account-outputs
        run: |
          CATALOG_LAMBDA_URL=$(jq -r '.["app-${{ needs.names.outputs.deployment-name }}-AccountStack"].CatalogLambdaUrl' cdk-submit-application.out/cdk-outputs-account.json)
          REQUEST_BUNDLES_LAMBDA_URL=$(jq -r '.["app-${{ needs.names.outputs.deployment-name }}-AccountStack"].RequestBundlesLambdaUrl' cdk-submit-application.out/cdk-outputs-account.json)
          MY_BUNDLES_LAMBDA_URL=$(jq -r '.["app-${{ needs.names.outputs.deployment-name }}-AccountStack"].MyBundlesLambdaUrl' cdk-submit-application.out/cdk-outputs-account.json)
          echo "CATALOG_LAMBDA_URL=$CATALOG_LAMBDA_URL"
          echo "CATALOG_LAMBDA_URL=$CATALOG_LAMBDA_URL" >> $GITHUB_OUTPUT
          echo "REQUEST_BUNDLES_LAMBDA_URL=$REQUEST_BUNDLES_LAMBDA_URL"
          echo "REQUEST_BUNDLES_LAMBDA_URL=$REQUEST_BUNDLES_LAMBDA_URL" >> $GITHUB_OUTPUT
          echo "MY_BUNDLES_LAMBDA_URL=$MY_BUNDLES_LAMBDA_URL"
          echo "MY_BUNDLES_LAMBDA_URL=$MY_BUNDLES_LAMBDA_URL" >> $GITHUB_OUTPUT
        shell: bash
    outputs:
      catalogLambdaUrl: ${{ steps.account-outputs.outputs.CATALOG_LAMBDA_URL }}
      requestBundlesLambdaUrl: ${{ steps.account-outputs.outputs.REQUEST_BUNDLES_LAMBDA_URL }}
      myBundlesLambdaUrl: ${{ steps.account-outputs.outputs.MY_BUNDLES_LAMBDA_URL }}

  deploy-delivery-self-destruct:
    name: 'deploy delivery self-destruct'
    needs:
      - names
      - skip-deploy-check
      - mvn-package
      - deploy-auth
      - deploy-hmrc
      - deploy-account
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Download self-destruct handler JAR
        uses: actions/download-artifact@v5
        with:
          name: self-destruct-handler-${{ github.sha }}
          path: cdk-submit-application.out/

      - name: Deploy SelfDestruct Stack (CDK)
        run: |
          ./mvnw --errors clean package -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-delivery \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                del-${{ needs.names.outputs.deployment-name }}-SelfDestructStack \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-application.out/cdk-outputs-self-destruct.json \
          && cd .. \
          ;
        env:
          ENVIRONMENT_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          SELF_DESTRUCT_HANDLER_SOURCE: "../${{ needs.mvn-package.outputs.self-destruct-handler-source }}"
          SELF_DESTRUCT_START_DATETIME: ${{ needs.mvn-package.outputs.self-destruct-start-datetime }}
          WEBSITE_HASH: "placeholder"
          AUTH_URL_MOCK_LAMBDA_URL: ${{ needs.deploy-auth.outputs.authUrlMockLambdaUrl }}
          AUTH_URL_COGNITO_LAMBDA_URL: ${{ needs.deploy-auth.outputs.authUrlCognitoLambdaUrl }}
          COGNITO_EXCHANGE_TOKEN_LAMBDA_URL: ${{ needs.deploy-auth.outputs.exchangeCognitoTokenLambdaUrl }}
          AUTH_URL_HMRC_LAMBDA_URL: ${{ needs.deploy-hmrc.outputs.authUrlHmrcLambdaUrl }}
          EXCHANGE_HMRC_TOKEN_LAMBDA_URL: ${{ needs.deploy-hmrc.outputs.exchangeHmrcTokenLambdaUrl }}
          SUBMIT_VAT_LAMBDA_URL: ${{ needs.deploy-hmrc.outputs.submitVatLambdaUrl }}
          LOG_RECEIPT_LAMBDA_URL: ${{ needs.deploy-hmrc.outputs.logReceiptLambdaUrl }}
          MY_RECEIPTS_LAMBDA_URL: ${{ needs.deploy-hmrc.outputs.myReceiptsLambdaUrl }}
          CATALOG_LAMBDA_URL: ${{ needs.deploy-account.outputs.catalogLambdaUrl }}
          REQUEST_BUNDLES_LAMBDA_URL: ${{ needs.deploy-account.outputs.requestBundlesLambdaUrl }}
          MY_BUNDLES_LAMBDA_URL: ${{ needs.deploy-account.outputs.myBundlesLambdaUrl }}

  deploy-edge:
    name: 'deploy edge'
    needs:
      - names
      - skip-deploy-check
      - deploy-auth
      - deploy-hmrc
      - deploy-account
    runs-on: ubuntu-24.04
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
      url: ${{ steps.edge-outputs.outputs.DIY_SUBMIT_BASE_URL }}
    steps:

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Check if EdgeStack exists
        id: static-skip
        shell: bash
        run: |
          STACK_NAME="del-${{ needs.names.outputs.deployment-name }}-EdgeStack"
          echo "Checking for existing COMPLETE stack: $STACK_NAME"
          COUNT=$(aws cloudformation list-stacks \
            --region "us-east-1" \
            --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE \
            --query "length(StackSummaries[?StackName=='${STACK_NAME}'])" \
            --output text)
          if [ "$COUNT" -ge 1 ]; then
            echo "skipStaticStackDeployment=true" >> "$GITHUB_OUTPUT"
          else
            echo "skipStaticStackDeployment=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        uses: actions/checkout@v5

      - name: Setup Node
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        run: npm ci

      - uses: actions/setup-java@v5
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      #- name: Alias apex domain to holding
      #  # TODO: Change this to the latest known good origin and update the latest after passing the web test.
      #  uses: ./.github/actions/set-origins
      #  with:
      #    origin-domain: ${{ needs.names.outputs.holding-domain }}
      #    apex-domain: ${{ needs.names.outputs.apex-domain }}
      #    hosted-zone-id: "Z0315522208PWZSSBI9AL"

      - name: Build CDK and synthesize and deploy the EdgeStack in the Delivery Application
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        run: |
          ./mvnw --errors clean package -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-delivery \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                del-${{ needs.names.outputs.deployment-name }}-EdgeStack \
                --exclusively \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-delivery.out/cdk-outputs-edge.json \
              && cd .. \
            ;
        env:
          ENVIRONMENT_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          SELF_DESTRUCT_HANDLER_SOURCE: "../infra/test/resources/fake-self-destruct-lambda.jar"
          WEBSITE_HASH: "placeholder"
          AUTH_URL_MOCK_LAMBDA_URL: ${{ needs.deploy-auth.outputs.authUrlMockLambdaUrl }}
          AUTH_URL_COGNITO_LAMBDA_URL: ${{ needs.deploy-auth.outputs.authUrlCognitoLambdaUrl }}
          COGNITO_EXCHANGE_TOKEN_LAMBDA_URL: ${{ needs.deploy-auth.outputs.exchangeCognitoTokenLambdaUrl }}
          AUTH_URL_HMRC_LAMBDA_URL: ${{ needs.deploy-hmrc.outputs.authUrlHmrcLambdaUrl }}
          EXCHANGE_HMRC_TOKEN_LAMBDA_URL: ${{ needs.deploy-hmrc.outputs.exchangeHmrcTokenLambdaUrl }}
          SUBMIT_VAT_LAMBDA_URL: ${{ needs.deploy-hmrc.outputs.submitVatLambdaUrl }}
          LOG_RECEIPT_LAMBDA_URL: ${{ needs.deploy-hmrc.outputs.logReceiptLambdaUrl }}
          MY_RECEIPTS_LAMBDA_URL: ${{ needs.deploy-hmrc.outputs.myReceiptsLambdaUrl }}
          CATALOG_LAMBDA_URL: ${{ needs.deploy-account.outputs.catalogLambdaUrl }}
          REQUEST_BUNDLES_LAMBDA_URL: ${{ needs.deploy-account.outputs.requestBundlesLambdaUrl }}
          MY_BUNDLES_LAMBDA_URL: ${{ needs.deploy-account.outputs.myBundlesLambdaUrl }}

      - name: Resolve stack outputs
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        id: edge-outputs
        run: |
          DIY_SUBMIT_BASE_URL=$(jq -r '.["del-${{ needs.names.outputs.deployment-name }}-EdgeStack"].BaseUrl' cdk-submit-delivery.out/cdk-outputs-edge.json)
          DISTRIBUTION_ID=$(jq -r '.["del-${{ needs.names.outputs.deployment-name }}-EdgeStack"].DistributionId' cdk-submit-delivery.out/cdk-outputs-edge.json)
          echo "DIY_SUBMIT_BASE_URL=$DIY_SUBMIT_BASE_URL"
          echo "DIY_SUBMIT_BASE_URL=$DIY_SUBMIT_BASE_URL" >> $GITHUB_OUTPUT
          echo "DISTRIBUTION_ID=$DISTRIBUTION_ID"
          echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT
        shell: bash
    outputs:
      base-url: ${{ steps.edge-outputs.outputs.DIY_SUBMIT_BASE_URL }}
      cloudfront-distribution-id: ${{ steps.edge-outputs.outputs.DISTRIBUTION_ID }}

  deploy-publish:
    name: 'deploy publish'
    needs:
      - names
      - skip-deploy-check
      - deploy-edge
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Compute hash of static website content
        id: publish-hash
        shell: bash
        run: |
          WEBSITE_HASH=$(find 'web/public' -type f -exec sha256sum {} + | sort -k 2 | sha256sum | awk '{print $1}')
          echo "WEBSITE_HASH=$WEBSITE_HASH"
          echo "WEBSITE_HASH=$WEBSITE_HASH" >> $GITHUB_OUTPUT

      - name: Compare current submit.hash with computed hash
        id: publish-compare
        shell: bash
        run: |
          EDGE_HASH_URL="${{ needs.deploy-edge.outputs.base-url }}/submit.hash"
          echo "Fetching existing hash from $EDGE_HASH_URL"
          EXISTING_HASH=$(curl --fail --silent --show-error --location "$EDGE_HASH_URL" || echo "")
          echo "EXISTING_HASH=$EXISTING_HASH"
          echo "EXISTING_HASH=$EXISTING_HASH" >> $GITHUB_OUTPUT
          if [ "$EXISTING_HASH" == "${{ steps.publish-hash.outputs.WEBSITE_HASH }}" ]; then
            echo "skipPublishStackDeployment=true" >> "$GITHUB_OUTPUT"
          else
            echo "skipPublishStackDeployment=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Node
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.publish-compare.outputs.skipPublishStackDeployment != 'true' }}
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.publish-compare.outputs.skipPublishStackDeployment != 'true' }}
        run: npm ci

      - uses: actions/setup-java@v5
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.publish-compare.outputs.skipPublishStackDeployment != 'true' }}
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Configure AWS role via GitHub OIDC
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.publish-compare.outputs.skipPublishStackDeployment != 'true' }}
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.publish-compare.outputs.skipPublishStackDeployment != 'true' }}
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Build CDK and synthesize and deploy the PublishStack in the Delivery Application
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.publish-compare.outputs.skipPublishStackDeployment != 'true' }}
        run: |
          ./mvnw --errors clean package -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-delivery \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                del-${{ needs.names.outputs.deployment-name }}-PublishStack \
                --exclusively \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-application.out/cdk-outputs-publish.json \
              && cd .. \
            ;
        env:
          ENVIRONMENT_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          SELF_DESTRUCT_HANDLER_SOURCE: "../infra/test/resources/fake-self-destruct-lambda.jar"
          WEBSITE_HASH: ${{ steps.publish-hash.outputs.WEBSITE_HASH }}
          AUTH_URL_MOCK_LAMBDA_URL: ${{ needs.deploy-auth.outputs.authUrlMockLambdaUrl }}
          AUTH_URL_COGNITO_LAMBDA_URL: ${{ needs.deploy-auth.outputs.authUrlCognitoLambdaUrl }}
          COGNITO_EXCHANGE_TOKEN_LAMBDA_URL: ${{ needs.deploy-auth.outputs.exchangeCognitoTokenLambdaUrl }}
          AUTH_URL_HMRC_LAMBDA_URL: ${{ needs.deploy-hmrc.outputs.authUrlHmrcLambdaUrl }}
          EXCHANGE_HMRC_TOKEN_LAMBDA_URL: ${{ needs.deploy-hmrc.outputs.exchangeHmrcTokenLambdaUrl }}
          SUBMIT_VAT_LAMBDA_URL: ${{ needs.deploy-hmrc.outputs.submitVatLambdaUrl }}
          LOG_RECEIPT_LAMBDA_URL: ${{ needs.deploy-hmrc.outputs.logReceiptLambdaUrl }}
          MY_RECEIPTS_LAMBDA_URL: ${{ needs.deploy-hmrc.outputs.myReceiptsLambdaUrl }}
          CATALOG_LAMBDA_URL: ${{ needs.deploy-account.outputs.catalogLambdaUrl }}
          REQUEST_BUNDLES_LAMBDA_URL: ${{ needs.deploy-account.outputs.requestBundlesLambdaUrl }}
          MY_BUNDLES_LAMBDA_URL: ${{ needs.deploy-account.outputs.myBundlesLambdaUrl }}

#      - name: Upsert Cognito callback/logout URLs
#        if: ${{ contains(needs.deploy-edge.outputs.base-url, 'submit') }}
#        uses: actions/github-script@v8
#        env:
#          USER_POOL_ID: ${{ vars.COGNITO_USER_POOL_ID }}
#          CLIENT_ID: ${{ vars.COGNITO_CLIENT_ID }}
#          REGION: ${{ env.AWS_REGION }}
#          BASE_URL: ${{ needs.deploy-edge.outputs.base-url }}
#        with:
#          script: |
#            const {execSync} = require('child_process')
#            const jp = JSON.parse
#            const sh = (cmd)=>execSync(cmd,{encoding:'utf8'}).trim()
#
#            const d = jp(sh(`aws cognito-idp describe-user-pool-client --user-pool-id ${process.env.USER_POOL_ID} --client-id ${process.env.CLIENT_ID} --region ${process.env.REGION}`)).UserPoolClient
#            const have = new Set([...(d.CallbackURLs||[]), ...(d.LogoutURLs||[])])
#
#            const add = (arr)=>Array.from(new Set(arr))
#            const cbWanted = add([...(d.CallbackURLs||[]), `${process.env.BASE_URL}auth/loginWithCognitoCallback.html`])
#            const loWanted = add([...(d.LogoutURLs||[]), `${process.env.BASE_URL}`])
#
#            const changed = JSON.stringify(cbWanted) !== JSON.stringify(d.CallbackURLs||[]) ||
#                            JSON.stringify(loWanted) !== JSON.stringify(d.LogoutURLs||[])
#
#            core.notice(`Will update: ${changed}`)
#            if (!changed) return
#
#            const payload = {
#              UserPoolId: process.env.USER_POOL_ID,
#              ClientId: process.env.CLIENT_ID,
#              CallbackURLs: cbWanted,
#              LogoutURLs: loWanted
#            }
#            const tmp = 'payload.json'
#            require('fs').writeFileSync(tmp, JSON.stringify(payload))
#            sh(`aws cognito-idp update-user-pool-client --cli-input-json file://${tmp} --region ${process.env.REGION}`)

  deploy-ops:
    name: 'deploy ops with dashboard'
    needs:
      - names
      - skip-deploy-check
      - npm-test
      - deploy-edge
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Check if OpsStack exists
        id: static-skip
        shell: bash
        run: |
          STACK_NAME="app-${{ needs.names.outputs.deployment-name }}-OpsStack"
          echo "Checking existence of $STACK_NAME"
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" >/dev/null 2>&1; then
            echo "skipStaticStackDeployment=true" >> "$GITHUB_OUTPUT"
          else
            echo "skipStaticStackDeployment=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.publish-compare.outputs.skipPublishStackDeployment != 'true' }}
        uses: actions/checkout@v5

      - name: Setup Node
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.publish-compare.outputs.skipPublishStackDeployment != 'true' }}
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.publish-compare.outputs.skipPublishStackDeployment != 'true' }}
        run: npm ci

      - uses: actions/setup-java@v5
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.publish-compare.outputs.skipPublishStackDeployment != 'true' }}
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Deploy Ops Stack (CDK)
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.publish-compare.outputs.skipPublishStackDeployment != 'true' }}
        run: |
          ./mvnw --errors clean package -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-application \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                app-${{ needs.names.outputs.deployment-name }}-OpsStack \
                --exclusively \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-application.out/cdk-outputs-publish.json \
              && cd .. \
            ;
        env:
          ENVIRONMENT_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          SELF_DESTRUCT_HANDLER_SOURCE: "../infra/test/resources/fake-self-destruct-lambda.jar"
          BASE_IMAGE_TAG: ${{ needs.push-images.outputs.base-image-tag }}
          # Set by deploy-environment.yml after the environment's AuthStack is deployed
          COGNITO_USER_POOL_ARN: ${{ vars.COGNITO_USER_POOL_ARN }}
          COGNITO_CLIENT_ID: ${{ vars.COGNITO_CLIENT_ID }}

#  origin-test:
#    if: ${{ !cancelled() }}
#    name: 'origin test'
#    needs:
#      - names
#      - skip-deploy-check
#      - deploy-auth
#      - deploy-hmrc
#      - deploy-account
#      - deploy-edge
#      - deploy-publish
#    runs-on: ubuntu-24.04
#    container: mcr.microsoft.com/playwright:v1.55.1-jammy
#    # Match version number with @playwright/test in package.json with: https://mcr.microsoft.com/en-us/artifact/mar/playwright/tags
#    # and extension with ubuntu distribution e.g. https://releases.ubuntu.com/jammy/
#    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v5
#
#      - name: Setup Node
#        uses: actions/setup-node@v6
#        with:
#          node-version: ${{ env.NODE_VERSION }}
#          cache: 'npm'
#
#      - name: Install dependencies
#        run: |
#          npm ci --ignore-scripts
#        env:
#          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
#
#      #cp '.env.${{ needs.names.outputs.environment-name }}' '.env.test' ; npx dotenv -e '.env.${{ needs.names.outputs.environment-name }}' -- npm run test:behaviour
#      #
#      - run: cp '.env.${{ needs.names.outputs.environment-name }}' '.env.test' ; npx dotenv -e '.env.${{ needs.names.outputs.environment-name }}' -- npm run test:originBehaviour
#        env:
#          DIY_SUBMIT_BASE_URL: ${{ needs.deploy-edge.outputs.base-url }}
#          TEST_HMRC_USERNAME: ${{ vars.TEST_HMRC_USERNAME }}
#          TEST_HMRC_PASSWORD: ${{ secrets.TEST_HMRC_PASSWORD }}
#          TEST_HMRC_VAT_NUMBER: ${{ vars.TEST_HMRC_VAT_NUMBER }}
#
#      - name: Upload artifacts (results)
#        if: ${{ !cancelled() }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: origin-test-artifacts
#          retention-days: 30
#          path: |
#            target/behaviour-test-results/
#
#      - name: Upload artifacts (reports)
#        if: ${{ !cancelled() }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: origin-test-reports
#          retention-days: 30
#          path: |
#            target/test-reports/

  # Invoke .github/workflows/set-origins.yml to set this domain as the apex origin
  #  workflow_call:
  #    inputs:
  #      environment:
  #        description: 'Target environment (binds to GitHub Environment)'
  #        required: true
  #        type: string
  #      originsCsv:
  #        description: 'Comma-separated list of app origins to serve from apex (e.g. ci-123.example.com,ci-124.example.com). Leave blank to display maintenance page.'
  #        required: false
  #        type: string
  #        default: ''
  set-origins:
    name: 'set origins'
    # TODO: revert to set origin only on success when stable
    if: ${{ !cancelled() && (needs.names.outputs.environment-name != 'prod' || needs.origin-test.outputs.result == 'success') }}
    needs:
      - names
      - skip-deploy-check
      - deploy-auth
      - deploy-hmrc
      - deploy-account
      - deploy-edge
      #- deploy-publish
    runs-on: ubuntu-24.04
    environment: ${{ needs.names.outputs.environment-name }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Alias apex domain to base domain
        uses: ./.github/actions/set-origins
        with:
          origin-domain: ${{ needs.names.outputs.base-domain }}
          apex-domain: ${{ needs.names.outputs.apex-domain }}
          hosted-zone-id: ${{ env.AWS_HOSTED_ZONE_ID }}
          cloudfront-distribution-id: ${{ needs.deploy-edge.outputs.cloudfront-distribution-id }}

#        run: |
#          set -euo pipefail
#
#          if [ -z "${DIY_SUBMIT_APEX_DOMAIN:-}" ] || [ -z "${DIY_SUBMIT_BASE_DOMAIN:-}" ] || [ -z "${AWS_HOSTED_ZONE_ID:-}" ]; then
#            echo "Required env vars DIY_SUBMIT_APEX_DOMAIN, DIY_SUBMIT_BASE_DOMAIN, and AWS_HOSTED_ZONE_ID must be set."
#            exit 1
#          fi
#
#          cat > /tmp/alias.json <<JSON
#          {
#            "Comment": "Alias apex domain to base domain",
#            "Changes": [
#              {
#                "Action": "UPSERT",
#                "ResourceRecordSet": {
#                  "Name": "${DIY_SUBMIT_APEX_DOMAIN}.",
#                  "Type": "A",
#                  "AliasTarget": {
#                    "HostedZoneId": "${AWS_HOSTED_ZONE_ID}",
#                    "DNSName": "${DIY_SUBMIT_BASE_DOMAIN}.",
#                    "EvaluateTargetHealth": false
#                  }
#                }
#              },
#              {
#                "Action": "UPSERT",
#                "ResourceRecordSet": {
#                  "Name": "${DIY_SUBMIT_APEX_DOMAIN}.",
#                  "Type": "AAAA",
#                  "AliasTarget": {
#                    "HostedZoneId": "${AWS_HOSTED_ZONE_ID}",
#                    "DNSName": "${DIY_SUBMIT_BASE_DOMAIN}.",
#                    "EvaluateTargetHealth": false
#                  }
#                }
#              }
#            ]
#          }
#          JSON
#
#          echo "Upserting alias records: ${DIY_SUBMIT_APEX_DOMAIN} -> ${DIY_SUBMIT_BASE_DOMAIN} in hosted zone ${AWS_HOSTED_ZONE_ID}"
#          aws route53 change-resource-record-sets --hosted-zone-id "$AWS_HOSTED_ZONE_ID" --change-batch file:///tmp/alias.json

  # TODO: Configure or copy and convert the system test API test to test against deployed environment
#  api-test:
#    if: ${{ !cancelled() && inputs.skipDeploy == 'true' || needs.deploy-publish.result == 'success' }}
#    name: 'api test'
#    needs:
#      - names
#      - build-cdk
#      - deploy-application
#      - deploy-edge
#      - deploy-publish
#      - set-origins
  #    - origin-test
#    runs-on: ubuntu-24.04
#    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v5
#
#      - name: Setup Node
#        uses: actions/setup-node@v6
#        with:
#          node-version: ${{ env.NODE_VERSION }}
#          cache: 'npm'
#
#      - name: Node dependencies
#        run: npm ci
#
#      - name: Install dependencies and Playwright browsers
#        run: |
#          npm -v
#          npm ci --ignore-scripts
#          npx playwright install chromium --with-deps
#
#      - name: Run Playwright API test
#        run: |
#          echo "DIY_SUBMIT_BASE_URL=${DIY_SUBMIT_BASE_URL}"
#          npm run test:api
#        env:
#          DIY_SUBMIT_BASE_URL: ${{ needs.names.outputs.base-url }}
#
#      - name: Upload artifacts
#        if: ${{ !cancelled() }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: api-test-artifacts
#          path: |
#            playwright-report
#            test-results

  web-test:
    if: ${{ !cancelled() }}
    name: 'web test'
    needs:
      - names
      - skip-deploy-check
      - deploy-auth
      - deploy-hmrc
      - deploy-account
      - deploy-edge
      - deploy-publish
      - set-origins
    runs-on: ubuntu-24.04
    container: mcr.microsoft.com/playwright:v1.55.1-jammy
    # Match version number with @playwright/test in package.json with: https://mcr.microsoft.com/en-us/artifact/mar/playwright/tags
    # and extension with ubuntu distribution e.g. https://releases.ubuntu.com/jammy/
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --ignore-scripts
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

      - name: Run behaviour tests
        run: |
          cp '.env.${{ needs.names.outputs.environment-name }}' '.env.test' \
          ; npx dotenv -e '.env.${{ needs.names.outputs.environment-name }}' -- \
            npm run test:webBehaviour || exit_code=$? \
          ; cp ./target/submit*.log ./target/behaviour-test-results/ || true \
          ; exit ${exit_code:-0} \
          ;
        env:
          DIY_SUBMIT_BASE_URL: ${{ needs.names.outputs.apex-url }}
          TEST_HMRC_USERNAME: ${{ vars.TEST_HMRC_USERNAME }}
          TEST_HMRC_PASSWORD: ${{ secrets.TEST_HMRC_PASSWORD }}
          TEST_HMRC_VAT_NUMBER: ${{ vars.TEST_HMRC_VAT_NUMBER }}

      - name: Upload artifacts (results)
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: web-test-artifacts
          retention-days: 30
          path: |
            target/behaviour-test-results/

      - name: Upload artifacts (reports)
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: web-test-reports
          retention-days: 30
          path: |
            target/test-reports/

# TODO: Reinstate load test
#  load-test:
#    if: ${{ !cancelled() && inputs.skipDeploy == 'true' || needs.deploy-publish.result == 'success' }}
#    name: 'load test'
#    needs:
#      - names
#      - build-cdk
#      - deploy-edge
#      - deploy-edge
#      - deploy-publish
#      - set-origins
#    runs-on: ubuntu-24.04
#    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v5
#
#      - name: Setup Node
#        uses: actions/setup-node@v6
#        with:
#          node-version: ${{ env.NODE_VERSION }}
#          cache: 'npm'
#
#      - name: Node dependencies
#        run: npm ci
#
#      - name: Setup k6
#        uses: grafana/setup-k6-action@v1
#
#      - name: Setup k6 with dashboard extension
#        run: |
#          # Download pre-built k6 binary with xk6-dashboard extension
#          curl -L https://github.com/grafana/xk6-dashboard/releases/download/v0.7.12/xk6-dashboard_v0.7.12_linux_amd64.tar.gz -o xk6-dashboard.tar.gz
#          tar -xzf xk6-dashboard.tar.gz
#          chmod +x xk6-dashboard_v0.7.12_linux_amd64/k6
#          # Create a symlink for easy access
#          ln -s xk6-dashboard_v0.7.12_linux_amd64/k6 k6
#          ./k6 version
#
#      - name: Run k6 load test with dashboard
#        run: |
#          # k6 run tests/load.live.test.js --summary-export=load-test-summary.json
#          # Run k6 with dashboard export, events recording, and summary export for maximum information
#          ./k6 run tests/load.live.test.js \
#            --out 'dashboard=export=load-test-report.html&port=-1&record=load-test-events.json&period=1s' \
#            --summary-export=load-test-summary.json
#        env:
#          DIY_SUBMIT_BASE_URL: ${{ needs.names.outputs.base-url }}
#          TEST_USERNAME: ${{ needs.test-parameters.outputs.test-username }}
#          TEST_PASSWORD: ${{ needs.test-parameters.outputs.test-password }}
#          DURATION: ${{ inputs.loadTestDuration }}
#
#      - name: Upload artifacts
#        if: ${{ !cancelled() }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: load-test-artifacts
#          path: |
#            load-test-summary.json
#            load-test-report.html
#            load-test-events.json


  # TODO: Get the Playwright report and load test report into the GitHub pages site and navigable from the front page
  publish-artifacts:
    name: 'publish artifacts to github pages'
    if: ${{ !cancelled() && needs.names.outputs.environment-name == 'prod' }}
    needs:
      - names
      - deploy-edge
      #- api-test
      - web-test
      #- load-test
    runs-on: ubuntu-24.04
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}artifacts
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - name: Download all test artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts/
        continue-on-error: true

      - name: Convert Playwright video to MP4
        if: ${{ !cancelled() }}
        run: |
          set -euo pipefail
          root="artifacts/web-test-artifacts"

          # Recursively transcode all .webm files, placing output next to source with 'converted' prefix
          pids=()
          while IFS= read -r -d '' f; do
            dir=$(dirname "$f")
            base="${f##*/}"
            name="${base%.webm}"
            out="${dir}/converted${name}.mp4"
            echo "Transcoding $f -> $out"
            npm run convert:video -- --in "$f" --out "$out" &
            pids+=($!)
          done < <(find "$root" -type f -name '*.webm' -print0)

          # Wait for all transcodes to complete
          fail=0
          for pid in "${pids[@]:-}"; do
            if ! wait "$pid"; then
              fail=1
            fi
          done

          exit $fail

      - name: Upload artifacts (converted videos)
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: web-test-artifacts-converted
          retention-days: 30
          path: |
            artifacts/web-test-artifacts

      - name: Create GitHub Pages content
        run: |
          mkdir -p gh-pages

          # Copy web assets to root
          cp -vr web/* gh-pages/

          # Create artifacts directory structure
          mkdir -p gh-pages/artifacts

          # Copy behaviour test artifacts
          if [ -d "artifacts/behaviour-test-artifacts" ]; then
            cp -vr artifacts/behaviour-test-artifacts gh-pages/artifacts/.
          fi

          # Copy behaviour test reports
          if [ -d "artifacts/behaviour-test-reports" ]; then
            cp -vr artifacts/behaviour-test-reports gh-pages/artifacts/.
          fi

          # Copy origin test artifacts
          if [ -d "artifacts/origin-test-artifacts" ]; then
            cp -vr artifacts/origin-test-artifacts gh-pages/artifacts/.
          fi

          # Copy origin test reports
          if [ -d "artifacts/origin-test-reports" ]; then
            cp -vr artifacts/origin-test-reports gh-pages/artifacts/.
          fi

          # Copy web test artifacts
          if [ -d "artifacts/web-test-artifacts" ]; then
            cp -vr artifacts/web-test-artifacts gh-pages/artifacts/.
          fi

          # Copy web test reports
          if [ -d "artifacts/web-test-reports" ]; then
            cp -vr artifacts/web-test-reports gh-pages/artifacts/.
          fi

          # Copy browser test artifacts
          if [ -d "artifacts/test-results-browser" ]; then
            cp -vr artifacts/test-results-browser gh-pages/artifacts/.
          fi

          # Copy browser test reports
          if [ -d "artifacts/test-reports-browser" ]; then
            cp -vr artifacts/test-reports-browser gh-pages/artifacts/.
          fi

          # Create index page for artifacts
          cat > gh-pages/artifacts/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Test Artifacts - OIDC Provider</title>
              <link rel="stylesheet" href="../oidc.css">
          </head>
          <body>
              <div class="container">
                  <h1>Test Artifacts</h1>
                  <p>Generated from to deployment: <strong>${{ needs.names.outputs.deployment-name }}</strong></p>
                  <p>GitHub Actions run: <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" target="_blank">${{ github.run_id }}</a></p>
                  <p>Tested service base URL: <a href="${{ needs.names.outputs.base-url }}" target="_blank">${{ needs.names.outputs.base-url }}</a></p>

                  <h2>Available Test output</h2>
                  <ul>
                      <li><a href="behaviour-test-reports/html-report/index.html">Behaviour Test Reports</a></li>
                      <li><a href="origin-test-reports/html-report/index.html">Origin Test Reports</a></li>
                      <li><a href="web-test-reports/html-report/index.html">Web Test Reports</a></li>
                      <li><a href="test-reports-browser/html-report/index.html">Browser Test Reports</a></li>
                  </ul>
              </div>
          </body>
          </html>
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v4
        with:
          path: gh-pages

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Output deployment URLs
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Tested service base URL**: ${{ needs.names.outputs.base-url }}" >> $GITHUB_STEP_SUMMARY
          #echo "📊 **Test Reports**: ${{ steps.deployment.outputs.page_url }}artifacts" >> $GITHUB_STEP_SUMMARY
          echo "📁 **GitHub Pages**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

    outputs:
      service-base-url: ${{ needs.names.outputs.base-url }}
      github-pages-url: ${{ steps.deployment.outputs.page_url }}
      artifacts-url: ${{ steps.deployment.outputs.page_url }}artifacts/
