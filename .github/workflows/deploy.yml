name: deploy
run-name: "deploy from ${{ github.ref_name }}"
concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: false

on:
  workflow_dispatch:
    inputs:
      forceAllStackDeployment:
        description: 'Force re-deploy of all stacks even if they already exist or pass comparison checks'
        type: choice
        options:
          - 'true'
          - 'false'
        required: false
        default: 'false'
      skipDeploy:
        description: 'Skip deploy (run tests only, no deployment)'
        type: choice
        options:
            - 'true'
            - 'false'
        required: false
        default: 'false'
      environment-name:
        type: choice
        description: 'Environment name to use instead of computing from branch, e.g. ci or prod'
        required: false
        options:
          - ''
          - 'ci'
          - 'prod'
        default: ''
      deployment-name:
        type: string
        description: 'Deployment name to use instead of computing from branch, e.g. ci-lambdas6 or prod-ea373de'
        required: false
        default: ''
      loadTestDuration:
        description: 'Duration for load test (e.g. 30s, 10m, 1h)'
        required: false
        default: '30s'
      selfDestructDelayHours:
        description: 'Hours before self-destruct triggers for non-prod environments'
        required: false
        default: '8'
  push:
    branches:
      - '**'
      - '!gh_pages'
      - '!dependabot/**'
    paths:
      - 'app/functions/**'
      - 'app/lib/**'
      - 'infra/main/**'
      - 'web/public/**'
      - '.env.ci'
      - '.env.prod'
      - '**/cdk.json'
      - 'Dockerfile'
      - 'LICENSE'
      - 'package.json'
      - 'pom.xml'
      - 'product-catalogue.toml'
      - '.github/actions/get-names'
      - '.github/actions/set-origins'
      - '.github/workflows/deploy.yml'
  schedule:
    - cron: '11 4 * * *'

permissions:
  id-token: write
  contents: read
  pull-requests: read
  pages: write

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '22'
  ACTIONS_ROLE_ARN: 'arn:aws:iam::887764105431:role/submit-github-actions-role'
  DEPLOY_ROLE_ARN:  'arn:aws:iam::887764105431:role/submit-deployment-role'
  AWS_REGION: 'eu-west-2'
  AWS_ACCOUNT_ID: '887764105431'
  AWS_HOSTED_ZONE_ID: 'Z0315522208PWZSSBI9AL'
  BASE_IMAGE_TAG_PREFIX: 'submit-base'
  loadTestDuration: ${{ inputs.loadTestDuration || '30s' }}
  GITHUB_ACTOR: ${{ github.actor }}
  SELF_DESTRUCT_DELAY_HOURS: ${{ inputs.selfDestructDelayHours || '8' }}
  BASE_IMAGE_TAG: ${{ github.sha }}
  FORCE_ALL_STACK_DEPLOYMENT: ${{ inputs.forceAllStackDeployment || 'false' }}
  COMMIT_HASH: ${{ github.sha }}
  BUILD_NUMBER: ${{ github.run_number }}
  GITHUB_REF: ${{ github.ref }}
  GITHUB_REF_TO_ENV: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}

jobs:

  names:
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Compute deployment name and environment
        id: deployment-config
        uses: ./.github/actions/get-names
        with:
          environment-name: ${{ github.event.inputs.environment-name || '' }}
          deployment-name: ${{ github.event.inputs.deployment-name || '' }}
    outputs:
      environment-name: ${{ steps.deployment-config.outputs.environment-name }}
      deployment-name: ${{ steps.deployment-config.outputs.deployment-name }}
      base-domain: ${{ steps.deployment-config.outputs.base-domain }}
      base-url:      ${{ steps.deployment-config.outputs.base-url }}
      apex-domain: ${{ steps.deployment-config.outputs.apex-domain }}
      apex-url: ${{ steps.deployment-config.outputs.apex-url }}
      holding-domain: ${{ steps.deployment-config.outputs.holding-domain }}
      holding-url: ${{ steps.deployment-config.outputs.holding-url }}

  test:
    name: 'delegate to test workflow'
    needs:
      - names
    uses: ./.github/workflows/test.yml
    permissions:
      contents: read
      packages: read
      id-token: write
    with:
      environment-name: ${{ needs.names.outputs.environment-name }}
      deployment-name: ${{ needs.names.outputs.deployment-name }}

  npm-unit-test-coverage:
    name: 'npm unit test with coverage'
    runs-on: ubuntu-latest
    needs:
      - names
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - run: npm ci

      - run: npm run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 30

  mvn-package:
    name: 'maven package'
    runs-on: ubuntu-latest
    needs:
      - names
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: package
        id: package
        shell: bash
        run: |
          ./mvnw clean verify -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }}

      - name: Self Destruct Start Datetime (ISO 8601) now plus SELF_DESTRUCT_DELAY_HOURS
        id: self-destruct-start
        shell: bash
        run: |
          SELF_DESTRUCT_START_DATETIME=$(date -u -d "+${{ env.SELF_DESTRUCT_DELAY_HOURS }} hours" +"%Y-%m-%dT%H:%M:%SZ")
          echo "SELF_DESTRUCT_START_DATETIME=$SELF_DESTRUCT_START_DATETIME"
          echo "SELF_DESTRUCT_START_DATETIME=$SELF_DESTRUCT_START_DATETIME" >> $GITHUB_OUTPUT

    outputs:
      self-destruct-start-datetime: ${{ steps.self-destruct-start.outputs.SELF_DESTRUCT_START_DATETIME }}

  behaviour-test:
    name: 'behaviour test (proxy)'
    needs:
      - names
    runs-on: ubuntu-24.04
    # TODO: Reinstate this because it could have just been the missing NGROK_AUTH_TOKEN that held up the tests
    #container: mcr.microsoft.com/playwright:v1.55.1-jammy
    # Match version number with @playwright/test in package.json with: https://mcr.microsoft.com/en-us/artifact/mar/playwright/tags
    # and extension with ubuntu distribution e.g. https://releases.ubuntu.com/jammy/
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # TODO: Part 2: Reinstate this because it could have just been the missing NGROK_AUTH_TOKEN that held up the tests
      #  npm ci --ignore-scripts
      #  env:
      #    PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      - name: Install dependencies
        run: |
           npm install
           npx playwright install chromium --with-deps

      - name: Authenticate ngrok
        shell: bash
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          npx ngrok config add-authtoken "${NGROK_AUTH_TOKEN?}"

      - name: Run behaviour tests
        run: |
          npm run test:originBehaviour || exit_code=$? \
          ; cp ./target/submit*.log ./target/behaviour-test-results/ || true \
          ; exit ${exit_code:-0} \
          ;
        env:
          #DIY_SUBMIT_BASE_URL: ${{ needs.names.outputs.base-url }}
          TEST_HMRC_USERNAME: ${{ vars.TEST_HMRC_USERNAME }}
          TEST_HMRC_PASSWORD: ${{ secrets.TEST_HMRC_PASSWORD }}
          TEST_HMRC_VAT_NUMBER: ${{ vars.TEST_HMRC_VAT_NUMBER }}

      - name: Upload artifacts (results)
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: behaviour-test-artifacts
          retention-days: 30
          path: |
            target/behaviour-test-results/

      - name: Upload artifacts (reports)
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: behaviour-test-reports
          retention-days: 30
          path: |
            target/test-reports/

  test-aws-credentials:
    name: 'test aws credentials'
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: CDK stacks in eu-west-2 and us-east-1
        run: |
          aws cloudformation describe-stacks --region eu-west-2 --query "Stacks[].StackName" --output text | tr '\t' '\n' | sort
          aws cloudformation describe-stacks --region us-east-1 --query "Stacks[].StackName" --output text | tr '\t' '\n' | sort

  skip-deploy-check:
    name: 'skip deploy check'
    #if: ${{ (inputs.skipDeploy != 'true') && (github.event_name != 'push' || !contains(github.event.head_commit.message, 'skip:')) }}
    if: ${{ inputs.skipDeploy != 'true' }}
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Check if skipDeploy is set
        id: check
        run: |
          inputsSkipDeploy="${{ inputs.skipDeploy }}"
          skipDeploy="${{ (inputs.skipDeploy != 'true') && (github.event_name != 'push' || !contains(github.event.head_commit.message, 'skip:')) }}"
          echo "inputsSkipDeploy=$inputsSkipDeploy"
          echo "inputsSkipDeploy=$inputsSkipDeploy" >> "$GITHUB_OUTPUT"
          echo "skipDeploy=$skipDeploy"
          echo "skipDeploy=$skipDeploy" >> "$GITHUB_OUTPUT"

    outputs:
      inputsSkipDeploy: ${{ steps.check.outputs.inputsSkipDeploy }}
      skipDeploy: ${{ steps.check.outputs.skipDeploy }}

  docker-build:
    name: 'docker build'
    needs:
      - skip-deploy-check
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - name: Build base image
        run: |
          docker build \
            -t "${{ env.BASE_IMAGE_TAG_PREFIX }}:${{ github.sha }}" \
            -f Dockerfile .

      - name: Save image artifact
        run: |
          mkdir docker-image
          docker save -o docker-image/image.tar "${{ env.BASE_IMAGE_TAG_PREFIX }}:${{ github.sha }}"

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: docker-image/image.tar
          if-no-files-found: error

  deploy-application-self-destruct:
    name: 'deploy application self-destruct'
    if: ${{ inputs.skipDeploy != 'true' && github.ref != 'refs/heads/main' && needs.names.outputs.environment-name != 'prod' }}
    needs:
      - names
      - skip-deploy-check
      - mvn-package
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Deploy SelfDestruct Stack (CDK)
        run: |
          ./mvnw --errors clean verify -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-application \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                ${{ needs.names.outputs.deployment-name }}-app-SelfDestructStack \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-application.out/cdk-outputs-self-destruct.json \
          && cd .. \
          ;
        env:
          ENVIRONMENT_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          SELF_DESTRUCT_START_DATETIME: ${{ needs.mvn-package.outputs.self-destruct-start-datetime }}
          # Set by deploy-environment.yml after the environment's AuthStack is deployed
          COGNITO_USER_POOL_ARN: ${{ vars.COGNITO_USER_POOL_ARN }}
          COGNITO_CLIENT_ID: ${{ vars.COGNITO_CLIENT_ID }}

  deploy-dev:
    name: 'deploy dev'
    needs:
      - names
      - skip-deploy-check
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Check if DevStack exists
        id: static-skip
        shell: bash
        run: |
          STACK_NAME="${{ needs.names.outputs.deployment-name }}-app-DevStack"
          echo "Checking for existing COMPLETE stack: $STACK_NAME"
          COUNT=$(aws cloudformation list-stacks \
            --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE \
            --query "length(StackSummaries[?StackName=='${STACK_NAME}'])" \
            --output text)
          if [ "$COUNT" -ge 1 ]; then
            echo "skipStaticStackDeployment=true" >> "$GITHUB_OUTPUT"
          else
            echo "skipStaticStackDeployment=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        uses: actions/checkout@v5

      - name: Setup Node
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        run: npm ci

      - uses: actions/setup-java@v5
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Deploy Dev Stack (CDK)
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        run: |
          ./mvnw --errors clean verify -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-application \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                ${{ needs.names.outputs.deployment-name }}-app-DevStack \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-application.out/cdk-outputs-dev.json \
            && cd .. \
          ;
        env:
          ENVIRONMENT_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          # Set by deploy-environment.yml after the environment's AuthStack is deployed
          COGNITO_USER_POOL_ARN: ${{ vars.COGNITO_USER_POOL_ARN }}
          COGNITO_CLIENT_ID: ${{ vars.COGNITO_CLIENT_ID }}

  push-images:
    name: 'push images'
    needs:
      - names
      - skip-deploy-check
      - deploy-dev
      - docker-build
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Login to Amazon ECR
        shell: bash
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
            | docker login \
                --username AWS \
                --password-stdin "${ECR_REPOSITORY_BASE_URL?}/${ECR_REPOSITORY_NAME?}" \
            ;
        env:
          ECR_REPOSITORY_BASE_URL: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY_NAME: ${{ needs.names.outputs.deployment-name }}-app-submit-diyaccounting-co-uk-ecr

      - name: Check if image already exists in ECR
        id: image-exists
        shell: bash
        run: |
          REPO_URI="${ECR_REPOSITORY_BASE_URL?}/${ECR_REPOSITORY_NAME?}"
          REPO_NAME="${REPO_URI##*/}"
          echo "Checking if image with tag ${{ github.sha }} exists in $REPO_NAME"
          if aws ecr describe-images --repository-name "$REPO_NAME" --image-ids imageTag="${{ github.sha }}" >/dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi
        env:
          ECR_REPOSITORY_BASE_URL: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY_NAME: ${{ needs.names.outputs.deployment-name }}-app-submit-diyaccounting-co-uk-ecr

      - name: Checkout
        if: ${{ steps.image-exists.outputs.exists != 'true' }}
        uses: actions/checkout@v5

      - name: Setup Node
        if: ${{ steps.image-exists.outputs.exists != 'true' }}
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        if: ${{ steps.image-exists.outputs.exists != 'true' }}
        run: npm ci

      - name: Download image artifact
        if: ${{ steps.image-exists.outputs.exists != 'true' }}
        uses: actions/download-artifact@v6
        with:
          name: docker-image
          path: docker-image/

      - name: Load Docker image
        if: ${{ steps.image-exists.outputs.exists != 'true' }}
        run: docker load -i docker-image/image.tar

      - name: Tag and push Docker image to ECR
        if: ${{ steps.image-exists.outputs.exists != 'true' }}
        shell: bash
        run: |
          docker tag "${{ env.BASE_IMAGE_TAG_PREFIX }}:${{ github.sha }}" "${ECR_REPOSITORY_BASE_URL?}/${ECR_REPOSITORY_NAME?}:${{ github.sha }}"
          docker tag "${{ env.BASE_IMAGE_TAG_PREFIX }}:${{ github.sha }}" "${ECR_REPOSITORY_BASE_URL?}/${ECR_REPOSITORY_NAME?}:latest"
          docker push "${ECR_REPOSITORY_BASE_URL?}/${ECR_REPOSITORY_NAME?}:${{ github.sha }}"
          docker push "${ECR_REPOSITORY_BASE_URL?}/${ECR_REPOSITORY_NAME?}:latest"
        env:
          ECR_REPOSITORY_BASE_URL: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY_NAME: ${{ needs.names.outputs.deployment-name }}-app-submit-diyaccounting-co-uk-ecr
    outputs:
      base-image-tag: ${{ github.sha }}

  deploy-auth:
    name: 'deploy auth'
    needs:
      - names
      - skip-deploy-check
      - deploy-dev
      - push-images
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Deploy Auth stack (CDK)
        run: |
          ./mvnw --errors clean verify -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-application \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                ${{ needs.names.outputs.deployment-name }}-app-AuthStack \
                --exclusively \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-application.out/cdk-outputs-auth.json \
            && cd .. \
            ;
        env:
          ENVIRONMENT_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          BASE_IMAGE_TAG: ${{ needs.push-images.outputs.base-image-tag }}
          # Set by deploy-environment.yml after the environment's AuthStack is deployed
          COGNITO_USER_POOL_ARN: ${{ vars.COGNITO_USER_POOL_ARN }}
          COGNITO_CLIENT_ID: ${{ vars.COGNITO_CLIENT_ID }}

      - run: cat cdk-submit-application.out/cdk-outputs-auth.json | jq '.'

  deploy-hmrc:
    name: 'deploy hmrc'
    needs:
      - names
      - skip-deploy-check
      - deploy-dev
      - docker-build
      - push-images
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Deploy HMRC stack (CDK)
        run: |
          ./mvnw --errors clean verify -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-application \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                ${{ needs.names.outputs.deployment-name }}-app-HmrcStack \
                --exclusively \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-application.out/cdk-outputs-hmrc.json \
            && cd .. \
            ;
        env:
          ENVIRONMENT_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          BASE_IMAGE_TAG: ${{ needs.push-images.outputs.base-image-tag }}
          # Set by deploy-environment.yml after the environment's AuthStack is deployed
          COGNITO_USER_POOL_ARN: ${{ vars.COGNITO_USER_POOL_ARN }}
          COGNITO_CLIENT_ID: ${{ vars.COGNITO_CLIENT_ID }}

      - run: cat cdk-submit-application.out/cdk-outputs-hmrc.json | jq '.'

  deploy-account:
    name: 'deploy account'
    needs:
      - names
      - skip-deploy-check
      - deploy-dev
      - docker-build
      - push-images
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Deploy Account stack (CDK)
        run: |
          ./mvnw --errors clean verify -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-application \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                ${{ needs.names.outputs.deployment-name }}-app-AccountStack \
                --exclusively \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-application.out/cdk-outputs-account.json \
            && cd .. \
            ;
        env:
          ENVIRONMENT_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          HMRC_CLIENT_SECRET_ARN: "arn:aws:secretsmanager:eu-west-2:887764105431:secret:${{ needs.names.outputs.environment-name }}/submit/hmrc/client_secret"
          BASE_IMAGE_TAG: ${{ needs.push-images.outputs.base-image-tag }}
          # Set by deploy-environment.yml after the environment's AuthStack is deployed
          COGNITO_USER_POOL_ARN: ${{ vars.COGNITO_USER_POOL_ARN }}
          COGNITO_CLIENT_ID: ${{ vars.COGNITO_CLIENT_ID }}

      - run: cat cdk-submit-application.out/cdk-outputs-account.json | jq '.'

  deploy-api:
    name: 'deploy api'
    needs:
      - names
      - skip-deploy-check
      - deploy-auth
      - deploy-hmrc
      - deploy-account
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Deploy API stack (CDK)
        run: |
          ./mvnw --errors clean verify -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-application \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                ${{ needs.names.outputs.deployment-name }}-app-ApiStack \
                --exclusively \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-application.out/cdk-outputs-api.json \
            && cd .. \
            ;
        env:
          ENVIRONMENT_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          BASE_IMAGE_TAG: ${{ needs.push-images.outputs.base-image-tag }}
          # Set by deploy-environment.yml after the environment's AuthStack is deployed
          COGNITO_USER_POOL_ARN: ${{ vars.COGNITO_USER_POOL_ARN }}
          COGNITO_CLIENT_ID: ${{ vars.COGNITO_CLIENT_ID }}

      - run: cat cdk-submit-application.out/cdk-outputs-api.json | jq '.'

      - name: Resolve stack outputs
        id: api-outputs
        run: |
          HTTP_API_URL=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-app-ApiStack"].HttpApiUrl' cdk-submit-application.out/cdk-outputs-api.json)
          echo "HTTP_API_URL=$HTTP_API_URL"
          echo "HTTP_API_URL=$HTTP_API_URL" >> $GITHUB_OUTPUT
        shell: bash
    outputs:
      httpApiUrl: ${{ steps.api-outputs.outputs.HTTP_API_URL }}

  deploy-delivery-self-destruct:
    name: 'deploy delivery self-destruct'
    if: ${{ inputs.skipDeploy != 'true' && github.ref != 'refs/heads/main' && needs.names.outputs.environment-name != 'prod' }}
    needs:
      - names
      - skip-deploy-check
      - mvn-package
      - deploy-auth
      - deploy-hmrc
      - deploy-account
      - deploy-api
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Deploy SelfDestruct Stack (CDK)
        run: |
          ./mvnw --errors clean verify -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-delivery \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                ${{ needs.names.outputs.deployment-name }}-del-SelfDestructStack \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-application.out/cdk-outputs-self-destruct.json \
          && cd .. \
          ;
        env:
          ENVIRONMENT_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          SELF_DESTRUCT_START_DATETIME: ${{ needs.mvn-package.outputs.self-destruct-start-datetime }}
          WEBSITE_HASH: "placeholder"
          HTTP_API_URL: ${{ needs.deploy-api.outputs.httpApiUrl }}
          DIY_SUBMIT_APEX_URL: ${{ needs.names.outputs.apex-url }}

  deploy-edge:
    name: 'deploy edge'
    needs:
      - names
      - skip-deploy-check
      - deploy-auth
      - deploy-hmrc
      - deploy-account
      - deploy-api
    runs-on: ubuntu-24.04
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
      url: ${{ steps.edge-outputs.outputs.DIY_SUBMIT_BASE_URL }}
    steps:

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Check if EdgeStack exists
        id: static-skip
        shell: bash
        run: |
          STACK_NAME="${{ needs.names.outputs.deployment-name }}-del-EdgeStack"
          echo "Checking for existing COMPLETE stack: $STACK_NAME"
          COUNT=$(aws cloudformation list-stacks \
            --region "us-east-1" \
            --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE \
            --query "length(StackSummaries[?StackName=='${STACK_NAME}'])" \
            --output text)
          if [ "$COUNT" -ge 1 ]; then
            echo "skipStaticStackDeployment=true" >> "$GITHUB_OUTPUT"
          else
            echo "skipStaticStackDeployment=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        uses: actions/checkout@v5

      - name: Setup Node
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        run: npm ci

      - uses: actions/setup-java@v5
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Build CDK and synthesize and deploy the EdgeStack in the Delivery Application
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        run: |
          ./mvnw --errors clean verify -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-delivery \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                ${{ needs.names.outputs.deployment-name }}-del-EdgeStack \
                --exclusively \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-delivery.out/cdk-outputs-edge.json \
              && cd .. \
            ;
        env:
          ENVIRONMENT_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          WEBSITE_HASH: "placeholder"
          HTTP_API_URL: ${{ needs.deploy-api.outputs.httpApiUrl }}
          DIY_SUBMIT_APEX_URL: ${{ needs.names.outputs.apex-url }}

      - run: cat cdk-submit-delivery.out/cdk-outputs-edge.json | jq '.'
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}

      - name: Resolve stack outputs
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        id: edge-outputs
        run: |
          ORIGIN_BUCKET_NAME=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-del-EdgeStack"].OriginBucketName' cdk-submit-delivery.out/cdk-outputs-edge.json)
          echo "ORIGIN_BUCKET_NAME=$ORIGIN_BUCKET_NAME"
          echo "ORIGIN_BUCKET_NAME=$ORIGIN_BUCKET_NAME" >> $GITHUB_OUTPUT
        shell: bash
    outputs:
      originBucketName: ${{ steps.edge-outputs.outputs.ORIGIN_BUCKET_NAME }}

  deploy-publish:
    name: 'deploy publish'
    needs:
      - names
      - skip-deploy-check
      - deploy-edge
      - deploy-api
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Configure AWS role via GitHub OIDC (for RUM outputs)
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role (for RUM outputs)
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Resolve RUM config from ObservabilityStack
        id: rum-config
        shell: bash
        run: |
          set -euo pipefail
          STACK_NAME="env-${{ needs.names.outputs.environment-name }}-ObservabilityStack"
          echo "Resolving RUM outputs from $STACK_NAME in region ${{ env.AWS_REGION }}"
          JSON=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region "${{ env.AWS_REGION }}")
          RUM_APP_MONITOR_ID=$(echo "$JSON" | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="RumAppMonitorId") | .OutputValue')
          RUM_IDENTITY_POOL_ID=$(echo "$JSON" | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="RumIdentityPoolId") | .OutputValue')
          RUM_GUEST_ROLE_ARN=$(echo "$JSON" | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="RumGuestRoleArn") | .OutputValue')
          RUM_REGION=$(echo "$JSON" | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="RumRegion") | .OutputValue' 2>/dev/null || echo "${{ env.AWS_REGION }}")
          echo "RUM_APP_MONITOR_ID=$RUM_APP_MONITOR_ID"
          echo "RUM_IDENTITY_POOL_ID=$RUM_IDENTITY_POOL_ID"
          echo "RUM_GUEST_ROLE_ARN=$RUM_GUEST_ROLE_ARN"
          echo "RUM_REGION=$RUM_REGION"
          echo "RUM_APP_MONITOR_ID=$RUM_APP_MONITOR_ID" >> $GITHUB_OUTPUT
          echo "RUM_IDENTITY_POOL_ID=$RUM_IDENTITY_POOL_ID" >> $GITHUB_OUTPUT
          echo "RUM_GUEST_ROLE_ARN=$RUM_GUEST_ROLE_ARN" >> $GITHUB_OUTPUT
          echo "RUM_REGION=$RUM_REGION" >> $GITHUB_OUTPUT

      - name: Inject RUM placeholders into HTML files
        shell: bash
        env:
          RUM_APP_MONITOR_ID: ${{ steps.rum-config.outputs.RUM_APP_MONITOR_ID }}
          RUM_IDENTITY_POOL_ID: ${{ steps.rum-config.outputs.RUM_IDENTITY_POOL_ID }}
          RUM_GUEST_ROLE_ARN: ${{ steps.rum-config.outputs.RUM_GUEST_ROLE_ARN }}
          AWS_REGION: ${{ steps.rum-config.outputs.RUM_REGION || env.AWS_REGION }}
        run: |
          set -euo pipefail
          echo "Injecting RUM config into HTML files under web/public"
          find web/public -type f -name "*.html" -print0 | xargs -0 -I{} bash -lc '
            perl -0777 -pe "s/\\$\\{RUM_APP_MONITOR_ID\\}/$ENV{RUM_APP_MONITOR_ID}/g; s/\\$\\{AWS_REGION\\}/$ENV{AWS_REGION}/g; s/\\$\\{RUM_IDENTITY_POOL_ID\\}/$ENV{RUM_IDENTITY_POOL_ID}/g; s/\\$\\{RUM_GUEST_ROLE_ARN\\}/$ENV{RUM_GUEST_ROLE_ARN}/g" -i "{}"'

      - name: Compute hash of static website content
        id: publish-hash
        shell: bash
        run: |
          WEBSITE_HASH=$(find 'web/public' -type f -exec sha256sum {} + | sort -k 2 | sha256sum | awk '{print $1}')
          echo "WEBSITE_HASH=$WEBSITE_HASH"
          echo "WEBSITE_HASH=$WEBSITE_HASH" >> $GITHUB_OUTPUT

      - name: Compare current submit.hash with computed hash
        id: publish-compare
        shell: bash
        run: |
          EDGE_HASH_URL="${{ needs.names.outputs.base-url }}/submit.hash"
          echo "Fetching existing hash from $EDGE_HASH_URL"
          EXISTING_HASH=$(curl --fail --silent --show-error --location "$EDGE_HASH_URL" || echo "")
          echo "EXISTING_HASH=$EXISTING_HASH"
          echo "EXISTING_HASH=$EXISTING_HASH" >> $GITHUB_OUTPUT
          if [ "$EXISTING_HASH" == "${{ steps.publish-hash.outputs.WEBSITE_HASH }}" ]; then
            echo "skipPublishStackDeployment=true" >> "$GITHUB_OUTPUT"
          else
            echo "skipPublishStackDeployment=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Node
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.publish-compare.outputs.skipPublishStackDeployment != 'true' }}
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.publish-compare.outputs.skipPublishStackDeployment != 'true' }}
        run: npm ci

      - uses: actions/setup-java@v5
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.publish-compare.outputs.skipPublishStackDeployment != 'true' }}
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Configure AWS role via GitHub OIDC
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.publish-compare.outputs.skipPublishStackDeployment != 'true' }}
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.publish-compare.outputs.skipPublishStackDeployment != 'true' }}
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Build CDK and synthesize and deploy the PublishStack in the Delivery Application
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.publish-compare.outputs.skipPublishStackDeployment != 'true' }}
        run: |
          ./mvnw --errors clean verify -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-delivery \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                ${{ needs.names.outputs.deployment-name }}-del-PublishStack \
                --exclusively \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-application.out/cdk-outputs-publish.json \
              && cd .. \
            ;
        env:
          ENVIRONMENT_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          WEBSITE_HASH: ${{ steps.publish-hash.outputs.WEBSITE_HASH }}
          HTTP_API_URL: ${{ needs.deploy-api.outputs.httpApiUrl }}
          DIY_SUBMIT_APEX_URL: ${{ needs.names.outputs.apex-url }}

#      - name: Upsert Cognito callback/logout URLs
#        if: ${{ contains(needs.names.outputs.base-url, 'submit') }}
#        uses: actions/github-script@v8
#        env:
#          USER_POOL_ID: ${{ vars.COGNITO_USER_POOL_ID }}
#          CLIENT_ID: ${{ vars.COGNITO_CLIENT_ID }}
#          REGION: ${{ env.AWS_REGION }}
#          BASE_URL: ${{ needs.names.outputs.base-url }}
#        with:
#          script: |
#            const {execSync} = require('child_process')
#            const jp = JSON.parse
#            const sh = (cmd)=>execSync(cmd,{encoding:'utf8'}).trim()
#
#            const d = jp(sh(`aws cognito-idp describe-user-pool-client --user-pool-id ${process.env.USER_POOL_ID} --client-id ${process.env.CLIENT_ID} --region ${process.env.REGION}`)).UserPoolClient
#            const have = new Set([...(d.CallbackURLs||[]), ...(d.LogoutURLs||[])])
#
#            const add = (arr)=>Array.from(new Set(arr))
#            const cbWanted = add([...(d.CallbackURLs||[]), `${process.env.BASE_URL}auth/loginWithCognitoCallback.html`])
#            const loWanted = add([...(d.LogoutURLs||[]), `${process.env.BASE_URL}`])
#
#            const changed = JSON.stringify(cbWanted) !== JSON.stringify(d.CallbackURLs||[]) ||
#                            JSON.stringify(loWanted) !== JSON.stringify(d.LogoutURLs||[])
#
#            core.notice(`Will update: ${changed}`)
#            if (!changed) return
#
#            const payload = {
#              UserPoolId: process.env.USER_POOL_ID,
#              ClientId: process.env.CLIENT_ID,
#              CallbackURLs: cbWanted,
#              LogoutURLs: loWanted
#            }
#            const tmp = 'payload.json'
#            require('fs').writeFileSync(tmp, JSON.stringify(payload))
#            sh(`aws cognito-idp update-user-pool-client --cli-input-json file://${tmp} --region ${process.env.REGION}`)

  deploy-ops:
    name: 'deploy ops with dashboard'
    needs:
      - names
      - skip-deploy-check
      - deploy-api
      - deploy-edge
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Check if OpsStack exists
        id: static-skip
        shell: bash
        run: |
          STACK_NAME="${{ needs.names.outputs.deployment-name }}-app-OpsStack"
          echo "Checking existence of $STACK_NAME"
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" >/dev/null 2>&1; then
            echo "skipStaticStackDeployment=true" >> "$GITHUB_OUTPUT"
          else
            echo "skipStaticStackDeployment=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.publish-compare.outputs.skipPublishStackDeployment != 'true' }}
        uses: actions/checkout@v5

      - name: Setup Node
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.publish-compare.outputs.skipPublishStackDeployment != 'true' }}
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.publish-compare.outputs.skipPublishStackDeployment != 'true' }}
        run: npm ci

      - uses: actions/setup-java@v5
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.publish-compare.outputs.skipPublishStackDeployment != 'true' }}
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Deploy Ops Stack (CDK)
        if: ${{ needs.names.outputs.environment-name == 'prod' || env.FORCE_ALL_STACK_DEPLOYMENT == 'true' || steps.publish-compare.outputs.skipPublishStackDeployment != 'true' }}
        run: |
          ./mvnw --errors clean verify -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-application \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                ${{ needs.names.outputs.deployment-name }}-app-OpsStack \
                --exclusively \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-application.out/cdk-outputs-publish.json \
              && cd .. \
            ;
        env:
          ENVIRONMENT_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          BASE_IMAGE_TAG: ${{ needs.push-images.outputs.base-image-tag }}
          # Set by deploy-environment.yml after the environment's AuthStack is deployed
          COGNITO_USER_POOL_ARN: ${{ vars.COGNITO_USER_POOL_ARN }}
          COGNITO_CLIENT_ID: ${{ vars.COGNITO_CLIENT_ID }}

#  origin-test:
#    if: ${{ !cancelled() }}
#    name: 'origin test'
#    needs:
#      - names
#      - skip-deploy-check
#      - deploy-auth
#      - deploy-hmrc
#      - deploy-account
#      - deploy-edge
#      - deploy-publish
#    runs-on: ubuntu-24.04
#    container: mcr.microsoft.com/playwright:v1.55.1-jammy
#    # Match version number with @playwright/test in package.json with: https://mcr.microsoft.com/en-us/artifact/mar/playwright/tags
#    # and extension with ubuntu distribution e.g. https://releases.ubuntu.com/jammy/
#    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v5
#
#      - name: Setup Node
#        uses: actions/setup-node@v6
#        with:
#          node-version: ${{ env.NODE_VERSION }}
#          cache: 'npm'
#
#      - name: Install dependencies
#        run: |
#          npm ci --ignore-scripts
#        env:
#          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
#
#      #cp '.env.${{ needs.names.outputs.environment-name }}' '.env.test' ; npx dotenv -e '.env.${{ needs.names.outputs.environment-name }}' -- npm run test:behaviour
#      #
#      - run: cp '.env.${{ needs.names.outputs.environment-name }}' '.env.test' ; npx dotenv -e '.env.${{ needs.names.outputs.environment-name }}' -- npm run test:originBehaviour
#        env:
#          DIY_SUBMIT_BASE_URL: ${{ needs.names.outputs.base-url }}
#          TEST_HMRC_USERNAME: ${{ vars.TEST_HMRC_USERNAME }}
#          TEST_HMRC_PASSWORD: ${{ secrets.TEST_HMRC_PASSWORD }}
#          TEST_HMRC_VAT_NUMBER: ${{ vars.TEST_HMRC_VAT_NUMBER }}
#
#      - name: Upload artifacts (results)
#        if: ${{ !cancelled() }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: origin-test-artifacts
#          retention-days: 30
#          path: |
#            target/behaviour-test-results/
#
#      - name: Upload artifacts (reports)
#        if: ${{ !cancelled() }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: origin-test-reports
#          retention-days: 30
#          path: |
#            target/test-reports/

  # Invoke .github/workflows/set-origins.yml to set this domain as the apex origin
  #  workflow_call:
  #    inputs:
  #      environment:
  #        description: 'Target environment (binds to GitHub Environment)'
  #        required: true
  #        type: string
  #      originsCsv:
  #        description: 'Comma-separated list of app origins to serve from apex (e.g. ci-123.example.com,ci-124.example.com). Leave blank to display maintenance page.'
  #        required: false
  #        type: string
  #        default: ''
  set-origins:
    name: 'set origins'
    #if: ${{ needs.names.outputs.environment-name != 'prod' || needs.origin-test.outputs.result == 'success' }}
    needs:
      - names
      - skip-deploy-check
      - deploy-auth
      - deploy-hmrc
      - deploy-account
      - deploy-edge
      #- deploy-publish
    runs-on: ubuntu-24.04
    environment: ${{ needs.names.outputs.environment-name }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Get CloudFront distribution ID
        id: get-distribution-id
        run: |
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
            --stack-name "${{ needs.names.outputs.deployment-name }}-del-EdgeStack" \
            --region "us-east-1" \
            --query "Stacks[0].Outputs[?OutputKey=='DistributionId'].OutputValue" \
            --output text)
          echo "DISTRIBUTION_ID=$DISTRIBUTION_ID"
          echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT
        shell: bash

      - name: Alias apex domain to base domain
        id: set-origins
        uses: ./.github/actions/set-origins
        with:
          origin-domain: ${{ needs.names.outputs.base-domain }}
          apex-domain: ${{ needs.names.outputs.apex-domain }}
          aws-account-id: ${{ env.AWS_ACCOUNT_ID }}
          hosted-zone-id: ${{ env.AWS_HOSTED_ZONE_ID }}
          cloudfront-distribution-id: ${{ steps.get-distribution-id.outputs.DISTRIBUTION_ID }}
    outputs:
      existing-deployment-name: ${{ steps.set-origins.outputs.existing-deployment-name }}

#        run: |
#          set -euo pipefail
#
#          if [ -z "${DIY_SUBMIT_APEX_DOMAIN:-}" ] || [ -z "${DIY_SUBMIT_BASE_DOMAIN:-}" ] || [ -z "${AWS_HOSTED_ZONE_ID:-}" ]; then
#            echo "Required env vars DIY_SUBMIT_APEX_DOMAIN, DIY_SUBMIT_BASE_DOMAIN, and AWS_HOSTED_ZONE_ID must be set."
#            exit 1
#          fi
#
#          cat > /tmp/alias.json <<JSON
#          {
#            "Comment": "Alias apex domain to base domain",
#            "Changes": [
#              {
#                "Action": "UPSERT",
#                "ResourceRecordSet": {
#                  "Name": "${DIY_SUBMIT_APEX_DOMAIN}.",
#                  "Type": "A",
#                  "AliasTarget": {
#                    "HostedZoneId": "${AWS_HOSTED_ZONE_ID}",
#                    "DNSName": "${DIY_SUBMIT_BASE_DOMAIN}.",
#                    "EvaluateTargetHealth": false
#                  }
#                }
#              },
#              {
#                "Action": "UPSERT",
#                "ResourceRecordSet": {
#                  "Name": "${DIY_SUBMIT_APEX_DOMAIN}.",
#                  "Type": "AAAA",
#                  "AliasTarget": {
#                    "HostedZoneId": "${AWS_HOSTED_ZONE_ID}",
#                    "DNSName": "${DIY_SUBMIT_BASE_DOMAIN}.",
#                    "EvaluateTargetHealth": false
#                  }
#                }
#              }
#            ]
#          }
#          JSON
#
#          echo "Upserting alias records: ${DIY_SUBMIT_APEX_DOMAIN} -> ${DIY_SUBMIT_BASE_DOMAIN} in hosted zone ${AWS_HOSTED_ZONE_ID}"
#          aws route53 change-resource-record-sets --hosted-zone-id "$AWS_HOSTED_ZONE_ID" --change-batch file:///tmp/alias.json

  # TODO: Configure or copy and convert the system test API test to test against deployed environment
#  api-test:
#    if: ${{ !cancelled() && inputs.skipDeploy == 'true' || needs.deploy-publish.result == 'success' }}
#    name: 'api test'
#    needs:
#      - names
#      - build-cdk
#      - deploy-application
#      - deploy-edge
#      - deploy-publish
#      - set-origins
  #    - origin-test
#    runs-on: ubuntu-24.04
#    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v5
#
#      - name: Setup Node
#        uses: actions/setup-node@v6
#        with:
#          node-version: ${{ env.NODE_VERSION }}
#          cache: 'npm'
#
#      - name: Node dependencies
#        run: npm ci
#
#      - name: Install dependencies and Playwright browsers
#        run: |
#          npm -v
#          npm ci --ignore-scripts
#          npx playwright install chromium --with-deps
#
#      - name: Run Playwright API test
#        run: |
#          echo "DIY_SUBMIT_BASE_URL=${DIY_SUBMIT_BASE_URL}"
#          npm run test:api
#        env:
#          DIY_SUBMIT_BASE_URL: ${{ needs.names.outputs.base-url }}
#
#      - name: Upload artifacts
#        if: ${{ !cancelled() }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: api-test-artifacts
#          path: |
#            playwright-report
#            test-results

  web-test:
    if: ${{ !cancelled() }}
    name: 'web test'
    needs:
      - names
      - skip-deploy-check
      - deploy-auth
      - deploy-hmrc
      - deploy-account
      - deploy-edge
      - deploy-publish
      - set-origins
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install
          npx playwright install chromium --with-deps

      - name: Run behaviour tests
        run: |
          cp '.env.${{ needs.names.outputs.environment-name }}' '.env.test' \
          ; npx dotenv -e '.env.${{ needs.names.outputs.environment-name }}' -- \
            npm run test:webBehaviour || exit_code=$? \
          ; cp ./target/submit*.log ./target/behaviour-test-results/ || true \
          ; exit ${exit_code:-0} \
          ;
        env:
          DIY_SUBMIT_BASE_URL: ${{ needs.names.outputs.apex-url }}
          TEST_HMRC_USERNAME: ${{ vars.TEST_HMRC_USERNAME }}
          TEST_HMRC_PASSWORD: ${{ secrets.TEST_HMRC_PASSWORD }}
          TEST_HMRC_VAT_NUMBER: ${{ vars.TEST_HMRC_VAT_NUMBER }}

      - name: Upload artifacts (results)
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: web-test-artifacts
          retention-days: 30
          path: |
            target/behaviour-test-results/

      - name: Upload artifacts (reports)
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: web-test-reports
          retention-days: 30
          path: |
            target/test-reports/

      - name: Configure AWS role via GitHub OIDC
        if: ${{ !cancelled() }}
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        if: ${{ !cancelled() }}
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Copy test reports to S3 origin bucket
        if: ${{ !cancelled() }}
        env:
          BUCKET_NAME: origin-${{ needs.names.outputs.deployment-name }}-del-submit-diyaccounting-co-uk
        run: |
          echo "Uploading test reports to S3 bucket: ${BUCKET_NAME?}"
          aws s3 cp target/test-reports/ s3://${BUCKET_NAME?}/tests/ --recursive
        shell: bash

# TODO: Reinstate load test
#  load-test:
#    if: ${{ !cancelled() && inputs.skipDeploy == 'true' || needs.deploy-publish.result == 'success' }}
#    name: 'load test'
#    needs:
#      - names
#      - build-cdk
#      - deploy-edge
#      - deploy-edge
#      - deploy-publish
#      - set-origins
#    runs-on: ubuntu-24.04
#    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v5
#
#      - name: Setup Node
#        uses: actions/setup-node@v6
#        with:
#          node-version: ${{ env.NODE_VERSION }}
#          cache: 'npm'
#
#      - name: Node dependencies
#        run: npm ci
#
#      - name: Setup k6
#        uses: grafana/setup-k6-action@v1
#
#      - name: Setup k6 with dashboard extension
#        run: |
#          # Download pre-built k6 binary with xk6-dashboard extension
#          curl -L https://github.com/grafana/xk6-dashboard/releases/download/v0.7.12/xk6-dashboard_v0.7.12_linux_amd64.tar.gz -o xk6-dashboard.tar.gz
#          tar -xzf xk6-dashboard.tar.gz
#          chmod +x xk6-dashboard_v0.7.12_linux_amd64/k6
#          # Create a symlink for easy access
#          ln -s xk6-dashboard_v0.7.12_linux_amd64/k6 k6
#          ./k6 version
#
#      - name: Run k6 load test with dashboard
#        run: |
#          # k6 run tests/load.live.test.js --summary-export=load-test-summary.json
#          # Run k6 with dashboard export, events recording, and summary export for maximum information
#          ./k6 run tests/load.live.test.js \
#            --out 'dashboard=export=load-test-report.html&port=-1&record=load-test-events.json&period=1s' \
#            --summary-export=load-test-summary.json
#        env:
#          DIY_SUBMIT_BASE_URL: ${{ needs.names.outputs.base-url }}
#          TEST_USERNAME: ${{ needs.test-parameters.outputs.test-username }}
#          TEST_PASSWORD: ${{ needs.test-parameters.outputs.test-password }}
#          DURATION: ${{ inputs.loadTestDuration }}
#
#      - name: Upload artifacts
#        if: ${{ !cancelled() }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: load-test-artifacts
#          path: |
#            load-test-summary.json
#            load-test-report.html
#            load-test-events.json

  convert-video:
    name: 'convert web test video to mp4'
    needs:
      - names
      - web-test
    runs-on: ubuntu-24.04
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - name: Install ffmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Download all test artifacts
        uses: actions/download-artifact@v6
        with:
          path: artifacts/
        continue-on-error: true

      - name: Convert Playwright video to MP4
        if: ${{ !cancelled() }}
        run: |
          set -euo pipefail
          root="artifacts/web-test-artifacts"

          # Recursively transcode all .webm files, placing output next to source with 'converted' prefix
          pids=()
          while IFS= read -r -d '' f; do
            dir=$(dirname "$f")
            base="${f##*/}"
            name="${base%.webm}"
            out="${dir}/converted${name}.mp4"
            echo "Transcoding $f -> $out"
            npm run convert:video -- --in "$f" --out "$out" &
            pids+=($!)
          done < <(find "$root" -type f -name '*.webm' -print0)

          # Wait for all transcodes to complete
          fail=0
          for pid in "${pids[@]:-}"; do
            if ! wait "$pid"; then
              fail=1
            fi
          done

          exit $fail

      - name: Upload artifacts (converted videos)
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: web-test-artifacts-converted
          retention-days: 30
          path: |
            artifacts/web-test-artifacts

  # Set the deployment name as the last known good deployment for this environment in a parameter store parameter
  set-last-known-good-deployment:
    name: 'set last known good deployment'
    needs:
      - names
      - web-test
    runs-on: ubuntu-24.04
    environment: ${{ needs.names.outputs.environment-name }}
    steps:
      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Set last known good deployment in SSM Parameter Store
        run: |
          PARAMETER_NAME="/submit/${{ needs.names.outputs.environment-name }}/last-known-good-deployment"
          echo "Setting SSM Parameter Store parameter $PARAMETER_NAME to value '${{ needs.names.outputs.deployment-name }}'"
          aws ssm put-parameter \
            --name "$PARAMETER_NAME" \
            --type String \
            --value "${{ needs.names.outputs.deployment-name }}" \
            --overwrite

      - name: CDK stacks in eu-west-2 and us-east-1
        run: |
          aws cloudformation describe-stacks --region eu-west-2 --query "Stacks[].StackName" --output text | tr '\t' '\n' | sort
          aws cloudformation describe-stacks --region us-east-1 --query "Stacks[].StackName" --output text | tr '\t' '\n' | sort

  # Run workflow: .github/workflows/destroy.yml to destroy previous prod deployments but not the holding page (`-holding`)
  destroy-previous:
    if: ${{ needs.names.outputs.environment-name == 'prod' && needs.set-origins.outputs.existing-deployment-name != '' && !contains(needs.set-origins.outputs.existing-deployment-name, '-holding') }}
    name: 'destroy previous'
    needs:
      - names
      - skip-deploy-check
      - set-origins
      - web-test
    uses: ./.github/workflows/destroy.yml
    with:
      environment-name: ${{ needs.names.outputs.environment-name }}
      deployment-name: ${{ needs.set-origins.outputs.existing-deployment-name }}

 # TODO: If set-origins passed but web-test failed, look up the last deployment from a parameter store and set-origin back to that deployment
