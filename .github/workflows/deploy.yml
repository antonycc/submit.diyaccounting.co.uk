name: deploy
run-name: "deploy from ${{ github.ref_name }}"
concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: false

on:
  workflow_dispatch:
    inputs:
      skipDeploy:
        description: 'Run tests only (no deploy)'
        type: choice
        options:
            - 'true'
            - 'false'
        required: false
        default: 'false'
      loadTestDuration:
        description: 'Duration for load test (e.g. 30s, 10m, 1h)'
        required: false
        default: '30s'
      deploymentName:
        description: 'Deployment name (ci for shared CI, or custom name)'
        required: false
        default: ''
      selfDestructDelayHours:
        description: 'Hours before self-destruct triggers for non-prod environments'
        required: false
        default: '1'
      forceStaticStackDeployment:
        description: 'Force re-deploy of static stacks (dev/observability/identity) even if they already exist'
        type: choice
        options:
            - 'true'
            - 'false'
        required: false
        default: 'false'
  push:
    branches:
      - '**'
      - '!gh_pages'
    paths:
      - '.github/workflows/deploy.yml'
      - 'app/functions/**'
      - 'app/lib/**'
      - 'infra/main/**'
      - 'tests/**'
      - 'web/public/**'
      - '.env.ci'
      - '.env.prod'
      - '../../cdk.json'
      - 'Dockerfile'
      - 'LICENSE'
      - 'package.json'
      - 'package-lock.json'
      - 'pom.xml'
      - 'product-catalogue.toml'
      - '.github/workflows/deploy.yml'
  schedule:
    - cron: '23 4 * * *'

permissions:
  id-token: write
  contents: read
  pages: write

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '22'
  ACTIONS_ROLE_ARN: 'arn:aws:iam::887764105431:role/submit-github-actions-role'
  DEPLOY_ROLE_ARN:  'arn:aws:iam::887764105431:role/submit-deployment-role'
  AWS_REGION: 'eu-west-2'
  BASE_IMAGE_TAG_PREFIX: 'submit-base'
  skipDeploy: ${{ inputs.skipDeploy || 'false' }}
  deploymentName: ${{ inputs.deploymentName || '' }}
  loadTestDuration: ${{ inputs.loadTestDuration || '30s' }}
  selfDestructDelayHours: ${{ inputs.selfDestructDelayHours || '1' }}
  GITHUB_ACTOR: ${{ github.actor }}
  SELF_DESTRUCT_DELAY_HOURS: ${{ inputs.selfDestructDelayHours || '1' }}
  BASE_IMAGE_TAG: ${{ github.sha }}
  FORCE_STATIC_STACK_DEPLOYMENT: ${{ inputs.forceStaticStackDeployment || 'false' }}
  CERTIFICATE_ARN: ${{ vars.AWS_CERTIFICATE_ARN }}
  CLOUD_TRAIL_ENABLED: ${{ vars.AWS_CLOUD_TRAIL_ENABLED }}
  X_RAY_ENABLED: ${{ vars.AWS_X_RAY_ENABLED }}
  VERBOSE_LOGGING: ${{ vars.AWS_VERBOSE_LOGGING }}
  HOSTED_ZONE_ID: ${{ vars.AWS_HOSTED_ZONE_ID }}
  HOSTED_ZONE_NAME: ${{ vars.AWS_HOSTED_ZONE_NAME }}
  COMMIT_HASH: ${{ github.sha }}
  AUTH_CERTIFICATE_ARN: 'arn:aws:acm:us-east-1:887764105431:certificate/59a025f9-3620-43cd-9b2c-522f385ee223'

jobs:

  names:
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Compute deployment name and environment
        id: deployment-config
        run: |
          REF_NAME="${{ github.ref_name }}"
          INPUT_DEPLOYMENT_NAME="${{ github.event.inputs.deploymentName }}"

          # Clean branch name: lowercase, replace non-alphanumeric with hyphens, collapse consecutive hyphens
          CLEANED=$(echo "$REF_NAME" | tr '[:upper:]' '[:lower:]' | sed -e 's/[^a-z0-9]/-/g' -e 's/-\{2,\}/-/g' -e 's/^-//' -e 's/-$//')

          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
              ENV_NAME="prod"
              DEPLOYMENT_NAME="prod"
          elif [ "$INPUT_DEPLOYMENT_NAME" = "ci" ]; then
              ENV_NAME="ci"
              DEPLOYMENT_NAME="ci"
          elif [ -n "$INPUT_DEPLOYMENT_NAME" ]; then
              ENV_NAME="ci"
              DEPLOYMENT_NAME="$INPUT_DEPLOYMENT_NAME"
          else
              ENV_NAME="ci"
              # Truncate to 16 chars for branch-based deployments
              DEPLOYMENT_NAME="ci-${CLEANED:0:16}"
          fi

          echo "Computed ENV_NAME: $ENV_NAME"
          echo "Computed DEPLOYMENT_NAME: $DEPLOYMENT_NAME"
          DEPLOYMENT_NAME=$ENV_NAME

          echo "ENV_NAME=$ENV_NAME" >> "$GITHUB_OUTPUT"
          echo "DEPLOYMENT_NAME=$DEPLOYMENT_NAME" >> "$GITHUB_OUTPUT"

          echo "Actual ENV_NAME: $ENV_NAME"
          echo "Actual DEPLOYMENT_NAME: $DEPLOYMENT_NAME"

    outputs:
      environment-name: ${{ steps.deployment-config.outputs.ENV_NAME }}
      deployment-name: ${{ steps.deployment-config.outputs.DEPLOYMENT_NAME }}

  npm-test:
    name: 'npm test'
    runs-on: ubuntu-24.04
    needs:
      - names
    permissions:
      contents: read
      packages: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - run: npm ci || npm install

      - run: npm test

  npm-unit-test:
    name: 'npm unit test'
    runs-on: ubuntu-latest
    needs:
      - names
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - run: npm ci || npm install

      - run: npm run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 30

  npm-integration-test:
    name: 'npm integration test'
    runs-on: ubuntu-latest
    needs:
      - names
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - run: npm ci || npm install

      - run: npm run test:integration

  npm-system-test:
    name: 'npm system test'
    runs-on: ubuntu-latest
    needs:
      - names
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - run: npm ci || npm install

#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#        with:
#          driver-opts: |
#            image=moby/buildkit:latest

      - run: npm run test:system

  npm-test-web-unit:
    name: 'npm unit test with coverage'
    runs-on: ubuntu-latest
    needs:
      - names
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - run: npm ci || npm install

      - run: npm run test:web-unit

  npm-browser-test:
    name: 'npm browser test'
    runs-on: ubuntu-latest
    needs:
      - names
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - run: npm ci || npm install

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}

      - run: npx playwright install chromium --with-deps

      - run: npm run test:browser

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: test-results-browser
          path: target/browser-test-results/
          retention-days: 30

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: test-reports-browser
          path: target/test-reports/
          retention-days: 30

  mvn-test:
    name: 'maven test'
    runs-on: ubuntu-latest
    needs:
      - names
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: package
        id: package
        shell: bash
        run: |
          ./mvnw clean package

  mvn-package:
    name: 'maven package'
    runs-on: ubuntu-latest
    needs:
      - names
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#        with:
#          driver-opts: |
#            image=moby/buildkit:latest

      - name: package
        id: package
        shell: bash
        run: |
          ./mvnw clean package -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }}
          echo "SELF_DESTRUCT_HANDLER_SOURCE=target/self-destruct-lambda.jar" >> $GITHUB_OUTPUT

      - name: Upload self-destruct handler JAR
        uses: actions/upload-artifact@v4
        with:
          name: self-destruct-handler-${{ github.sha }}
          path: target/self-destruct-lambda.jar
          retention-days: 1
    outputs:
      self-destruct-handler-source: ${{ steps.package.outputs.SELF_DESTRUCT_HANDLER_SOURCE }}

  test-aws-credentials:
    name: 'test aws credentials'
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

  npm-test-cdk:
    name: 'npm test cdk'
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#        with:
#          driver-opts: |
#            image=moby/buildkit:latest

      - name: test cdk
        id: test-cdk
        shell: bash
        run: npm run cdk

  docker-build:
    name: 'docker build'
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#        with:
#          driver-opts: |
#            image=moby/buildkit:latest

      - name: Build base image
        run: |
          docker build \
            -t "${{ env.BASE_IMAGE_TAG_PREFIX }}:${{ github.sha }}" \
            -f Dockerfile .
      # docker buildx build \

      - name: Save image artifact
        run: |
          mkdir docker-image
          docker save -o docker-image/image.tar "${{ env.BASE_IMAGE_TAG_PREFIX }}:${{ github.sha }}"

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: docker-image/image.tar
          if-no-files-found: error

#  build-cdk:
#    name: 'build cdk'
#    if: ${{ !contains(github.event.inputs.skipDeploy, 'true') }}
#    needs:
#      - names
#      - mvn-package
#    runs-on: ubuntu-24.04
#    permissions:
#      contents: read
#      id-token: write
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v5
#
#      - name: Setup Node
#        uses: actions/setup-node@v5
#        with:
#          node-version: ${{ env.NODE_VERSION }}
#          cache: 'npm'
#
#      - name: Node dependencies
#        run: npm ci
#
#      - uses: actions/setup-java@v5
#        with:
#          distribution: 'temurin'
#          java-version: ${{ env.JAVA_VERSION }}
#          cache: 'maven'
#
#      - name: Download self-destruct handler JAR
#        uses: actions/download-artifact@v5
#        with:
#          name: self-destruct-handler-${{ github.sha }}
#          path: target/
#
#      - run: find . -type f -iname ".*" -ls
#
#      - run: find . -type f -ls
#
#      - run: find /home/runner/work/submit.diyaccounting.co.uk/submit.diyaccounting.co.uk/cdk-application -type f -iname ".*" -ls
#
#      - run: find /home/runner/work/submit.diyaccounting.co.uk/submit.diyaccounting.co.uk/cdk-application -type f -ls
#
#      - run: cat /home/runner/work/submit.diyaccounting.co.uk/submit.diyaccounting.co.uk/cdk-application/cdk.json
#
#      - name: Build CDK and synthesize all stacks in the Application Stack
#        run: |
#          ./mvnw --errors clean package -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
#            && cd cdk-application \
#            && cat ../.env.${{ needs.names.outputs.environment-name }} \
#            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
#              npx cdk synth \
#                --strict \
#                --validation \
#                --version-reporting=false \
#                --path-metadata=false \
#                --asset-metadata=false \
#                --exclusively \
#                  ${{ needs.names.outputs.deployment-name }}-ObservabilityStack \
#                  ${{ needs.names.outputs.deployment-name }}-DevStack \
#                  ${{ needs.names.outputs.deployment-name }}-IdentityStack \
#                  ${{ needs.names.outputs.deployment-name }}-AuthStack \
#                  ${{ needs.names.outputs.deployment-name }}-ApplicationStack \
#            ; cd .. \
#            ;
#        # ${{ needs.names.outputs.deployment-name }}-SelfDestructStack \
#        # ${{ needs.names.outputs.deployment-name }}-EdgeStack \
#        # ${{ needs.names.outputs.deployment-name }}-PublishStack \
#        # ${{ needs.names.outputs.deployment-name }}-OpsStack \
#        env:
#          ENV_NAME: ${{ needs.names.outputs.environment-name }}
#          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
#          SELF_DESTRUCT_DELAY_HOURS: ${{ inputs.selfDestructDelayHours || '1' }}
#          SELF_DESTRUCT_HANDLER_SOURCE: "../${{ needs.mvn-package.outputs.self-destruct-handler-source }}"
#          BASE_IMAGE_TAG: ${{ github.sha }}
#          #BASE_IMAGE_TAG: "${{ env.BASE_IMAGE_TAG_PREFIX }}:${{ github.sha }}"
#          GITHUB_ACTOR: ${{ github.actor }}
#          CERTIFICATE_ARN: ${{ vars.AWS_CERTIFICATE_ARN }}
#          CLOUD_TRAIL_ENABLED: ${{ vars.AWS_CLOUD_TRAIL_ENABLED }}
#          X_RAY_ENABLED: ${{ vars.AWS_X_RAY_ENABLED }}
#          VERBOSE_LOGGING: ${{ vars.AWS_VERBOSE_LOGGING }}
#          HOSTED_ZONE_ID: ${{ vars.AWS_HOSTED_ZONE_ID }}
#          HOSTED_ZONE_NAME: ${{ vars.AWS_HOSTED_ZONE_NAME }}
#          COMMIT_HASH: ${{ github.sha }}
#          DIY_SUBMIT_GOOGLE_CLIENT_SECRET_ARN: "arn:aws:secretsmanager:eu-west-2:887764105431:secret:diy/${{ needs.names.outputs.environment-name }}/submit/google/client_secret"
#          AUTH_CERTIFICATE_ARN: 'arn:aws:acm:us-east-1:887764105431:certificate/59a025f9-3620-43cd-9b2c-522f385ee223'
#
#      - name: Upload CDK synthesis artifacts
#        uses: actions/upload-artifact@v4
#        with:
#          name: cdk-synthesis
#          path: cdk-submit-application.out
#          retention-days: 1

  deploy-observability:
    name: 'deploy observability'
    if: ${{ !contains(github.event.inputs.skipDeploy, 'true') }}
    needs:
      - names
      - mvn-package
    #  - build-cdk
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
#      - name: Download CDK synthesis artifacts
#        uses: actions/download-artifact@v5
#        with:
#          name: cdk-synthesis
#          path: cdk-submit-application.out/

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      # Once only per account
      #- name: Bootstrap CDK
      #  run: npx cdk bootstrap
      #  env:
      #    CDK_NEW_BOOTSTRAP: '1'

      - name: Check if ObservabilityStack exists
        id: static-skip
        shell: bash
        run: |
          STACK_NAME="${{ needs.names.outputs.deployment-name }}-ObservabilityStack"
          echo "Checking existence of $STACK_NAME"
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" >/dev/null 2>&1; then
            echo "skipStaticStackDeployment=true"
            echo "skipStaticStackDeployment=true" >> "$GITHUB_OUTPUT"
          else
            echo "skipStaticStackDeployment=false"
            echo "skipStaticStackDeployment=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout
        if: ${{ env.FORCE_STATIC_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        uses: actions/checkout@v5

      - name: Setup Node
        if: ${{ env.FORCE_STATIC_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        if: ${{ env.FORCE_STATIC_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        run: npm ci

      - uses: actions/setup-java@v5
        if: ${{ env.FORCE_STATIC_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      # --app ../cdk-submit-application.out/ \
      - name: Deploy Observability Stack (CDK)
        if: ${{ env.FORCE_STATIC_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        run: |
          ./mvnw --errors clean package -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-application \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                ${{ needs.names.outputs.deployment-name }}-ObservabilityStack \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-application.out/cdk-outputs-observability.json \
          ; cd .. \
          ;
        env:
          ENV_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          SELF_DESTRUCT_HANDLER_SOURCE: "../${{ needs.mvn-package.outputs.self-destruct-handler-source }}"
          DIY_SUBMIT_GOOGLE_CLIENT_SECRET_ARN: "arn:aws:secretsmanager:eu-west-2:887764105431:secret:diy/${{ needs.names.outputs.environment-name }}/submit/google/client_secret"

#  deploy-self-destruct:
#    name: 'deploy self-destruct'
#    if: ${{ inputs.skipDeploy != 'true' && needs.names.outputs.environment-name != 'prod' }}
#    needs:
#      - names
#      - npm-test
#      - build-cdk
#      - mvn-package
#    runs-on: ubuntu-24.04
#    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v5
#
#      - name: Setup Node
#        uses: actions/setup-node@v5
#        with:
#          node-version: ${{ env.NODE_VERSION }}
#          cache: 'npm'
#
#      - name: Node dependencies
#        run: npm ci
#
#      - uses: actions/setup-java@v5
#        with:
#          distribution: 'temurin'
#          java-version: ${{ env.JAVA_VERSION }}
#          cache: 'maven'
#
#      - name: Download CDK synthesis artifacts
#        uses: actions/download-artifact@v5
#        with:
#          name: cdk-synthesis
#          path: cdk.out/
#
#      - name: Download self-destruct handler JAR
#        uses: actions/download-artifact@v5
#        with:
#          name: self-destruct-handler-${{ github.sha }}
#          path: cdk-submit-application.out/
#
#      - name: Configure AWS role via GitHub OIDC
#        uses: aws-actions/configure-aws-credentials@v5
#        with:
#          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
#          aws-region: ${{ env.AWS_REGION }}
#          role-chaining: false
#          audience: sts.amazonaws.com
#          role-skip-session-tagging: true
#          output-credentials: true
#          retry-max-attempts: 3
#
#      - name: Assume AWS deployment role
#        uses: aws-actions/configure-aws-credentials@v5
#        with:
#          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
#          aws-region: ${{ env.AWS_REGION }}
#          role-chaining: true
#          audience: sts.amazonaws.com
#          role-skip-session-tagging: true
#          output-credentials: true
#          retry-max-attempts: 3
#
#      - name: Deploy Self-Destruct Stack (CDK)
#        run: |
#          cd cdk-application \
#            && cat ../.env.${{ needs.names.outputs.environment-name }} \
#            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
#               npx cdk deploy \
  #                --app ../cdk-submit-application.out/ \
  #                ${{ needs.names.outputs.deployment-name }}-SelfDestructStack \
#                 --require-approval never \
#                 --ci true \
#                 --concurrency 4 \
#                 --asset-parallelism \
#                 --outputs-file ../cdk-submit-application.out/cdk-outputs-self-destructStack.json \
#          ;
#        env:
#          ENV_NAME: ${{ needs.names.outputs.environment-name }}
#          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
#          SELF_DESTRUCT_DELAY_HOURS: ${{ inputs.selfDestructDelayHours || '1' }}
#          SELF_DESTRUCT_HANDLER_SOURCE: "../${{ needs.mvn-package.outputs.self-destruct-handler-source }}"

  deploy-dev:
    name: 'deploy dev'
    if: ${{ !contains(github.event.inputs.skipDeploy, 'true') }}
    needs:
      - names
      - mvn-package
      #- build-cdk
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

#      - name: Download CDK synthesis artifacts
#        uses: actions/download-artifact@v5
#        with:
#          name: cdk-synthesis
#          path: cdk-submit-application.out/

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Check if DevStack exists
        id: static-skip
        shell: bash
        run: |
          STACK_NAME="${{ needs.names.outputs.deployment-name }}-DevStack"
          echo "Checking existence of $STACK_NAME"
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" >/dev/null 2>&1; then
            echo "skipStaticStackDeployment=true" >> "$GITHUB_OUTPUT"
          else
            echo "skipStaticStackDeployment=false" >> "$GITHUB_OUTPUT"
          fi

      #                 --app ../cdk-submit-application.out/ \
      - name: Deploy Dev Stack (CDK)
        if: ${{ env.FORCE_STATIC_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        run: |
          ./mvnw --errors clean package -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-application \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                ${{ needs.names.outputs.deployment-name }}-DevStack \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-application.out/cdk-outputs-dev.json \
            ; cd .. \
          ;
        env:
          ENV_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          SELF_DESTRUCT_HANDLER_SOURCE: "../${{ needs.mvn-package.outputs.self-destruct-handler-source }}"
          DIY_SUBMIT_GOOGLE_CLIENT_SECRET_ARN: "arn:aws:secretsmanager:eu-west-2:887764105431:secret:diy/${{ needs.names.outputs.environment-name }}/submit/google/client_secret"

      - name: Resolve stack outputs
        id: dev-outputs
        shell: bash
        run: |
          STACK_NAME="${{ needs.names.outputs.deployment-name }}-DevStack"
          if [ -f cdk-submit-application.out/cdk-outputs-dev.json ]; then
            ECR_REPOSITORY_URI=$(jq -r '."${{ needs.names.outputs.deployment-name }}-DevStack".EcrRepositoryUri' cdk-submit-application.out/cdk-outputs-dev.json)
          else
            ECR_REPOSITORY_URI=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="EcrRepositoryUri") | .OutputValue')
          fi
          echo "ECR_REPOSITORY_URI=$ECR_REPOSITORY_URI"
          echo "ECR_REPOSITORY_URI=$ECR_REPOSITORY_URI" >> $GITHUB_OUTPUT
    outputs:
      ecr-repository-uri: ${{ steps.dev-outputs.outputs.ECR_REPOSITORY_URI }}

  deploy-identity:
    name: 'deploy identity'
    if: ${{ !contains(github.event.inputs.skipDeploy, 'true') }}
    needs:
      - names
      - npm-test
      - mvn-package
      #- build-cdk
      #- deploy-dev
      #- push-images
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

#      - name: Download CDK synthesis artifacts
#        uses: actions/download-artifact@v5
#        with:
#          name: cdk-synthesis
#          path: cdk-submit-application.out/

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Check if IdentityStack exists
        id: static-skip
        shell: bash
        run: |
          STACK_NAME="${{ needs.names.outputs.deployment-name }}-IdentityStack"
          echo "Checking existence of $STACK_NAME"
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" >/dev/null 2>&1; then
            echo "skipStaticStackDeployment=true" >> "$GITHUB_OUTPUT"
          else
            echo "skipStaticStackDeployment=false" >> "$GITHUB_OUTPUT"
          fi

      # --app ../cdk-submit-application.out/ \
      - name: Deploy Identity stack (CDK)
        if: ${{ env.FORCE_STATIC_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        run: |
          ./mvnw --errors clean package -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-application \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                ${{ needs.names.outputs.deployment-name }}-IdentityStack \
                --exclusively \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-application.out/cdk-outputs-identity.json \
              ; cd .. \
            ;
        env:
          ENV_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          SELF_DESTRUCT_HANDLER_SOURCE: "../${{ needs.mvn-package.outputs.self-destruct-handler-source }}"
          DIY_SUBMIT_GOOGLE_CLIENT_SECRET_ARN: "arn:aws:secretsmanager:eu-west-2:887764105431:secret:diy/${{ needs.names.outputs.environment-name }}/submit/google/client_secret"

  push-images:
    name: 'build and push images'
    if: ${{ !contains(github.event.inputs.skipDeploy, 'true') }}
    needs:
      - names
      #- build-cdk
      - deploy-dev
      - docker-build
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Login to Amazon ECR
        shell: bash
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ needs.deploy-dev.outputs.ecr-repository-uri }}

      - name: Check if image already exists in ECR
        id: image-exists
        shell: bash
        run: |
          REPO_URI="${{ needs.deploy-dev.outputs.ecr-repository-uri }}"
          REPO_NAME="${REPO_URI##*/}"
          echo "Checking if image with tag ${{ github.sha }} exists in $REPO_NAME"
          if aws ecr describe-images --repository-name "$REPO_NAME" --image-ids imageTag="${{ github.sha }}" >/dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Download image artifact
        if: ${{ steps.image-exists.outputs.exists != 'true' }}
        uses: actions/download-artifact@v5
        with:
          name: docker-image
          path: docker-image/

      - name: Load Docker image
        if: ${{ steps.image-exists.outputs.exists != 'true' }}
        run: docker load -i docker-image/image.tar

      - name: Tag and push Docker image to ECR
        if: ${{ steps.image-exists.outputs.exists != 'true' }}
        shell: bash
        run: |
          docker tag "${{ env.BASE_IMAGE_TAG_PREFIX }}:${{ github.sha }}" ${{ needs.deploy-dev.outputs.ecr-repository-uri }}:${{ github.sha }}
          docker tag "${{ env.BASE_IMAGE_TAG_PREFIX }}:${{ github.sha }}" ${{ needs.deploy-dev.outputs.ecr-repository-uri }}:latest
          docker push ${{ needs.deploy-dev.outputs.ecr-repository-uri }}:${{ github.sha }}
          docker push ${{ needs.deploy-dev.outputs.ecr-repository-uri }}:latest
    outputs:
      base-image-tag: ${{ github.sha }}

  deploy-auth:
    name: 'deploy auth'
    if: ${{ inputs.skipDeploy != 'true' }}
    needs:
      - names
      - npm-test
      - mvn-package
      #- build-cdk
      - deploy-dev
      - push-images
      - deploy-identity
      - deploy-observability
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

#      - name: Download CDK synthesis artifacts
#        uses: actions/download-artifact@v5
#        with:
#          name: cdk-synthesis
#          path: cdk-submit-application.out/

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

        #                 --app ../cdk-submit-application.out/ \
      - name: Deploy Auth stack (CDK)
        run: |
          ./mvnw --errors clean package -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-application \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                ${{ needs.names.outputs.deployment-name }}-AuthStack \
                --exclusively \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-application.out/cdk-outputs-auth.json \
            ; cd .. \
            ;
        env:
          ENV_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          SELF_DESTRUCT_HANDLER_SOURCE: "../${{ needs.mvn-package.outputs.self-destruct-handler-source }}"
          DIY_SUBMIT_GOOGLE_CLIENT_SECRET_ARN: "arn:aws:secretsmanager:eu-west-2:887764105431:secret:diy/${{ needs.names.outputs.environment-name }}/submit/google/client_secret"
          DIY_SUBMIT_HMRC_CLIENT_SECRET_ARN: "arn:aws:secretsmanager:eu-west-2:887764105431:secret:diy/${{ needs.names.outputs.environment-name }}/submit/hmrc/client_secret"

      - run: cat cdk-submit-application.out/cdk-outputs-auth.json | jq '.'

      # Extract for:
      # additionalBehaviourMappings.put("/api/mock/auth-url" + "*", envOr("DIY_SUBMIT_AUTH_URL_MOCK_LAMBDA_ARN", authStack.authUrlMockLambda.getFunctionArn()));
      # additionalBehaviourMappings.put("/api/cognito/auth-url" + "*", envOr("DIY_SUBMIT_AUTH_URL_COGNITO_LAMBDA_ARN", authStack.authUrlCognitoLambda.getFunctionArn()));
      # additionalBehaviourMappings.put("/api/cognito/exchange-token" + "*", envOr("DIY_SUBMIT_COGNITO_EXCHANGE_TOKEN_LAMBDA_ARN", authStack.exchangeCognitoTokenLambda.getFunctionArn()));
      - name: Resolve stack outputs
        id: auth-outputs
        run: |
          DIY_SUBMIT_AUTH_URL_MOCK_LAMBDA_ARN=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-AuthStack"].AuthUrlMockLambdaArn' cdk-submit-application.out/cdk-outputs-auth.json)
          DIY_SUBMIT_AUTH_URL_COGNITO_LAMBDA_ARN=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-AuthStack"].AuthUrlCognitoLambdaArn' cdk-submit-application.out/cdk-outputs-auth.json)
          DIY_SUBMIT_COGNITO_EXCHANGE_TOKEN_LAMBDA_ARN=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-AuthStack"].ExchangeCognitoTokenLambdaArn' cdk-submit-application.out/cdk-outputs-auth.json)

          # Extract Function URLs for cross-region access
          DIY_SUBMIT_AUTH_URL_MOCK_LAMBDA_URL=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-AuthStack"].AuthUrlMockLambdaUrl' cdk-submit-application.out/cdk-outputs-auth.json)
          DIY_SUBMIT_AUTH_URL_COGNITO_LAMBDA_URL=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-AuthStack"].AuthUrlCognitoLambdaUrl' cdk-submit-application.out/cdk-outputs-auth.json)
          DIY_SUBMIT_COGNITO_EXCHANGE_TOKEN_LAMBDA_URL=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-AuthStack"].ExchangeCognitoTokenLambdaUrl' cdk-submit-application.out/cdk-outputs-auth.json)

          echo "DIY_SUBMIT_AUTH_URL_MOCK_LAMBDA_ARN=$DIY_SUBMIT_AUTH_URL_MOCK_LAMBDA_ARN"
          echo "DIY_SUBMIT_AUTH_URL_COGNITO_LAMBDA_ARN=$DIY_SUBMIT_AUTH_URL_COGNITO_LAMBDA_ARN"
          echo "DIY_SUBMIT_COGNITO_EXCHANGE_TOKEN_LAMBDA_ARN=$DIY_SUBMIT_COGNITO_EXCHANGE_TOKEN_LAMBDA_ARN"
          echo "DIY_SUBMIT_AUTH_URL_MOCK_LAMBDA_URL=$DIY_SUBMIT_AUTH_URL_MOCK_LAMBDA_URL"
          echo "DIY_SUBMIT_AUTH_URL_COGNITO_LAMBDA_URL=$DIY_SUBMIT_AUTH_URL_COGNITO_LAMBDA_URL"
          echo "DIY_SUBMIT_COGNITO_EXCHANGE_TOKEN_LAMBDA_URL=$DIY_SUBMIT_COGNITO_EXCHANGE_TOKEN_LAMBDA_URL"

          echo "DIY_SUBMIT_AUTH_URL_MOCK_LAMBDA_ARN=$DIY_SUBMIT_AUTH_URL_MOCK_LAMBDA_ARN" >> $GITHUB_OUTPUT
          echo "DIY_SUBMIT_AUTH_URL_COGNITO_LAMBDA_ARN=$DIY_SUBMIT_AUTH_URL_COGNITO_LAMBDA_ARN" >> $GITHUB_OUTPUT
          echo "DIY_SUBMIT_COGNITO_EXCHANGE_TOKEN_LAMBDA_ARN=$DIY_SUBMIT_COGNITO_EXCHANGE_TOKEN_LAMBDA_ARN" >> $GITHUB_OUTPUT
          echo "DIY_SUBMIT_AUTH_URL_MOCK_LAMBDA_URL=$DIY_SUBMIT_AUTH_URL_MOCK_LAMBDA_URL" >> $GITHUB_OUTPUT
          echo "DIY_SUBMIT_AUTH_URL_COGNITO_LAMBDA_URL=$DIY_SUBMIT_AUTH_URL_COGNITO_LAMBDA_URL" >> $GITHUB_OUTPUT
          echo "DIY_SUBMIT_COGNITO_EXCHANGE_TOKEN_LAMBDA_URL=$DIY_SUBMIT_COGNITO_EXCHANGE_TOKEN_LAMBDA_URL" >> $GITHUB_OUTPUT
        shell: bash
    outputs:
      authUrlMockLambdaArn: ${{ steps.auth-outputs.outputs.DIY_SUBMIT_AUTH_URL_MOCK_LAMBDA_ARN }}
      authUrlCognitoLambdaArn: ${{ steps.auth-outputs.outputs.DIY_SUBMIT_AUTH_URL_COGNITO_LAMBDA_ARN }}
      exchangeCognitoTokenLambdaArn: ${{ steps.auth-outputs.outputs.DIY_SUBMIT_COGNITO_EXCHANGE_TOKEN_LAMBDA_ARN }}
      authUrlMockLambdaUrl: ${{ steps.auth-outputs.outputs.DIY_SUBMIT_AUTH_URL_MOCK_LAMBDA_URL }}
      authUrlCognitoLambdaUrl: ${{ steps.auth-outputs.outputs.DIY_SUBMIT_AUTH_URL_COGNITO_LAMBDA_URL }}
      exchangeCognitoTokenLambdaUrl: ${{ steps.auth-outputs.outputs.DIY_SUBMIT_COGNITO_EXCHANGE_TOKEN_LAMBDA_URL }}

  # TODO: Split into stacks for MTD (HMRC AUth, VAT Submission and receipts) and Account (Bundles etc...)
  deploy-application:
    name: 'deploy application'
    if: ${{ inputs.skipDeploy != 'true' }}
    needs:
      - names
      - npm-test
      - mvn-package
      #- build-cdk
      - deploy-dev
      - docker-build
      - push-images
      - deploy-identity
      - deploy-observability
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

#      - name: Download CDK synthesis artifacts
#        uses: actions/download-artifact@v5
#        with:
#          name: cdk-synthesis
#          path: cdk-submit-application.out/

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      # --app ../cdk-submit-application.out/ \
      - name: Deploy Application stack (CDK)
        run: |
          ./mvnw --errors clean package -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-application \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                ${{ needs.names.outputs.deployment-name }}-ApplicationStack \
                --exclusively \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-application.out/cdk-outputs-application.json \
              ; cd .. \
            ;
        env:
          ENV_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          SELF_DESTRUCT_HANDLER_SOURCE: "../${{ needs.mvn-package.outputs.self-destruct-handler-source }}"
          DIY_SUBMIT_GOOGLE_CLIENT_SECRET_ARN: "arn:aws:secretsmanager:eu-west-2:887764105431:secret:diy/${{ needs.names.outputs.environment-name }}/submit/google/client_secret"
          DIY_SUBMIT_HMRC_CLIENT_SECRET_ARN: "arn:aws:secretsmanager:eu-west-2:887764105431:secret:diy/${{ needs.names.outputs.environment-name }}/submit/hmrc/client_secret"
          BASE_IMAGE_TAG: ${{ needs.push-images.outputs.base-image-tag }}

      - run: cat cdk-submit-application.out/cdk-outputs-application.json | jq '.'

      # Extract for:
      #        additionalBehaviourMappings.put("/api/hmrc/auth-url" + "*", envOr("DIY_SUBMIT_AUTH_URL_HMRC_LAMBDA_ARN", applicationStack.authUrlHmrcLambda.getFunctionArn()));
      #        additionalBehaviourMappings.put("/api/hmrc/exchange-token" + "*", envOr("DIY_SUBMIT_EXCHANGE_HMRC_TOKEN_LAMBDA_ARN", applicationStack.exchangeHmrcTokenLambda.getFunctionArn()));
      #        additionalBehaviourMappings.put("/api/submit-vat" + "*", envOr("DIY_SUBMIT_SUBMIT_VAT_LAMBDA_ARN", applicationStack.submitVatLambda.getFunctionArn()));
      #        additionalBehaviourMappings.put("/api/log-receipt" + "*", envOr("DIY_SUBMIT_LOG_RECEIPT_LAMBDA_ARN", applicationStack.logReceiptLambda.getFunctionArn()));
      #        additionalBehaviourMappings.put("/api/catalog" + "*", envOr("DIY_SUBMIT_CATALOG_LAMBDA_ARN", applicationStack.catalogLambda.getFunctionArn()));
      #        additionalBehaviourMappings.put("/api/my-bundles" + "*", envOr("DIY_SUBMIT_MY_BUNDLES_LAMBDA_ARN", applicationStack.myBundlesLambda.getFunctionArn()));
      #        additionalBehaviourMappings.put("/api/my-receipts" + "*", envOr("DIY_SUBMIT_MY_RECEIPTS_LAMBDA_ARN", applicationStack.myReceiptsLambda.getFunctionArn()));
      - name: Resolve stack outputs
        id: application-outputs
        run: |
          DIY_SUBMIT_AUTH_URL_HMRC_LAMBDA_ARN=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-ApplicationStack"].AuthUrlHmrcLambdaArn' cdk-submit-application.out/cdk-outputs-application.json)
          DIY_SUBMIT_EXCHANGE_HMRC_TOKEN_LAMBDA_ARN=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-ApplicationStack"].ExchangeHmrcTokenLambdaArn' cdk-submit-application.out/cdk-outputs-application.json)
          DIY_SUBMIT_SUBMIT_VAT_LAMBDA_ARN=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-ApplicationStack"].SubmitVatLambdaArn' cdk-submit-application.out/cdk-outputs-application.json)
          DIY_SUBMIT_LOG_RECEIPT_LAMBDA_ARN=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-ApplicationStack"].LogReceiptLambdaArn' cdk-submit-application.out/cdk-outputs-application.json)
          DIY_SUBMIT_CATALOG_LAMBDA_ARN=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-ApplicationStack"].CatalogLambdaArn' cdk-submit-application.out/cdk-outputs-application.json)
          DIY_SUBMIT_REQUEST_BUNDLES_LAMBDA_ARN=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-ApplicationStack"].RequestBundlesLambdaArn' cdk-submit-application.out/cdk-outputs-application.json)
          DIY_SUBMIT_MY_BUNDLES_LAMBDA_ARN=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-ApplicationStack"].MyBundlesLambdaArn' cdk-submit-application.out/cdk-outputs-application.json)
          DIY_SUBMIT_MY_RECEIPTS_LAMBDA_ARN=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-ApplicationStack"].MyReceiptsLambdaArn' cdk-submit-application.out/cdk-outputs-application.json)

          # Extract Function URLs for cross-region access
          DIY_SUBMIT_AUTH_URL_HMRC_LAMBDA_URL=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-ApplicationStack"].AuthUrlHmrcLambdaUrl' cdk-submit-application.out/cdk-outputs-application.json)
          DIY_SUBMIT_EXCHANGE_HMRC_TOKEN_LAMBDA_URL=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-ApplicationStack"].ExchangeHmrcTokenLambdaUrl' cdk-submit-application.out/cdk-outputs-application.json)
          DIY_SUBMIT_SUBMIT_VAT_LAMBDA_URL=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-ApplicationStack"].SubmitVatLambdaUrl' cdk-submit-application.out/cdk-outputs-application.json)
          DIY_SUBMIT_LOG_RECEIPT_LAMBDA_URL=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-ApplicationStack"].LogReceiptLambdaUrl' cdk-submit-application.out/cdk-outputs-application.json)
          DIY_SUBMIT_CATALOG_LAMBDA_URL=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-ApplicationStack"].CatalogLambdaUrl' cdk-submit-application.out/cdk-outputs-application.json)
          DIY_SUBMIT_REQUEST_BUNDLES_LAMBDA_URL=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-ApplicationStack"].RequestBundlesLambdaUrl' cdk-submit-application.out/cdk-outputs-application.json)
          DIY_SUBMIT_MY_BUNDLES_LAMBDA_URL=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-ApplicationStack"].MyBundlesLambdaUrl' cdk-submit-application.out/cdk-outputs-application.json)
          DIY_SUBMIT_MY_RECEIPTS_LAMBDA_URL=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-ApplicationStack"].MyReceiptsLambdaUrl' cdk-submit-application.out/cdk-outputs-application.json)

          echo "DIY_SUBMIT_AUTH_URL_HMRC_LAMBDA_ARN=$DIY_SUBMIT_AUTH_URL_HMRC_LAMBDA_ARN"
          echo "DIY_SUBMIT_AUTH_URL_HMRC_LAMBDA_ARN=$DIY_SUBMIT_AUTH_URL_HMRC_LAMBDA_ARN" >> $GITHUB_OUTPUT
          echo "DIY_SUBMIT_EXCHANGE_HMRC_TOKEN_LAMBDA_ARN=$DIY_SUBMIT_EXCHANGE_HMRC_TOKEN_LAMBDA_ARN"
          echo "DIY_SUBMIT_EXCHANGE_HMRC_TOKEN_LAMBDA_ARN=$DIY_SUBMIT_EXCHANGE_HMRC_TOKEN_LAMBDA_ARN" >> $GITHUB_OUTPUT
          echo "DIY_SUBMIT_SUBMIT_VAT_LAMBDA_ARN=$DIY_SUBMIT_SUBMIT_VAT_LAMBDA_ARN"
          echo "DIY_SUBMIT_SUBMIT_VAT_LAMBDA_ARN=$DIY_SUBMIT_SUBMIT_VAT_LAMBDA_ARN" >> $GITHUB_OUTPUT
          echo "DIY_SUBMIT_LOG_RECEIPT_LAMBDA_ARN=$DIY_SUBMIT_LOG_RECEIPT_LAMBDA_ARN"
          echo "DIY_SUBMIT_LOG_RECEIPT_LAMBDA_ARN=$DIY_SUBMIT_LOG_RECEIPT_LAMBDA_ARN" >> $GITHUB_OUTPUT
          echo "DIY_SUBMIT_CATALOG_LAMBDA_ARN=$DIY_SUBMIT_CATALOG_LAMBDA_ARN"
          echo "DIY_SUBMIT_CATALOG_LAMBDA_ARN=$DIY_SUBMIT_CATALOG_LAMBDA_ARN" >> $GITHUB_OUTPUT
          echo "DIY_SUBMIT_REQUEST_BUNDLES_LAMBDA_ARN=$DIY_SUBMIT_REQUEST_BUNDLES_LAMBDA_ARN"
          echo "DIY_SUBMIT_REQUEST_BUNDLES_LAMBDA_ARN=$DIY_SUBMIT_REQUEST_BUNDLES_LAMBDA_ARN" >> $GITHUB_OUTPUT
          echo "DIY_SUBMIT_MY_BUNDLES_LAMBDA_ARN=$DIY_SUBMIT_MY_BUNDLES_LAMBDA_ARN"
          echo "DIY_SUBMIT_MY_BUNDLES_LAMBDA_ARN=$DIY_SUBMIT_MY_BUNDLES_LAMBDA_ARN" >> $GITHUB_OUTPUT
          echo "DIY_SUBMIT_MY_RECEIPTS_LAMBDA_ARN=$DIY_SUBMIT_MY_RECEIPTS_LAMBDA_ARN"
          echo "DIY_SUBMIT_MY_RECEIPTS_LAMBDA_ARN=$DIY_SUBMIT_MY_RECEIPTS_LAMBDA_ARN" >> $GITHUB_OUTPUT

          echo "DIY_SUBMIT_AUTH_URL_HMRC_LAMBDA_URL=$DIY_SUBMIT_AUTH_URL_HMRC_LAMBDA_URL"
          echo "DIY_SUBMIT_AUTH_URL_HMRC_LAMBDA_URL=$DIY_SUBMIT_AUTH_URL_HMRC_LAMBDA_URL" >> $GITHUB_OUTPUT
          echo "DIY_SUBMIT_EXCHANGE_HMRC_TOKEN_LAMBDA_URL=$DIY_SUBMIT_EXCHANGE_HMRC_TOKEN_LAMBDA_URL"
          echo "DIY_SUBMIT_EXCHANGE_HMRC_TOKEN_LAMBDA_URL=$DIY_SUBMIT_EXCHANGE_HMRC_TOKEN_LAMBDA_URL" >> $GITHUB_OUTPUT
          echo "DIY_SUBMIT_SUBMIT_VAT_LAMBDA_URL=$DIY_SUBMIT_SUBMIT_VAT_LAMBDA_URL"
          echo "DIY_SUBMIT_SUBMIT_VAT_LAMBDA_URL=$DIY_SUBMIT_SUBMIT_VAT_LAMBDA_URL" >> $GITHUB_OUTPUT
          echo "DIY_SUBMIT_LOG_RECEIPT_LAMBDA_URL=$DIY_SUBMIT_LOG_RECEIPT_LAMBDA_URL"
          echo "DIY_SUBMIT_LOG_RECEIPT_LAMBDA_URL=$DIY_SUBMIT_LOG_RECEIPT_LAMBDA_URL" >> $GITHUB_OUTPUT
          echo "DIY_SUBMIT_CATALOG_LAMBDA_URL=$DIY_SUBMIT_CATALOG_LAMBDA_URL"
          echo "DIY_SUBMIT_CATALOG_LAMBDA_URL=$DIY_SUBMIT_CATALOG_LAMBDA_URL" >> $GITHUB_OUTPUT
          echo "DIY_SUBMIT_REQUEST_BUNDLES_LAMBDA_URL=$DIY_SUBMIT_REQUEST_BUNDLES_LAMBDA_URL"
          echo "DIY_SUBMIT_REQUEST_BUNDLES_LAMBDA_URL=$DIY_SUBMIT_REQUEST_BUNDLES_LAMBDA_URL" >> $GITHUB_OUTPUT
          echo "DIY_SUBMIT_MY_BUNDLES_LAMBDA_URL=$DIY_SUBMIT_MY_BUNDLES_LAMBDA_URL"
          echo "DIY_SUBMIT_MY_BUNDLES_LAMBDA_URL=$DIY_SUBMIT_MY_BUNDLES_LAMBDA_URL" >> $GITHUB_OUTPUT
          echo "DIY_SUBMIT_MY_RECEIPTS_LAMBDA_URL=$DIY_SUBMIT_MY_RECEIPTS_LAMBDA_URL"
          echo "DIY_SUBMIT_MY_RECEIPTS_LAMBDA_URL=$DIY_SUBMIT_MY_RECEIPTS_LAMBDA_URL" >> $GITHUB_OUTPUT
        shell: bash
    outputs:
      authUrlHmrcLambdaArn: ${{ steps.application-outputs.outputs.DIY_SUBMIT_AUTH_URL_HMRC_LAMBDA_ARN }}
      exchangeHmrcTokenLambdaArn: ${{ steps.application-outputs.outputs.DIY_SUBMIT_EXCHANGE_HMRC_TOKEN_LAMBDA_ARN }}
      submitVatLambdaArn: ${{ steps.application-outputs.outputs.DIY_SUBMIT_SUBMIT_VAT_LAMBDA_ARN }}
      logReceiptLambdaArn: ${{ steps.application-outputs.outputs.DIY_SUBMIT_LOG_RECEIPT_LAMBDA_ARN }}
      catalogLambdaArn: ${{ steps.application-outputs.outputs.DIY_SUBMIT_CATALOG_LAMBDA_ARN }}
      myBundlesLambdaArn: ${{ steps.application-outputs.outputs.DIY_SUBMIT_MY_BUNDLES_LAMBDA_ARN }}
      myReceiptsLambdaArn: ${{ steps.application-outputs.outputs.DIY_SUBMIT_MY_RECEIPTS_LAMBDA_ARN }}
      authUrlHmrcLambdaUrl: ${{ steps.application-outputs.outputs.DIY_SUBMIT_AUTH_URL_HMRC_LAMBDA_URL }}
      exchangeHmrcTokenLambdaUrl: ${{ steps.application-outputs.outputs.DIY_SUBMIT_EXCHANGE_HMRC_TOKEN_LAMBDA_URL }}
      submitVatLambdaUrl: ${{ steps.application-outputs.outputs.DIY_SUBMIT_SUBMIT_VAT_LAMBDA_URL }}
      logReceiptLambdaUrl: ${{ steps.application-outputs.outputs.DIY_SUBMIT_LOG_RECEIPT_LAMBDA_URL }}
      catalogLambdaUrl: ${{ steps.application-outputs.outputs.DIY_SUBMIT_CATALOG_LAMBDA_URL }}
      requestBundlesLambdaUrl: ${{ steps.application-outputs.outputs.DIY_SUBMIT_REQUEST_BUNDLES_LAMBDA_URL }}
      myBundlesLambdaUrl: ${{ steps.application-outputs.outputs.DIY_SUBMIT_MY_BUNDLES_LAMBDA_URL }}
      myReceiptsLambdaUrl: ${{ steps.application-outputs.outputs.DIY_SUBMIT_MY_RECEIPTS_LAMBDA_URL }}

  deploy-edge:
    name: 'deploy edge'
    if: ${{ inputs.skipDeploy != 'true' }}
    needs:
      - names
      - npm-test
      - mvn-package
      #- build-cdk
      - deploy-auth
      - deploy-application
    runs-on: ubuntu-24.04
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
      url: ${{ steps.edge-outputs.outputs.BASE_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Check if EdgeStack exists
        id: static-skip
        shell: bash
        run: |
          STACK_NAME="${{ needs.names.outputs.deployment-name }}-EdgeStack"
          echo "Checking existence of $STACK_NAME"
          if aws cloudformation describe-stacks --region "us-east-1" --stack-name "$STACK_NAME" >/dev/null 2>&1; then
            echo "skipStaticStackDeployment=true" >> "$GITHUB_OUTPUT"
          else
            echo "skipStaticStackDeployment=false" >> "$GITHUB_OUTPUT"
          fi

      - run: find . -type f -iname ".*" -ls

      - run: find . -type f -ls

      - run: find /home/runner/work/submit.diyaccounting.co.uk/submit.diyaccounting.co.uk/cdk-delivery -type f -iname ".*" -ls

      - run: find /home/runner/work/submit.diyaccounting.co.uk/submit.diyaccounting.co.uk/cdk-delivery -type f -ls

      - run: cat /home/runner/work/submit.diyaccounting.co.uk/submit.diyaccounting.co.uk/cdk-delivery/cdk.json

      - name: Build CDK and synthesize and deploy the EdgeStack in the Delivery Application
        if: ${{ env.FORCE_STATIC_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        run: |
          ./mvnw --errors clean package -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-delivery \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                ${{ needs.names.outputs.deployment-name }}-EdgeStack \
                --exclusively \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-delivery.out/cdk-outputs-edge.json \
              ; cd .. \
            ;
        env:
          ENV_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          SELF_DESTRUCT_HANDLER_SOURCE: "../${{ needs.mvn-package.outputs.self-destruct-handler-source }}"
          DOMAIN_NAME: ${{ needs.names.outputs.deployment-name == 'prod' && 'submit.diyaccounting.co.uk' || format('{0}.submit.diyaccounting.co.uk', needs.names.outputs.deployment-name) }}
          DIY_SUBMIT_HOME_URL: ${{ needs.names.outputs.deployment-name == 'prod' && 'https://submit.diyaccounting.co.uk/' || format('https://{0}.submit.diyaccounting.co.uk/', needs.names.outputs.deployment-name) }}
          HOSTED_ZONE_NAME: ${{ vars.AWS_HOSTED_ZONE_NAME }}
          HOSTED_ZONE_ID: ${{ vars.AWS_HOSTED_ZONE_ID }}
          CERTIFICATE_ARN: ${{ vars.AWS_CERTIFICATE_ARN }}
          DIY_SUBMIT_AUTH_URL_MOCK_LAMBDA_ARN: ${{ needs.deploy-auth.outputs.authUrlMockLambdaArn }}
          DIY_SUBMIT_AUTH_URL_COGNITO_LAMBDA_ARN: ${{ needs.deploy-auth.outputs.authUrlCognitoLambdaArn }}
          DIY_SUBMIT_COGNITO_EXCHANGE_TOKEN_LAMBDA_ARN: ${{ needs.deploy-auth.outputs.exchangeCognitoTokenLambdaArn }}
          DIY_SUBMIT_AUTH_URL_HMRC_LAMBDA_ARN: ${{ needs.deploy-application.outputs.authUrlHmrcLambdaArn }}
          DIY_SUBMIT_EXCHANGE_HMRC_TOKEN_LAMBDA_ARN: ${{ needs.deploy-application.outputs.exchangeHmrcTokenLambdaArn }}
          DIY_SUBMIT_SUBMIT_VAT_LAMBDA_ARN: ${{ needs.deploy-application.outputs.submitVatLambdaArn }}
          DIY_SUBMIT_LOG_RECEIPT_LAMBDA_ARN: ${{ needs.deploy-application.outputs.logReceiptLambdaArn }}
          DIY_SUBMIT_CATALOG_LAMBDA_ARN: ${{ needs.deploy-application.outputs.catalogLambdaArn }}
          DIY_SUBMIT_REQUEST_BUNDLES_LAMBDA_ARN: ${{ needs.deploy-application.outputs.requestBundlesLambdaArn }}
          DIY_SUBMIT_MY_BUNDLES_LAMBDA_ARN: ${{ needs.deploy-application.outputs.myBundlesLambdaArn }}
          DIY_SUBMIT_MY_RECEIPTS_LAMBDA_ARN: ${{ needs.deploy-application.outputs.myReceiptsLambdaArn }}
          # Function URLs for cross-region EdgeStack deployment
          DIY_SUBMIT_AUTH_URL_MOCK_LAMBDA_URL: ${{ needs.deploy-auth.outputs.authUrlMockLambdaUrl }}
          DIY_SUBMIT_AUTH_URL_COGNITO_LAMBDA_URL: ${{ needs.deploy-auth.outputs.authUrlCognitoLambdaUrl }}
          DIY_SUBMIT_COGNITO_EXCHANGE_TOKEN_LAMBDA_URL: ${{ needs.deploy-auth.outputs.exchangeCognitoTokenLambdaUrl }}
          DIY_SUBMIT_AUTH_URL_HMRC_LAMBDA_URL: ${{ needs.deploy-application.outputs.authUrlHmrcLambdaUrl }}
          DIY_SUBMIT_EXCHANGE_HMRC_TOKEN_LAMBDA_URL: ${{ needs.deploy-application.outputs.exchangeHmrcTokenLambdaUrl }}
          DIY_SUBMIT_SUBMIT_VAT_LAMBDA_URL: ${{ needs.deploy-application.outputs.submitVatLambdaUrl }}
          DIY_SUBMIT_LOG_RECEIPT_LAMBDA_URL: ${{ needs.deploy-application.outputs.logReceiptLambdaUrl }}
          DIY_SUBMIT_CATALOG_LAMBDA_URL: ${{ needs.deploy-application.outputs.catalogLambdaUrl }}
          DIY_SUBMIT_REQUEST_BUNDLES_LAMBDA_URL: ${{ needs.deploy-application.outputs.requestBundlesLambdaUrl }}
          DIY_SUBMIT_MY_BUNDLES_LAMBDA_URL: ${{ needs.deploy-application.outputs.myBundlesLambdaUrl }}
          DIY_SUBMIT_MY_RECEIPTS_LAMBDA_URL: ${{ needs.deploy-application.outputs.myReceiptsLambdaUrl }}

      #authUrlMockLambdaArn: ${{ steps.auth-outputs.outputs.DIY_SUBMIT_AUTH_URL_MOCK_LAMBDA_ARN }}
      #authUrlCognitoLambdaArn: ${{ steps.auth-outputs.outputs.DIY_SUBMIT_AUTH_URL_COGNITO_LAMBDA_ARN }}
      #exchangeCognitoTokenLambdaArn: ${{ steps.auth-outputs.outputs.DIY_SUBMIT_COGNITO_EXCHANGE_TOKEN_LAMBDA_ARN }}
#      authUrlHmrcLambdaArn: ${{ steps.application-outputs.outputs.DIY_SUBMIT_AUTH_URL_HMRC_LAMBDA_ARN }}
#      exchangeHmrcTokenLambdaArn: ${{ steps.application-outputs.outputs.DIY_SUBMIT_EXCHANGE_HMRC_TOKEN_LAMBDA_ARN }}
#      submitVatLambdaArn: ${{ steps.application-outputs.outputs.DIY_SUBMIT_SUBMIT_VAT_LAMBDA_ARN }}
#      logReceiptLambdaArn: ${{ steps.application-outputs.outputs.DIY_SUBMIT_LOG_RECEIPT_LAMBDA_ARN }}
#      catalogLambdaArn: ${{ steps.application-outputs.outputs.DIY_SUBMIT_CATALOG_LAMBDA_ARN }}
#      myBundlesLambdaArn: ${{ steps.application-outputs.outputs.DIY_SUBMIT_MY_BUNDLES_LAMBDA_ARN }}
#      myReceiptsLambdaArn: ${{ steps.application-outputs.outputs.DIY_SUBMIT_MY_RECEIPTS_LAMBDA_ARN }}

      - name: Resolve stack outputs
        if: ${{ env.FORCE_STATIC_STACK_DEPLOYMENT == 'true' || steps.static-skip.outputs.skipStaticStackDeployment != 'true' }}
        id: edge-outputs
        run: |
          BASE_URL=$(jq -r '.["${{ needs.names.outputs.deployment-name }}-EdgeStack"].BaseUrl' cdk-submit-delivery.out/cdk-outputs-edge.json)
          echo "BASE_URL=$BASE_URL"
          echo "BASE_URL=$BASE_URL" >> $GITHUB_OUTPUT
        shell: bash
    outputs:
      base-url: ${{ steps.edge-outputs.outputs.BASE_URL }}

  deploy-publish:
    name: 'deploy publish'
    if: ${{ inputs.skipDeploy != 'true' }}
    needs:
      - names
      - npm-test
      #- build-cdk
      - mvn-package
      - deploy-edge
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Build CDK and synthesize and deploy the PublishStack in the Delivery Application
        run: |
          ./mvnw --errors clean package -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            && cd cdk-delivery \
            && cat ../.env.${{ needs.names.outputs.environment-name }} \
            && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
              npx cdk deploy \
                ${{ needs.names.outputs.deployment-name }}-PublishStack \
                --exclusively \
                --require-approval never \
                --ci true \
                --concurrency 4 \
                --asset-parallelism \
                --outputs-file ../cdk-submit-application.out/cdk-outputs-publish.json \
              ; cd .. \
            ;
        env:
          ENV_NAME: ${{ needs.names.outputs.environment-name }}
          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}
          SELF_DESTRUCT_HANDLER_SOURCE: "../${{ needs.mvn-package.outputs.self-destruct-handler-source }}"
          DOMAIN_NAME: ${{ needs.names.outputs.deployment-name == 'prod' && 'submit.diyaccounting.co.uk' || format('{0}.submit.diyaccounting.co.uk', needs.names.outputs.deployment-name) }}
          DIY_SUBMIT_HOME_URL: ${{ needs.names.outputs.deployment-name == 'prod' && 'https://submit.diyaccounting.co.uk/' || format('https://{0}.submit.diyaccounting.co.uk/', needs.names.outputs.deployment-name) }}
          HOSTED_ZONE_NAME: ${{ vars.AWS_HOSTED_ZONE_NAME }}
          HOSTED_ZONE_ID: ${{ vars.AWS_HOSTED_ZONE_ID }}
          CERTIFICATE_ARN: ${{ vars.AWS_CERTIFICATE_ARN }}

#  deploy-ops:
#    name: 'deploy ops'
#    if: ${{ inputs.skipDeploy != 'true' }}
#    needs:
#      - names
#      - npm-test
#      - build-cdk
#      - deploy-auth
#      - deploy-application
#      - deploy-edge
#    runs-on: ubuntu-24.04
#    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v5
#
#      - name: Setup Node
#        uses: actions/setup-node@v5
#        with:
#          node-version: ${{ env.NODE_VERSION }}
#          cache: 'npm'
#
#      - name: Node dependencies
#        run: npm ci
#
#      - uses: actions/setup-java@v5
#        with:
#          distribution: 'temurin'
#          java-version: ${{ env.JAVA_VERSION }}
#          cache: 'maven'
#
#      - name: Download CDK synthesis artifacts
#        uses: actions/download-artifact@v5
#        with:
#          name: cdk-synthesis
#          path: cdk-submit-application.out/
#
#      - name: Configure AWS role via GitHub OIDC
#        uses: aws-actions/configure-aws-credentials@v5
#        with:
#          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
#          aws-region: ${{ env.AWS_REGION }}
#          role-chaining: false
#          audience: sts.amazonaws.com
#          role-skip-session-tagging: true
#          output-credentials: true
#          retry-max-attempts: 3
#
#      - name: Assume AWS deployment role
#        uses: aws-actions/configure-aws-credentials@v5
#        with:
#          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
#          aws-region: ${{ env.AWS_REGION }}
#          role-chaining: true
#          audience: sts.amazonaws.com
#          role-skip-session-tagging: true
#          output-credentials: true
#          retry-max-attempts: 3
#
#      - name: Deploy Ops Stack (CDK)
#        run: |
#          cd cdk-application \
#           && cat ../.env.${{ needs.names.outputs.environment-name }} \
#           && npx dotenv -e ../.env.${{ needs.names.outputs.environment-name }} -- \
#             npx cdk deploy ${{ needs.names.outputs.deployment-name }}-OpsStack \
#              --exclusively \
#              --require-approval never \
#              --ci true \
#              --concurrency 4 \
#              --asset-parallelism \
#              --outputs-file cdk-out/cdk-outputs-ops.json \
#           ; cd .. \
#           ;
#        env:
#          ENV_NAME: ${{ needs.names.outputs.environment-name }}
#          DEPLOYMENT_NAME: ${{ needs.names.outputs.deployment-name }}

  test-parameters:
    if: ${{ !cancelled() && inputs.skipDeploy == 'true' || needs.deploy-edge.result == 'success' }}
    name: 'calculate test parameters'
    needs:
      - names
      - deploy-application
      - deploy-edge
      - deploy-publish
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    env:
      #BASE_URL: ${{ ( needs.names.outputs.deployment-name == 'prod' && 'https://submit.diyaccounting.co.uk' || format('https://{0}.submit.diyaccounting.co.uk', needs.names.outputs.deployment-name) ) }}
      BASE_URL: ${{ needs.deploy-edge.outputs.base-url || ( needs.names.outputs.deployment-name == 'prod' && 'https://submit.diyaccounting.co.uk' || format('https://{0}.submit.diyaccounting.co.uk', needs.names.outputs.deployment-name) ) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

    outputs:
      base-url: ${{ needs.deploy-edge.outputs.base-url || ( needs.names.outputs.deployment-name == 'prod' && 'https://submit.diyaccounting.co.uk' || format('https://{0}.submit.diyaccounting.co.uk', needs.names.outputs.deployment-name) ) }}

#  api-test:
#    if: ${{ !cancelled() && inputs.skipDeploy == 'true' || needs.deploy-edge.result == 'success' }}
#    name: 'api test'
#    needs:
#      - names
#      - build-cdk
#      - deploy-application
#      - deploy-edge
#      - deploy-publish
#      - test-parameters
#    runs-on: ubuntu-24.04
#    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v5
#
#      - name: Setup Node
#        uses: actions/setup-node@v5
#        with:
#          node-version: ${{ env.NODE_VERSION }}
#          cache: 'npm'
#
#      - name: Node dependencies
#        run: npm ci
#
#      - name: Install dependencies and Playwright browsers
#        run: |
#          npm -v
#          npm ci --ignore-scripts
#          npx playwright install chromium --with-deps
#
#      - name: Run Playwright API test
#        run: |
#          echo "BASE_URL=${BASE_URL}"
#          npm run test:api
#        env:
#          BASE_URL: ${{ needs.test-parameters.outputs.base-url }}
#
#      - name: Upload artifacts
#        if: ${{ !cancelled() }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: api-test-artifacts
#          path: |
#            playwright-report
#            test-results

  web-test:
    if: ${{ !cancelled() && inputs.skipDeploy == 'true' || needs.deploy-edge.result == 'success' }}
    name: 'web test'
    needs:
      - names
      #- build-cdk
      - deploy-application
      - deploy-edge
      - deploy-publish
      - test-parameters
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - name: Install dependencies and Playwright browsers
        run: |
          npm -v
          npm ci --ignore-scripts
          npx playwright install chromium --with-deps

      - name: Generate test credentials
        id: uuid
        run: |
          TEST_USERNAME="test-$(uuidgen | tr '[:upper:]' '[:lower:]' | head -c 8)"
          TEST_PASSWORD="$(uuidgen | tr '[:upper:]' '[:lower:]' | head -c 16)"
          echo "TEST_USERNAME=$TEST_USERNAME" >> $GITHUB_OUTPUT
          echo "TEST_PASSWORD=$TEST_PASSWORD" >> $GITHUB_OUTPUT

      - run: cp '.env.${{ needs.names.outputs.environment-name }}' '.env.proxy' ; npx dotenv -e '.env.${{ needs.names.outputs.environment-name }}' -- npm run test:behaviour
        env:
          BASE_URL: ${{ needs.test-parameters.outputs.base-url }}
          DIY_SUBMIT_TEST_AUTH_USERNAME: ${{ steps.uuid.outputs.TEST_USERNAME }}
          DIY_SUBMIT_TEST_AUTH_PASSWORD: ${{ steps.uuid.outputs.TEST_PASSWORD }}

      - name: Convert Playwright video to MP4
        if: ${{ !cancelled() }}
        run: |
          set -euo pipefail
          root="target/behaviour-test-results"

          # Recursively transcode all .webm files, placing output next to source with 'converted' prefix
          pids=()
          while IFS= read -r -d '' f; do
            dir=$(dirname "$f")
            base="${f##*/}"
            name="${base%.webm}"
            out="${dir}/converted${name}.mp4"
            echo "Transcoding $f -> $out"
            npm run convert:video -- --in "$f" --out "$out" &
            pids+=($!)
          done < <(find "$root" -type f -name '*.webm' -print0)

          # Wait for all transcodes to complete
          fail=0
          for pid in "${pids[@]:-}"; do
            if ! wait "$pid"; then
              fail=1
            fi
          done

          exit $fail

      - name: Upload artifacts (results)
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: web-test-artifacts
          retention-days: 30
          path: |
            target/behaviour-test-results/

      - name: Upload artifacts (reports)
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: web-test-reports
          retention-days: 30
          path: |
            target/test-reports/

#  load-test:
#    if: ${{ !cancelled() && inputs.skipDeploy == 'true' || needs.deploy-edge.result == 'success' }}
#    name: 'load test'
#    needs:
#      - names
#      - build-cdk
#      - deploy-edge
#      - deploy-edge
#      - deploy-publish
#      - test-parameters
#    runs-on: ubuntu-24.04
#    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v5
#
#      - name: Setup Node
#        uses: actions/setup-node@v5
#        with:
#          node-version: ${{ env.NODE_VERSION }}
#          cache: 'npm'
#
#      - name: Node dependencies
#        run: npm ci
#
#      - name: Setup k6
#        uses: grafana/setup-k6-action@v1
#
#      - name: Setup k6 with dashboard extension
#        run: |
#          # Download pre-built k6 binary with xk6-dashboard extension
#          curl -L https://github.com/grafana/xk6-dashboard/releases/download/v0.7.12/xk6-dashboard_v0.7.12_linux_amd64.tar.gz -o xk6-dashboard.tar.gz
#          tar -xzf xk6-dashboard.tar.gz
#          chmod +x xk6-dashboard_v0.7.12_linux_amd64/k6
#          # Create a symlink for easy access
#          ln -s xk6-dashboard_v0.7.12_linux_amd64/k6 k6
#          ./k6 version
#
#      - name: Run k6 load test with dashboard
#        run: |
#          # k6 run tests/load.live.test.js --summary-export=load-test-summary.json
#          # Run k6 with dashboard export, events recording, and summary export for maximum information
#          ./k6 run tests/load.live.test.js \
#            --out 'dashboard=export=load-test-report.html&port=-1&record=load-test-events.json&period=1s' \
#            --summary-export=load-test-summary.json
#        env:
#          BASE_URL: ${{ needs.test-parameters.outputs.base-url }}
#          TEST_USERNAME: ${{ needs.test-parameters.outputs.test-username }}
#          TEST_PASSWORD: ${{ needs.test-parameters.outputs.test-password }}
#          DURATION: ${{ inputs.loadTestDuration }}
#
#      - name: Upload artifacts
#        if: ${{ !cancelled() }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: load-test-artifacts
#          path: |
#            load-test-summary.json
#            load-test-report.html
#            load-test-events.json

  publish-artifacts:
    name: 'publish artifacts to github pages'
    if: ${{ !cancelled() && needs.names.outputs.environment-name == 'prod' && ( inputs.skipDeploy == 'true' || needs.deploy-edge.result == 'success' ) }}
    needs:
      - names
      - deploy-edge
      - test-parameters
      #- api-test
      - web-test
      #- load-test
    runs-on: ubuntu-24.04
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - name: Download all test artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts/
        continue-on-error: true

      - name: Create GitHub Pages content
        run: |
          mkdir -p gh-pages

          # Copy web assets to root
          cp -r web/* gh-pages/

          # Create artifacts directory structure
          mkdir -p gh-pages/artifacts

          # Copy test artifacts
          if [ -d "artifacts/web-test-artifacts" ]; then
            cp -r artifacts/web-test-artifacts gh-pages/artifacts/web-test/
          fi

          # Create index page for artifacts
          cat > gh-pages/artifacts/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Test Artifacts - OIDC Provider</title>
              <link rel="stylesheet" href="../oidc.css">
          </head>
          <body>
              <div class="container">
                  <h1>Test Artifacts</h1>
                  <p>Generated from deployment: <strong>${{ needs.names.outputs.deployment-name }}</strong></p>
                  <p>Service Base URL: <a href="${{ needs.test-parameters.outputs.base-url }}" target="_blank">${{ needs.test-parameters.outputs.base-url }}</a></p>

                  <h2>Available Artifacts</h2>
                  <ul>
                      <li><a href="web-test/">Web Test Results</a></li>
                  </ul>
              </div>
          </body>
          </html>
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v4
        with:
          path: gh-pages

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Output deployment URLs
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Service Base URL**: ${{ needs.test-parameters.outputs.base-url }}" >> $GITHUB_STEP_SUMMARY
          #echo "📊 **Load Test Report**: ${{ steps.deployment.outputs.page_url }}artifacts/load-test/load-test-report.html" >> $GITHUB_STEP_SUMMARY
          echo "📁 **GitHub Pages**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

    outputs:
      service-base-url: ${{ needs.test-parameters.outputs.base-url }}
      github-pages-url: ${{ steps.deployment.outputs.page_url }}
      artifacts-url: ${{ steps.deployment.outputs.page_url }}artifacts/
