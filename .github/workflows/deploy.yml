# .github/workflows/deploy.yml

name: deploy
concurrency: deploy
run-name: "deploy [${{ inputs.environment || 'prod' }}] [${{ github.ref_name }}]"

on:
#  pull_request:
#    branches:
#      - main
#    paths:
#      - 'app/functions'
#      - 'app/lib'
#      - 'infra/main'
#      - 'infra/runtimes'
#      - 'web/public/**'
#      - '.env.ci'
#      - '.env.prod'
#      - 'cdk.json'
#      - 'Dockerfile'
#      - 'LICENSE'
#      - 'package.json'
#      - 'package-lock.json'
#      - 'pom.xml'
#      - 'product-catalogue.toml'
#      - '.github/workflows/deploy.yml'
#      - '.github/workflows/deploy-ci-only.yml'
  push:
    branches:
      - main
    paths:
      - '.env.prod'
      - 'app/functions'
      - 'app/lib'
      - 'infra/main'
      - 'infra/runtimes'
      - 'web/public/**'
      - '.env.ci'
      - '.env.prod'
      - 'cdk.json'
      - 'Dockerfile'
      - 'LICENSE'
      - 'package.json'
      - 'package-lock.json'
      - 'pom.xml'
      - 'product-catalogue.toml'
      - '.github/workflows/deploy.yml'
      - '.github/workflows/deploy-ci-only.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        # TODO: Deploy to versioned target environments, e.g. 'ci, prod-<git hash>'.
        # TODO: Create a prod 'actual' domain which routes to a pool of versioned prod deployments.
        # TODO: Promote to prod 'actual' if behaviour tests pass against the versioned environments.
        # TODO: All environments read state from all S3 buckets.
        # TODO: Create jobs to set a stack to draining state which is removed from the DNS pool and all objects synced to a non-draining stack.
        # TODO: Create jobs to prune drained stacks by backing up the the whole stack and then deleting the stack.
        default: 'prod'
        type: choice
        options:
          - test
          - prod
  schedule:
    #- cron: '14 5,11,17,23 * * *'
    - cron: '14 5 * * *'

env:
  environment: ${{ inputs.environment || 'prod' }}

jobs:
  npm-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - run: npm ci || npm install

      - name: test
        id: test
        shell: bash
        run: 'npm test'

  build-base-image:
    uses: ./.github/workflows/âˆž-reusable-build-base-image.yml

  mvn-package:
    runs-on: ubuntu-latest
    needs: [build-base-image]
    outputs:
      jar-filepath: ${{ steps.jar-path.outputs.jarFilepath }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - run: npm ci || npm install

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Load base image from cache
        run: |
          BASE_IMAGE_TAG="${{ needs.build-base-image.outputs.base-image-tag }}"
          echo "Using base image: $BASE_IMAGE_TAG"
          
          # Load base image from GitHub Actions cache efficiently
          docker buildx build \
            --load \
            --cache-from type=gha,scope=base-${{ github.sha }} \
            --cache-from type=gha,scope=base-main \
            --cache-from type=gha,scope=base \
            -t $BASE_IMAGE_TAG \
            -f Dockerfile . || echo "Using fallback build if cache unavailable"

      - name: package
        id: package
        shell: bash
        run: ./mvnw clean package
        env:
          BASE_IMAGE_TAG: ${{ needs.build-base-image.outputs.base-image-tag }}

      - name: set-jar-path
        id: jar-path
        shell: bash
        run: |
          jarPath=$(mvn help:evaluate --quiet --define expression=project.build.directory --define forceStdout)
          jarFilename=$(mvn help:evaluate --quiet --define expression=project.build.finalName --define forceStdout)
          echo "jarFilepath=${jarPath?}/${jarFilename?}.jar" | tee -a "${GITHUB_OUTPUT?}"

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: maven-jar-${{ github.sha }}
          path: ${{ steps.jar-path.outputs.jarFilepath }}
          retention-days: 1

  deploy-to-ci:
    uses: 'antonycc/submit.diyaccounting.co.uk/.github/workflows/deploy-ci-only.yml@main'
    with:
      skipDeploy: 'false'
    secrets:
      HMRC_CLIENT_SECRET: ${{ secrets.HMRC_CLIENT_SECRET }}
      DIY_SUBMIT_GOOGLE_CLIENT_SECRET: ${{ secrets.DIY_SUBMIT_GOOGLE_CLIENT_SECRET }}
      DIY_SUBMIT_TEST_AUTH_PASSWORD: ${{ secrets.DIY_SUBMIT_TEST_AUTH_PASSWORD }}

  upsert-secrets:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'prod' }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v5

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::887764105431:role/submit-github-actions-role
          role-chaining: false
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::887764105431:role/submit-deployment-role
          role-chaining: true
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Write GitHub secret HMRC_CLIENT_SECRET to temp file (keeps out of logs)
        shell: bash
        env:
          GH_SECRET: ${{ secrets.HMRC_CLIENT_SECRET }}
        run: |
          set -euo pipefail
          umask 077
          printf '%s' "$GH_SECRET" > secret.txt
          echo "::add-mask::$(cat secret.txt)"

      - name: Upsert HMRC_CLIENT_SECRET into AWS Secrets Manager
        shell: bash
        env:
          SECRET_NAME: "diy/${{ env.environment}}/submit/hmrc/client_secret"
        run: |
          set -euo pipefail
          if aws secretsmanager describe-secret --secret-id "$SECRET_NAME" >/dev/null 2>&1; then
            aws secretsmanager put-secret-value \
              --secret-id "$SECRET_NAME" \
              --secret-string file://secret.txt
          else
            aws secretsmanager create-secret \
              --name "$SECRET_NAME" \
              --secret-string file://secret.txt \
              --tags Key=managed-by,Value=github-actions Key=repo,Value=${GITHUB_REPOSITORY}
          fi
          shred -u secret.txt

      - name: Write GitHub secret DIY_SUBMIT_GOOGLE_CLIENT_SECRET to temp file (keeps out of logs)
        shell: bash
        env:
          GH_SECRET: ${{ secrets.DIY_SUBMIT_GOOGLE_CLIENT_SECRET }}
        run: |
          set -euo pipefail
          umask 077
          printf '%s' "$GH_SECRET" > secret.txt
          echo "::add-mask::$(cat secret.txt)"

      - name: Upsert DIY_SUBMIT_GOOGLE_CLIENT_SECRET into AWS Secrets Manager
        shell: bash
        env:
          SECRET_NAME: "diy/${{ env.environment}}/submit/google/client_secret"
        run: |
          set -euo pipefail
          if aws secretsmanager describe-secret --secret-id "$SECRET_NAME" >/dev/null 2>&1; then
            aws secretsmanager put-secret-value \
              --secret-id "$SECRET_NAME" \
              --secret-string file://secret.txt
          else
            aws secretsmanager create-secret \
              --name "$SECRET_NAME" \
              --secret-string file://secret.txt \
              --tags Key=managed-by,Value=github-actions Key=repo,Value=${GITHUB_REPOSITORY}
          fi
          shred -u secret.txt

      #- name: Write GitHub secret DIY_SUBMIT_ANTONYCC_CLIENT_SECRET to temp file (keeps out of logs)
      #  shell: bash
      #  env:
      #    GH_SECRET: ${{ secrets.DIY_SUBMIT_ANTONYCC_CLIENT_SECRET }}
      #  run: |
      #    set -euo pipefail
      #    umask 077
      #    printf '%s' "$GH_SECRET" > secret.txt
      #    echo "::add-mask::$(cat secret.txt)"

      #- name: Upsert DIY_SUBMIT_ANTONYCC_CLIENT_SECRET into AWS Secrets Manager
      #  shell: bash
      #  env:
      #    SECRET_NAME: "diy/${{ env.environment}}/submit/antonycc/client_secret"
      #  run: |
      #    set -euo pipefail
      #    if aws secretsmanager describe-secret --secret-id "$SECRET_NAME" >/dev/null 2>&1; then
      #      aws secretsmanager put-secret-value \
      #        --secret-id "$SECRET_NAME" \
      #        --secret-string file://secret.txt
      #    else
      #      aws secretsmanager create-secret \
      #        --name "$SECRET_NAME" \
      #        --secret-string file://secret.txt \
      #        --tags Key=managed-by,Value=github-actions Key=repo,Value=${GITHUB_REPOSITORY}
      #    fi
      #    shred -u secret.txt

      #- name: Write GitHub secret DIY_SUBMIT_AC_COG_CLIENT_SECRET to temp file (keeps out of logs)
      #  shell: bash
      #  env:
      #    GH_SECRET: ${{ secrets.DIY_SUBMIT_AC_COG_CLIENT_SECRET }}
      #  run: |
      #    set -euo pipefail
      #    umask 077
      #    printf '%s' "$GH_SECRET" > secret.txt
      #    echo "::add-mask::$(cat secret.txt)"

      #- name: Upsert DIY_SUBMIT_AC_COG_CLIENT_SECRET into AWS Secrets Manager
      #  shell: bash
      #  env:
      #    SECRET_NAME: "diy/${{ env.environment}}/submit/ac-cog/client_secret"
      #  run: |
      #    set -euo pipefail
      #    if aws secretsmanager describe-secret --secret-id "$SECRET_NAME" >/dev/null 2>&1; then
      #      aws secretsmanager put-secret-value \
      #        --secret-id "$SECRET_NAME" \
      #        --secret-string file://secret.txt
      #    else
      #      aws secretsmanager create-secret \
      #        --name "$SECRET_NAME" \
      #        --secret-string file://secret.txt \
      #        --tags Key=managed-by,Value=github-actions Key=repo,Value=${GITHUB_REPOSITORY}
      #    fi
      #    shred -u secret.txt

  deploy-to-environment:
    needs:
      - npm-test
      - mvn-package
      - deploy-to-ci
      - build-base-image
      - upsert-secrets
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'prod' }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - run: npm install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::887764105431:role/submit-github-actions-role
          role-chaining: false
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      #- run: aws sts get-caller-identity --region eu-west-2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::887764105431:role/submit-deployment-role
          role-chaining: true
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      #- run: aws sts get-caller-identity --region eu-west-2

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Load base image from cache
        run: |
          BASE_IMAGE_TAG="${{ needs.build-base-image.outputs.base-image-tag }}"
          echo "Using base image: $BASE_IMAGE_TAG"
          
          # Load base image from GitHub Actions cache efficiently
          docker buildx build \
            --load \
            --cache-from type=gha,scope=base-${{ github.sha }} \
            --cache-from type=gha,scope=base-main \
            --cache-from type=gha,scope=base \
            -t $BASE_IMAGE_TAG \
            -f Dockerfile . || echo "Using fallback build if cache unavailable"

      - name: Download JAR artifact
        uses: actions/download-artifact@v5
        with:
          name: maven-jar-${{ github.sha }}
          path: target/

      - name: Log built files
        shell: bash
        run: |
          echo "ls -lh target/:"
          ls -lh target/
          echo "du -h target/:"
          du -h target/

      - name: Package Java classes for CDK
        shell: bash
        run: |
          ./mvnw package -Dmaven.compiler.source=17 -Dmaven.compiler.target=17 -DskipTests=true

      - name: set-jar-path
        id: jar-path
        shell: bash
        run: |
          jarPath=$(mvn help:evaluate --quiet --define expression=project.build.directory --define forceStdout)
          jarFilename=$(mvn help:evaluate --quiet --define expression=project.build.finalName --define forceStdout)
          echo "jarFilepath=${jarPath?}/${jarFilename?}.jar" | tee -a "${GITHUB_OUTPUT?}"

      - name: stacks
        id: stacks
        shell: bash
        run: |
          deploy=$(jq -r '.deployStacks' cdk.json | sed 's/SubmitWebStack-dev/SubmitWebStack-${{ env.environment }}/g' | sed 's/SubmitWebStack-[^ ]*//')
          echo "deploy=${deploy?}" | tee -a "${GITHUB_OUTPUT?}"

      - name: log environment and repository variables
        shell: bash
        run: |
          echo "GITHUB_ACTOR: ${{ github.actor }}"
          echo "ENV_NAME: ${{ env.environment }}"
          echo "LOG_S3_OBJECT_EVENT_HANDLER_SOURCE: ${{ steps.jar-path.outputs.jarFilepath }}"
          echo "LOG_GZIPPED_S3_OBJECT_EVENT_HANDLER_SOURCE: ${{ steps.jar-path.outputs.jarFilepath }}"
          echo "CERTIFICATE_ARN: ${{ vars.AWS_CERTIFICATE_ARN }}"
          echo "CLOUD_TRAIL_ENABLED: ${{ vars.AWS_CLOUD_TRAIL_ENABLED }}"
          echo "X_RAY_ENABLED: ${{ vars.AWS_X_RAY_ENABLED }}"
          echo "VERBOSE_LOGGING: ${{ vars.AWS_VERBOSE_LOGGING }}"
          echo "HOSTED_ZONE_ID: ${{ vars.AWS_HOSTED_ZONE_ID }}"
          echo "HOSTED_ZONE_NAME: ${{ vars.AWS_HOSTED_ZONE_NAME }}"

      - name: deploy
        id: deploy
        shell: bash
        run: npx dotenv -e .env.${{ env.environment }} -- ${{ steps.stacks.outputs.deploy }}
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          ENV_NAME: ${{ env.environment }}
          LOG_S3_OBJECT_EVENT_HANDLER_SOURCE: ${{ steps.jar-path.outputs.jarFilepath }}
          LOG_GZIPPED_S3_OBJECT_EVENT_HANDLER_SOURCE: ${{ steps.jar-path.outputs.jarFilepath }}
          CERTIFICATE_ARN: ${{ vars.AWS_CERTIFICATE_ARN }}
          CLOUD_TRAIL_ENABLED: ${{ vars.AWS_CLOUD_TRAIL_ENABLED }}
          X_RAY_ENABLED: ${{ vars.AWS_X_RAY_ENABLED }}
          VERBOSE_LOGGING: ${{ vars.AWS_VERBOSE_LOGGING }}
          HOSTED_ZONE_ID: ${{ vars.AWS_HOSTED_ZONE_ID }}
          HOSTED_ZONE_NAME: ${{ vars.AWS_HOSTED_ZONE_NAME }}
          DIY_SUBMIT_HMRC_CLIENT_SECRET_ARN: "arn:aws:secretsmanager:eu-west-2:887764105431:secret:diy/${{ env.environment}}/submit/hmrc/client_secret"
          DIY_SUBMIT_GOOGLE_CLIENT_SECRET_ARN: "arn:aws:secretsmanager:eu-west-2:887764105431:secret:diy/${{ env.environment}}/submit/google/client_secret"
          COMMIT_HASH: ${{ github.sha }}
          BASE_IMAGE_TAG: ${{ needs.build-base-image.outputs.base-image-tag }}

  push-to-ecr:
    needs:
      - build-base-image
      - deploy-to-environment
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'prod' }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::887764105431:role/submit-github-actions-role
          role-chaining: false
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::887764105431:role/submit-deployment-role
          role-chaining: true
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Load base image from cache
        run: |
          BASE_IMAGE_TAG="${{ needs.build-base-image.outputs.base-image-tag }}"
          echo "Using base image: $BASE_IMAGE_TAG"
          
          # Load base image from GitHub Actions cache efficiently
          docker buildx build \
            --load \
            --cache-from type=gha,scope=base-${{ github.sha }} \
            --cache-from type=gha,scope=base-main \
            --cache-from type=gha,scope=base \
            -t $BASE_IMAGE_TAG \
            -f Dockerfile . || echo "Using fallback build if cache unavailable"

      - name: Get ECR repository URI
        id: ecr-uri
        shell: bash
        run: |
          STACK_NAME="SubmitDevStack-${{ env.environment }}"
          ECR_URI=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`EcrRepositoryUri`].OutputValue' \
            --output text)
          echo "ecr-uri=${ECR_URI}" | tee -a "${GITHUB_OUTPUT}"
          echo "ECR Repository URI: $ECR_URI"

      - name: Login to Amazon ECR
        shell: bash
        run: |
          aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${{ steps.ecr-uri.outputs.ecr-uri }}

      - name: Tag and push Docker image to ECR
        shell: bash
        run: |
          BASE_IMAGE_TAG="${{ needs.build-base-image.outputs.base-image-tag }}"
          ECR_URI="${{ steps.ecr-uri.outputs.ecr-uri }}"
          COMMIT_HASH="${{ github.sha }}"
          
          # Tag with commit hash and latest
          docker tag $BASE_IMAGE_TAG $ECR_URI:$COMMIT_HASH
          docker tag $BASE_IMAGE_TAG $ECR_URI:latest
          
          # Push both tags
          docker push $ECR_URI:$COMMIT_HASH
          docker push $ECR_URI:latest
          
          echo "Successfully pushed Docker image to ECR:"
          echo "  $ECR_URI:$COMMIT_HASH"
          echo "  $ECR_URI:latest"
