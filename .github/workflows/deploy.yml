# .github/workflows/deploy.yml

name: deploy
concurrency: ngrok
run-name: "deploy [${{ inputs.environment || 'prod' }}] [${{ github.ref_name }}]"

on:
  push:
    branches:
      - main
    paths:
      - 'infra/**'
      - 'cdk.json'
      - 'package.json'
      - 'package-lock.json'
      - 'app/**'
      - 'web/public/**'
      - '.github/workflows/deploy.yml'
      - '**/pom.xml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        # TODO: Deploy to versioned target environments, e.g. 'ci, prod-<git hash>'.
        # TODO: Create a prod 'actual' domain which routes to a pool of versioned prod deployments.
        # TODO: Promote to prod 'actual' if behaviour tests pass against the versioned environments.
        # TODO: All environments read state from all S3 buckets.
        # TODO: Create jobs to set a stack to draining state which is removed from the DNS pool and all objects synced to a non-draining stack.
        # TODO: Create jobs to prune drained stacks by backing up the the whole stack and then deleting the stack.
        default: 'prod'
        type: choice
        options:
          - test
          - prod
  schedule:
    - cron: '14 5,11,17,23 * * *'

env:
  environment: ${{ inputs.environment || 'prod' }}

jobs:
  npm-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - run: npm ci || npm install

      - name: test
        id: test
        shell: bash
        run: 'npm test'

  npm-behaviour-test-local:
    name: 'npm behaviour test local'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - run: npm ci || npm install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Authenticate ngrok
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          npx ngrok config add-authtoken "${NGROK_AUTH_TOKEN?}"

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}

      - run: npx playwright install chromium --with-deps

      - run: npm run test:behaviour
        env:
          DIY_SUBMIT_HMRC_CLIENT_SECRET: ${{ secrets.HMRC_CLIENT_SECRET }}
          DIY_SUBMIT_GOOGLE_CLIENT_SECRET: ${{ secrets.DIY_SUBMIT_GOOGLE_CLIENT_SECRET }}

      - name: Convert Playwright video to MP4
        if: ${{ !cancelled() }}
        run: |
          find target/behaviour-test-results -type f -name '*.webm' -exec mv -v "{}" target/behaviour-test-results/video.webm \;
          npm run convert:video -- --in target/behaviour-test-results/video.webm --out target/behaviour-test-results/video.mp4

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: test-results-behaviour-local
          path: "target/behaviour-test-results/"
          retention-days: 30

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: test-reports-behaviour-local
          path: "target/test-reports/"
          retention-days: 30

  build-base-image:
    runs-on: ubuntu-latest
    outputs:
      base-image-tag: ${{ steps.build.outputs.base-image-tag }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
      
      - name: Build base image locally
        id: build
        run: |
          BASE_IMAGE_TAG="submit-base:${{ github.sha }}"
          
          # Build the base image using your root Dockerfile
          docker buildx build \
            --load \
            --cache-from type=gha,scope=base \
            --cache-to type=gha,mode=max,scope=base \
            -t $BASE_IMAGE_TAG \
            -f Dockerfile .
          
          echo "base-image-tag=$BASE_IMAGE_TAG" >> $GITHUB_OUTPUT
          
          # Verify the image was built
          docker images | grep submit-base

  mvn-package:
    runs-on: ubuntu-latest
    needs: [build-base-image]
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - run: npm ci || npm install

      - uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 21
          cache: 'maven'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Build base image locally (for tests)
        run: |
          BASE_IMAGE_TAG="submit-base:${{ github.sha }}"
          
          # Build the base image using your root Dockerfile
          docker buildx build \
            --load \
            --cache-from type=gha,scope=base \
            --cache-to type=gha,mode=max,scope=base \
            -t $BASE_IMAGE_TAG \
            -f Dockerfile .

      - name: package
        id: package
        shell: bash
        run: ./mvnw clean package
        env:
          BASE_IMAGE_TAG: ${{ needs.build-base-image.outputs.base-image-tag }}

  deploy-to-ci:
    uses: 'antonycc/submit.diyaccounting.co.uk/.github/workflows/deploy-ci-only.yml@main'
    with:
      skipDeploy: 'false'
    secrets:
      HMRC_CLIENT_SECRET: ${{ secrets.HMRC_CLIENT_SECRET }}

  deploy-to-environment:
    needs:
      - npm-test
      - npm-behaviour-test-local
      - mvn-package
      - deploy-to-ci
      - build-base-image
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'prod' }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - run: npm ci --production

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::887764105431:role/submit-github-actions-role
          role-chaining: false
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      #- run: aws sts get-caller-identity --region eu-west-2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::887764105431:role/submit-deployment-role
          role-chaining: true
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      #- run: aws sts get-caller-identity --region eu-west-2

      - uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 21
          cache: 'maven'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Build base image locally (for deployment)
        run: |
          BASE_IMAGE_TAG="submit-base:${{ github.sha }}"
          
          # Build the base image using your root Dockerfile
          docker buildx build \
            --load \
            --cache-from type=gha,scope=base \
            --cache-to type=gha,mode=max,scope=base \
            -t $BASE_IMAGE_TAG \
            -f Dockerfile .

      #- name: download-dependencies
      #  id: download-dependencies
      #  shell: bash
      #  run: ./mvnw --batch-mode --quiet dependency:go-offline > /dev/null 2>&1

      - name: package
        id: package
        shell: bash
        run: ./mvnw clean package -DskipTests

      - name: Log built files
        shell: bash
        run: |
          echo "ls -lh target/:"
          ls -lh target/
          echo "du -h target/:"
          du -h target/

      - name: set-jar-path
        id: jar-path
        shell: bash
        run: |
          jarPath=$(mvn help:evaluate --quiet --define expression=project.build.directory --define forceStdout)
          jarFilename=$(mvn help:evaluate --quiet --define expression=project.build.finalName --define forceStdout)
          echo "jarFilepath=${jarPath?}/${jarFilename?}.jar" | tee -a "${GITHUB_OUTPUT?}"

      - name: stacks
        id: stacks
        shell: bash
        run: |
          deploy=$(jq -r '.deployStacks' cdk.json | sed 's/SubmitWebStack-dev/SubmitWebStack-${{ env.environment }}/g')
          echo "deploy=${deploy?}" | tee -a "${GITHUB_OUTPUT?}"

      - name: log environment and repository variables
        shell: bash
        run: |
          echo "GITHUB_ACTOR: ${{ github.actor }}"
          echo "ENV_NAME: ${{ env.environment }}"
          echo "LOG_S3_OBJECT_EVENT_HANDLER_SOURCE: ${{ steps.jar-path.outputs.jarFilepath }}"
          echo "LOG_GZIPPED_S3_OBJECT_EVENT_HANDLER_SOURCE: ${{ steps.jar-path.outputs.jarFilepath }}"
          echo "CERTIFICATE_ARN: ${{ vars.AWS_CERTIFICATE_ARN }}"
          echo "CLOUD_TRAIL_ENABLED: ${{ vars.AWS_CLOUD_TRAIL_ENABLED }}"
          echo "X_RAY_ENABLED: ${{ vars.AWS_X_RAY_ENABLED }}"
          echo "VERBOSE_LOGGING: ${{ vars.AWS_VERBOSE_LOGGING }}"
          echo "HOSTED_ZONE_ID: ${{ vars.AWS_HOSTED_ZONE_ID }}"
          echo "HOSTED_ZONE_NAME: ${{ vars.AWS_HOSTED_ZONE_NAME }}"
          echo "DIY_SUBMIT_HMRC_CLIENT_SECRET: ${{ secrets.HMRC_CLIENT_SECRET }}"
          echo "DIY_SUBMIT_GOOGLE_CLIENT_SECRET: ${{ secrets.DIY_SUBMIT_GOOGLE_CLIENT_SECRET }}"

      - name: deploy
        id: deploy
        shell: bash
        run: npx dotenv -e .env.${{ env.environment }} -- ${{ steps.stacks.outputs.deploy }}
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          ENV_NAME: ${{ env.environment }}
          LOG_S3_OBJECT_EVENT_HANDLER_SOURCE: ${{ steps.jar-path.outputs.jarFilepath }}
          LOG_GZIPPED_S3_OBJECT_EVENT_HANDLER_SOURCE: ${{ steps.jar-path.outputs.jarFilepath }}
          CERTIFICATE_ARN: ${{ vars.AWS_CERTIFICATE_ARN }}
          CLOUD_TRAIL_ENABLED: ${{ vars.AWS_CLOUD_TRAIL_ENABLED }}
          X_RAY_ENABLED: ${{ vars.AWS_X_RAY_ENABLED }}
          VERBOSE_LOGGING: ${{ vars.AWS_VERBOSE_LOGGING }}
          HOSTED_ZONE_ID: ${{ vars.AWS_HOSTED_ZONE_ID }}
          HOSTED_ZONE_NAME: ${{ vars.AWS_HOSTED_ZONE_NAME }}
          DIY_SUBMIT_HMRC_CLIENT_SECRET: ${{ secrets.HMRC_CLIENT_SECRET }}
          DIY_SUBMIT_GOOGLE_CLIENT_SECRET: ${{ secrets.DIY_SUBMIT_GOOGLE_CLIENT_SECRET }}
          COMMIT_HASH: ${{ github.sha }}
          BASE_IMAGE_TAG: ${{ needs.build-base-image.outputs.base-image-tag }}

  npm-behaviour-test-environment:
    needs:
      - npm-test
      - npm-behaviour-test-local
      - mvn-package
      - deploy-to-environment
    name: 'npm behaviour test'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - run: npm ci || npm install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}

      - run: npx playwright install chromium --with-deps

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::887764105431:role/submit-github-actions-role
          role-chaining: false
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      #- run: aws sts get-caller-identity --region eu-west-2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::887764105431:role/submit-deployment-role
          role-chaining: true
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      #- run: aws sts get-caller-identity --region eu-west-2

      - run: npx dotenv -e '.env.${{ env.environment }}' -- npm run test:behaviour
        if: env.environment == 'proxy'
        env:
          DIY_SUBMIT_HMRC_CLIENT_SECRET: ${{ secrets.HMRC_CLIENT_SECRET }}
          DIY_SUBMIT_GOOGLE_CLIENT_SECRET: ${{ secrets.DIY_SUBMIT_GOOGLE_CLIENT_SECRET }}
      - run: cp '.env.${{ env.environment }}' '.env.proxy' ; npx dotenv -e '.env.${{ env.environment }}' -- npm run test:behaviour
        if: env.environment != 'proxy'
        env:
          DIY_SUBMIT_HMRC_CLIENT_SECRET: ${{ secrets.HMRC_CLIENT_SECRET }}
          DIY_SUBMIT_GOOGLE_CLIENT_SECRET: ${{ secrets.DIY_SUBMIT_GOOGLE_CLIENT_SECRET }}

      - name: Convert Playwright video to MP4
        if: ${{ !cancelled() }}
        run: |
          find target/behaviour-test-results -type f -name '*.webm' -exec mv -v "{}" target/behaviour-test-results/video.webm \;
          npm run convert:video -- --in target/behaviour-test-results/video.webm --out target/behaviour-test-results/video.mp4

      - name: Upload converted video
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: "test-results-behaviour-${{ env.environment }}-mp4"
          path: "target/behaviour-test-results/video.mp4"
          retention-days: 30
          compression-level: '0'

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: "test-results-behaviour-${{ env.environment }}"
          path: "target/behaviour-test-results/"
          retention-days: 30

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: "test-results-${{ env.environment }}"
          path: "target/test-results/"
          retention-days: 30

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: "test-reports-behaviour-${{ env.environment }}"
          path: "target/test-reports/"
          retention-days: 30

