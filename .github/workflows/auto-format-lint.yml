---
# .github/workflows/auto-format-lint.yml

name: Auto Format and Lint
concurrency:
  group: 'auto-format-lint-${{ github.ref_name }}'
  cancel-in-progress: true
run-name: >
  Auto Format and Lint [${{ github.ref_name }}]
  [${{ github.event.head_commit.message }}]

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (no changes made)'
        required: false
        default: false
        type: boolean
      target_branch:
        description: 'Target branch to create PR against'
        required: false
        default: 'main'
        type: string
  schedule:
    # Run nightly at 4:07 AM UTC (optimal time for GitHub Actions)
    - cron: '7 4 * * *'

env:
  # Use the target branch from input, or 'main' if not specified
  TARGET_BRANCH: ${{ inputs.target_branch || 'main' }}
  DRY_RUN: ${{ inputs.dry_run || 'false' }}

jobs:
  auto-format-lint:
    name: 'Auto Format and Lint'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Install dependencies
        run: npm ci || npm install --ignore-engines

      - name: Create feature branch
        if: env.DRY_RUN == 'false'
        run: |
          BRANCH_NAME="auto-format-lint/$(date +%Y%m%d_%H%M%S)"
          echo "FEATURE_BRANCH=$BRANCH_NAME" >> $GITHUB_ENV
          git checkout -b "$BRANCH_NAME"
          echo "Created branch: $BRANCH_NAME"

      - name: Check current state
        run: |
          echo "Checking current formatting and linting state..."
          echo "::group::Prettier Check"
          npm run formatting:js || echo "Prettier issues found"
          echo "::endgroup::"

          echo "::group::Java Formatting Check"
          npm run formatting:java || echo "Java formatting issues found"
          echo "::endgroup::"

          echo "::group::ESLint Check"
          npm run linting || echo "ESLint issues found"
          echo "::endgroup::"

      - name: Apply formatting fixes
        run: |
          echo "Applying formatting fixes..."

          echo "::group::Prettier Fix"
          npm run formatting:js-fix || echo "Prettier fix completed"
          echo "::endgroup::"

          echo "::group::Java Formatting Fix"
          npm run formatting:java-fix || echo "Java formatting fix completed"
          echo "::endgroup::"

      - name: Apply linting fixes
        run: |
          echo "Applying ESLint auto-fixes..."
          npm run linting-fix || echo "ESLint auto-fix completed"

      - name: Install GitHub CLI if not available
        run: |
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg \
              | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) \
              signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] \
              https://cli.github.com/packages stable main" \
              | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          fi

      - name: Install GitHub Copilot CLI extension
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Installing GitHub Copilot CLI extension..."
          gh extension install github/gh-copilot \
            || echo "Copilot extension already installed or failed to install"

      - name: Check remaining linting issues
        id: remaining_issues
        run: |
          echo "Checking for remaining linting issues..."
          LINT_OUTPUT=$(npm run linting 2>&1 || true)
          echo "LINT_OUTPUT<<EOF" >> $GITHUB_OUTPUT
          echo "$LINT_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Count remaining issues
          ISSUE_COUNT=$(echo "$LINT_OUTPUT" | grep -E "✖ [0-9]+ problems" \
            | grep -o -E "[0-9]+" | head -1 || echo "0")
          echo "ISSUE_COUNT=$ISSUE_COUNT" >> $GITHUB_OUTPUT
          echo "Found $ISSUE_COUNT remaining issues"

      - name: Use Copilot to suggest fixes for remaining issues
        if: steps.remaining_issues.outputs.ISSUE_COUNT != '0'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Using GitHub Copilot to suggest fixes for remaining ESLint issues..."

          # Create a summary of issues for Copilot
          cat > copilot_prompt.txt << 'EOF'
          I have the following ESLint issues in my JavaScript/TypeScript project:

          ${{ steps.remaining_issues.outputs.LINT_OUTPUT }}

          Please suggest specific code fixes for these issues. Focus on:
          1. Removing unused imports and variables
          2. Handling ignored exceptions properly
          3. Fixing security issues
          4. Improving code quality

          Provide the fixes as specific file changes that can be applied
          automatically.
          EOF

          # Try to get suggestions from Copilot CLI (if available)
          if gh copilot suggest --help &> /dev/null; then
            echo "Getting suggestions from GitHub Copilot..."
            gh copilot suggest "$(cat copilot_prompt.txt)" \
              > copilot_suggestions.txt || echo "Copilot suggestions failed"

            if [ -f copilot_suggestions.txt ] \
               && [ -s copilot_suggestions.txt ]; then
              echo "::group::Copilot Suggestions"
              cat copilot_suggestions.txt
              echo "::endgroup::"
            fi
          else
            echo "GitHub Copilot CLI not available or not configured"
          fi

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet; then
            echo "HAS_CHANGES=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          else
            echo "HAS_CHANGES=true" >> $GITHUB_OUTPUT
            echo "Changes detected"
            echo "::group::Changes Summary"
            git diff --stat
            echo "::endgroup::"
          fi

      - name: Commit changes
        if: >
          steps.changes.outputs.HAS_CHANGES == 'true' &&
          env.DRY_RUN == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Auto-Format"

          git add .
          git commit -m "Auto-format and lint fixes

          - Applied Prettier formatting for JS, HTML, CSS, JSON
          - Applied Java formatting with Spotless
          - Applied ESLint auto-fixes
          - Remaining issues: ${{ steps.remaining_issues.outputs.ISSUE_COUNT }}

          Co-authored-by: github-actions[bot] \
            <41898282+github-actions[bot]@users.noreply.github.com>"

      - name: Push changes and create PR
        if: >
          steps.changes.outputs.HAS_CHANGES == 'true' &&
          env.DRY_RUN == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin "$FEATURE_BRANCH"

          # Create PR using GitHub CLI
          PR_BODY="## Automated Formatting and Linting Fixes

          This PR contains automated formatting and linting fixes applied
          by the auto-format-lint workflow.

          ### Changes Applied
          - ✅ Prettier formatting for JavaScript, HTML, CSS, and JSON files
          - ✅ Java formatting with Google Java Format via Spotless
          - ✅ ESLint auto-fixes where possible

          ### Remaining Issues
          - **${{ steps.remaining_issues.outputs.ISSUE_COUNT }}**
            ESLint issues still require manual attention

          ### Manual Review Required
          Please review the following files for any issues that need manual
          fixing:

          \`\`\`
          ${{ steps.remaining_issues.outputs.LINT_OUTPUT }}
          \`\`\`

          ### Workflow Information
          - **Triggered by**: ${{ github.event_name }}
          - **Branch**: ${{ env.TARGET_BRANCH }}
          - **Timestamp**: $(date -u)
          - **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          ---
          *This PR was automatically created by the Auto Format and Lint
          workflow*"

          gh pr create \
            --title "Auto-format and lint fixes $(date +%Y-%m-%d)" \
            --body "$PR_BODY" \
            --base "$TARGET_BRANCH" \
            --head "$FEATURE_BRANCH" \
            --label "automated,formatting,linting" \
            --assignee "${{ github.actor }}"

          echo "PR created successfully"

      - name: Dry run summary
        if: env.DRY_RUN == 'true'
        run: |
          echo "::notice::DRY RUN MODE - No changes were committed or pushed"
          echo "::group::Summary"
          echo "Would have made changes: ${{ steps.changes.outputs.HAS_CHANGES }}"
          echo "Remaining lint issues: ${{ steps.remaining_issues.outputs.ISSUE_COUNT }}"
          if [ "${{ steps.changes.outputs.HAS_CHANGES }}" == "true" ]; then
            echo "Changes that would be committed:"
            git diff --stat
          fi
          echo "::endgroup::"

      - name: Upload logs and suggestions
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: auto-format-lint-logs-${{ github.run_id }}
          path: |
            copilot_*.txt
          retention-days: 7
