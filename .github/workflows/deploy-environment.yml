name: deploy environment (ApexStack)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - prod
          - ci
        default: ci

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '22'
  ACTIONS_ROLE_ARN: 'arn:aws:iam::887764105431:role/submit-github-actions-role'
  DEPLOY_ROLE_ARN:  'arn:aws:iam::887764105431:role/submit-deployment-role'
  AWS_REGION: 'eu-west-2'
  AWS_ACCOUNT_ID: '887764105431'
  skipDeploy: ${{ inputs.skipDeploy || 'false' }}
  GITHUB_ACTOR: ${{ github.actor }}
  CERTIFICATE_ARN: ${{ vars.AWS_CERTIFICATE_ARN }}
  CLOUD_TRAIL_ENABLED: ${{ vars.AWS_CLOUD_TRAIL_ENABLED }}
  HOSTED_ZONE_ID: ${{ vars.AWS_HOSTED_ZONE_ID }}
  HOSTED_ZONE_NAME: ${{ vars.AWS_HOSTED_ZONE_NAME }}
  COMMIT_HASH: ${{ github.sha }}
  AUTH_CERTIFICATE_ARN: 'arn:aws:acm:us-east-1:887764105431:certificate/59a025f9-3620-43cd-9b2c-522f385ee223'

jobs:
  names:
    name: names
    env: ${{ github.event.inputs.environment }}
    runs-on: ubuntu-24.04
    outputs:
      environment-name: ${{ steps.out.outputs.environment_name }}
    steps:
      - id: out
        run: |
          echo "environment_name=${{ github.event.inputs.environment }}" >> "$GITHUB_OUTPUT"

  deploy-apex:
    name: deploy apex
    needs:
      - names
    runs-on: ubuntu-24.04
    # bind to a GitHub Environment so you can use env-specific vars/secrets
    environment: ${{ needs.names.outputs.environment-name }}
    permissions:
      id-token: write   # for OIDC
      contents: read
    steps:

      - name: Configure AWS role via GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: false
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Node dependencies
        run: npm ci

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Deploy ApexStack
        run: |
          ./mvnw --errors clean package -DskipTests -Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
          && ./cdk-environment \
          && npx cdk deploy \
            ${{ needs.names.outputs.environment-name }}-ApexStack \
            --require-approval never \
            --ci true \
            --concurrency 4 \
            --asset-parallelism
