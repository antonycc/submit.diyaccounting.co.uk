# .github/workflows/deploy-ci-only.yml

name: deploy-ci-only
concurrency: deploy-ci
run-name: "deploy ci only [${{ github.ref_name }}] (skipDeploy = [${{ inputs.skipDeploy || 'false' }}])"

on:
  push:
    branches:
      - '**'
      - '!main'
      - '!gh_pages'
    paths:
      - '.env.ci'
      - '.env.proxy'
      - 'infra/**'
      - 'app/**'
      - 'web/**'
      - 'cdk.json'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/deploy-ci-only.yml'
      - '**/pom.xml'
  workflow_call:
    inputs:
      skipDeploy:
        description: 'Skip deployment step'
        type: string
        required: false
        default: 'false'
    secrets:
      HMRC_CLIENT_SECRET:
        required: true
      DIY_SUBMIT_GOOGLE_CLIENT_SECRET:
        required: true
  workflow_dispatch:
    inputs:
      skipDeploy:
        description: 'Skip deployment step'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
  #schedule:
  #  - cron: '14 2,8,14,20 * * *'

env:
  skipDeploy: ${{ inputs.skipDeploy || 'false' }}

jobs:

  upsert-secrets:
    runs-on: ubuntu-latest
    environment: ci
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v5

      - name: Configure AWS Credentials
        if: ${{ env.skipDeploy != 'true' }}
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: arn:aws:iam::887764105431:role/submit-github-actions-role
          role-chaining: false
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Configure AWS Credentials
        if: ${{ env.skipDeploy != 'true' }}
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: arn:aws:iam::887764105431:role/submit-deployment-role
          role-chaining: true
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Write GitHub secret HMRC_CLIENT_SECRET to temp file (keeps out of logs)
        if: ${{ env.skipDeploy != 'true' }}
        shell: bash
        env:
          GH_SECRET: ${{ secrets.HMRC_CLIENT_SECRET }}
        run: |
          set -euo pipefail
          umask 077
          printf '%s' "$GH_SECRET" > secret.txt
          echo "::add-mask::$(cat secret.txt)"

      - name: Upsert HMRC_CLIENT_SECRET into AWS Secrets Manager
        if: ${{ env.skipDeploy != 'true' }}
        shell: bash
        env:
          SECRET_NAME: "diy/ci/submit/hmrc/client_secret"
        run: |
          set -euo pipefail
          if aws secretsmanager describe-secret --secret-id "$SECRET_NAME" >/dev/null 2>&1; then
            aws secretsmanager put-secret-value \
              --secret-id "$SECRET_NAME" \
              --secret-string file://secret.txt
          else
            aws secretsmanager create-secret \
              --name "$SECRET_NAME" \
              --secret-string file://secret.txt \
              --tags Key=managed-by,Value=github-actions Key=repo,Value=${GITHUB_REPOSITORY}
          fi
          shred -u secret.txt

      - name: Write GitHub secret DIY_SUBMIT_GOOGLE_CLIENT_SECRET to temp file
        if: ${{ env.skipDeploy != 'true' }}
        shell: bash
        env:
          GH_SECRET: ${{ secrets.DIY_SUBMIT_GOOGLE_CLIENT_SECRET }}
        run: |
          set -euo pipefail
          umask 077
          printf '%s' "$GH_SECRET" > secret.txt
          echo "::add-mask::$(cat secret.txt)"

      - name: Upsert DIY_SUBMIT_GOOGLE_CLIENT_SECRET into AWS Secrets Manager
        if: ${{ env.skipDeploy != 'true' }}
        shell: bash
        env:
          SECRET_NAME: "diy/ci/submit/google/client_secret"
        run: |
          set -euo pipefail
          if aws secretsmanager describe-secret --secret-id "$SECRET_NAME" >/dev/null 2>&1; then
            aws secretsmanager put-secret-value \
              --secret-id "$SECRET_NAME" \
              --secret-string file://secret.txt
          else
            aws secretsmanager create-secret \
              --name "$SECRET_NAME" \
              --secret-string file://secret.txt \
              --tags Key=managed-by,Value=github-actions Key=repo,Value=${GITHUB_REPOSITORY}
          fi
          shred -u secret.txt

  deploy:
    needs:
      - upsert-secrets
    name: 'deploy'
    runs-on: ubuntu-latest
    environment: 'ci'
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: 'npm'

      - run: npm install

      - uses: actions/setup-java@v5
        if: ${{ env.skipDeploy != 'true' }}
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Package Java classes for CDK
        id: package
        if: ${{ env.skipDeploy != 'true' }}
        shell: bash
        run: |
          ./mvnw package -Dmaven.compiler.source=17 -Dmaven.compiler.target=17 -DskipTests=true
        env:
          BASE_IMAGE_TAG: ${{ needs.build-base-image.outputs.base-image-tag }}

      - name: set-jar-path
        id: jar-path
        if: ${{ env.skipDeploy != 'true' }}
        shell: bash
        run: |
          jarPath=$(mvn help:evaluate --quiet --define expression=project.build.directory --define forceStdout)
          jarFilename=$(mvn help:evaluate --quiet --define expression=project.build.finalName --define forceStdout)
          echo "jarFilepath=${jarPath?}/${jarFilename?}.jar" | tee -a "${GITHUB_OUTPUT?}"

      - name: Configure AWS Credentials
        if: ${{ env.skipDeploy != 'true' }}
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: arn:aws:iam::887764105431:role/submit-github-actions-role
          role-chaining: false
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Configure AWS Credentials
        if: ${{ env.skipDeploy != 'true' }}
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: arn:aws:iam::887764105431:role/submit-deployment-role
          role-chaining: true
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: deployObservability
        if: ${{ env.skipDeploy != 'true' }}
        id: deployObservability
        shell: bash
        run: npx dotenv -e .env.ci -- npx cdk deploy SubmitObservabilityStack-ci --exclusively --require-approval never --ci true --verbose --strict --validation
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          ENV_NAME: 'ci'

      - name: deployDev
        if: ${{ env.skipDeploy != 'true' }}
        id: deployDev
        shell: bash
        run: npx dotenv -e .env.ci -- npx cdk deploy SubmitDevStack-ci --exclusively --require-approval never --ci true --verbose --strict --validation
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          ENV_NAME: 'ci'

      - name: deployIdentity
        if: ${{ env.skipDeploy != 'true' }}
        id: deployIdentity
        shell: bash
        run: npx dotenv -e .env.ci -- npx cdk deploy SubmitIdentityStack-ci --exclusively --require-approval never --ci true --verbose --strict --validation
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          ENV_NAME: 'ci'
          BASE_IMAGE_TAG: ${{ needs.build-base-image.outputs.base-image-tag }}
          CLOUD_TRAIL_ENABLED: ${{ vars.AWS_CLOUD_TRAIL_ENABLED }}
          X_RAY_ENABLED: ${{ vars.AWS_X_RAY_ENABLED }}
          VERBOSE_LOGGING: ${{ vars.AWS_VERBOSE_LOGGING }}
          HOSTED_ZONE_ID: ${{ vars.AWS_HOSTED_ZONE_ID }}
          HOSTED_ZONE_NAME: ${{ vars.AWS_HOSTED_ZONE_NAME }}
          DIY_SUBMIT_GOOGLE_CLIENT_SECRET_ARN: 'arn:aws:secretsmanager:eu-west-2:887764105431:secret:diy/ci/submit/google/client_secret'
          AUTH_CERTIFICATE_ARN: 'arn:aws:acm:us-east-1:887764105431:certificate/59a025f9-3620-43cd-9b2c-522f385ee223'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Setup image tag
        id: image-tag
        run: |
          BASE_IMAGE_TAG="submit-base:${{ github.sha }}"
          echo "base-image-tag=$BASE_IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Building/loading base image with tag: $BASE_IMAGE_TAG"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Build base image
        id: build
        run: |
          docker buildx build \
            --load \
            -t "${{ steps.image-tag.outputs.base-image-tag }}" \
            -f Dockerfile .

      - name: Get ECR repository URI
        id: ecr-uri
        shell: bash
        run: |
          STACK_NAME="SubmitDevStack-ci"
          ECR_URI=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`EcrRepositoryUri`].OutputValue' \
            --output text)
          echo "ecr-uri=${ECR_URI}" | tee -a "${GITHUB_OUTPUT}"
          echo "ECR Repository URI: $ECR_URI"

      - name: Login to Amazon ECR
        shell: bash
        run: |
          aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${{ steps.ecr-uri.outputs.ecr-uri }}

      - name: Tag and push Docker image to ECR
        shell: bash
        run: |
          BASE_IMAGE_TAG="${{ steps.image-tag.outputs.base-image-tag }}"
          ECR_URI="${{ steps.ecr-uri.outputs.ecr-uri }}"
          COMMIT_HASH="${{ github.sha }}"

          # Tag with commit hash and latest
          docker tag $BASE_IMAGE_TAG $ECR_URI:$COMMIT_HASH
          docker tag $BASE_IMAGE_TAG $ECR_URI:latest

          # Push both tags
          docker push $ECR_URI:$COMMIT_HASH
          docker push $ECR_URI:latest

          echo "Successfully pushed Docker image to ECR:"
          echo "  $ECR_URI:$COMMIT_HASH"
          echo "  $ECR_URI:latest"

      - name: deployApplication
        if: ${{ env.skipDeploy != 'true' }}
        id: deployApplication
        shell: bash
        run: npx dotenv -e .env.ci -- npx cdk deploy SubmitApplicationStack-ci --exclusively --require-approval never --ci true --verbose --strict --validation
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          ENV_NAME: 'ci'
          CLOUD_TRAIL_ENABLED: ${{ vars.AWS_CLOUD_TRAIL_ENABLED }}
          X_RAY_ENABLED: ${{ vars.AWS_X_RAY_ENABLED }}
          VERBOSE_LOGGING: ${{ vars.AWS_VERBOSE_LOGGING }}
          HOSTED_ZONE_ID: ${{ vars.AWS_HOSTED_ZONE_ID }}
          HOSTED_ZONE_NAME: ${{ vars.AWS_HOSTED_ZONE_NAME }}
          DIY_SUBMIT_HMRC_CLIENT_SECRET_ARN: 'arn:aws:secretsmanager:eu-west-2:887764105431:secret:diy/ci/submit/hmrc/client_secret'
          DIY_SUBMIT_GOOGLE_CLIENT_SECRET_ARN: 'arn:aws:secretsmanager:eu-west-2:887764105431:secret:diy/ci/submit/google/client_secret'
          BASE_IMAGE_TAG: ${{ steps.ecr-uri.outputs.ecr-uri }}:${{ github.sha }}

      - name: deployWeb
        if: ${{ env.skipDeploy != 'true' }}
        id: deployWeb
        shell: bash
        run: npx dotenv -e .env.ci -- npx cdk deploy SubmitWebStack-ci --exclusively --require-approval never --ci true --verbose --strict --validation
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          ENV_NAME: 'ci'
          LOG_S3_OBJECT_EVENT_HANDLER_SOURCE: ${{ steps.jar-path.outputs.jarFilepath }}
          LOG_GZIPPED_S3_OBJECT_EVENT_HANDLER_SOURCE: ${{ steps.jar-path.outputs.jarFilepath }}
          CERTIFICATE_ARN: ${{ vars.AWS_CERTIFICATE_ARN }}
          CLOUD_TRAIL_ENABLED: ${{ vars.AWS_CLOUD_TRAIL_ENABLED }}
          X_RAY_ENABLED: ${{ vars.AWS_X_RAY_ENABLED }}
          VERBOSE_LOGGING: ${{ vars.AWS_VERBOSE_LOGGING }}
          HOSTED_ZONE_ID: ${{ vars.AWS_HOSTED_ZONE_ID }}
          HOSTED_ZONE_NAME: ${{ vars.AWS_HOSTED_ZONE_NAME }}
          COMMIT_HASH: ${{ github.sha }}
          BASE_IMAGE_TAG: ${{ steps.ecr-uri.outputs.ecr-uri }}:${{ github.sha }}

  npm-behaviour-test-ci:
    needs:
      - deploy
    name: 'npm behaviour test ci'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: 'npm'

      - run: npm ci || npm install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}

      - run: npx playwright install chromium --with-deps

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: arn:aws:iam::887764105431:role/submit-github-actions-role
          role-chaining: false
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Assume user provisioning role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: arn:aws:iam::403027849202:role/oidc-external-user-provisioning-role
          role-chaining: true
          aws-region: us-east-1
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Create test username and a test password
        id: uuid
        run: |
          TEST_USERNAME=$(uuidgen | tr '[:upper:]' '[:lower:]')
          TEST_PASSWORD=$(uuidgen | tr '[:upper:]' '[:lower:]')
          echo "TEST_USERNAME=${TEST_USERNAME?}"
          echo "TEST_PASSWORD=${TEST_PASSWORD?}"
          echo "TEST_USERNAME=${TEST_USERNAME?}" >> "$GITHUB_OUTPUT"
          echo "TEST_PASSWORD=${TEST_PASSWORD?}" >> "$GITHUB_OUTPUT"

      - name: Provision test user
        run: |
          npm run users:provision 'oidc-antonycc-com-prod-users' "${TEST_USERNAME?}" "${TEST_PASSWORD?}"
        env:
          TEST_USERNAME: ${{ steps.uuid.outputs.TEST_USERNAME }}
          TEST_PASSWORD: ${{ steps.uuid.outputs.TEST_PASSWORD }}

      - run: cp '.env.ci' '.env.proxy' ; npx dotenv -e '.env.ci' -- npm run test:behaviour
        env:
          DIY_SUBMIT_TEST_AUTH_USERNAME: ${{ steps.uuid.outputs.TEST_USERNAME }}
          DIY_SUBMIT_TEST_AUTH_PASSWORD: ${{ steps.uuid.outputs.TEST_PASSWORD }}

      - name: Convert Playwright video to MP4
        if: ${{ !cancelled() }}
        run: |
          set -euo pipefail
          root="target/behaviour-test-results"

          # Recursively transcode all .webm files, placing output next to source with 'converted' prefix
          pids=()
          while IFS= read -r -d '' f; do
            dir=$(dirname "$f")
            base="${f##*/}"
            name="${base%.webm}"
            out="${dir}/converted${name}.mp4"
            echo "Transcoding $f -> $out"
            npm run convert:video -- --in "$f" --out "$out" &
            pids+=($!)
          done < <(find "$root" -type f -name '*.webm' -print0)

          # Wait for all transcodes to complete
          fail=0
          for pid in "${pids[@]:-}"; do
            if ! wait "$pid"; then
              fail=1
            fi
          done

          exit $fail

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: test-results-behaviour-ci
          path: "target/behaviour-test-results/"
          retention-days: 30

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: test-reports-behaviour-ci
          path: "target/test-reports/"
          retention-days: 30

      - name: Report generated test credentials
        if: ${{ !cancelled() }}
        run: |
          echo "Test user credentials (valid for 1 hour):"
          echo "  Username: ${{ steps.uuid.outputs.TEST_USERNAME }}"
          echo "  Password: ${{ steps.uuid.outputs.TEST_PASSWORD }}"
