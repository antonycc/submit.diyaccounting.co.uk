# .github/workflows/deploy-ci-only.yml

name: deploy-ci-only
concurrency: deploy-ci
run-name: "deploy ci only [${{ github.ref_name }}] (skipDeploy = [${{ inputs.skipDeploy || 'false' }}])"

on:
  push:
    branches:
      - '**'
      - '!main'
      - '!gh_pages'
    paths:
      - 'infra/**'
      - 'app/**'
      - 'web/**'
      - 'cdk.json'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/deploy-ci-only.yml'
      - '**/pom.xml'
  workflow_call:
    inputs:
      skipDeploy:
        description: 'Skip deployment step'
        type: string
        required: false
        default: 'false'
    secrets:
      HMRC_CLIENT_SECRET:
        required: true
      DIY_SUBMIT_GOOGLE_CLIENT_SECRET:
        required: true
  workflow_dispatch:
    inputs:
      skipDeploy:
        description: 'Skip deployment step'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
  #schedule:
  #  - cron: '14 2,8,14,20 * * *'

env:
  skipDeploy: ${{ inputs.skipDeploy || 'false' }}

jobs:

  upsert-secrets:
    runs-on: ubuntu-latest
    environment: ci
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        if: ${{ env.skipDeploy != 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::887764105431:role/submit-github-actions-role
          role-chaining: false
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Configure AWS Credentials
        if: ${{ env.skipDeploy != 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::887764105431:role/submit-deployment-role
          role-chaining: true
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Write GitHub secret HMRC_CLIENT_SECRET to temp file (keeps out of logs)
        shell: bash
        env:
          GH_SECRET: ${{ secrets.HMRC_CLIENT_SECRET }}
        run: |
          set -euo pipefail
          umask 077
          printf '%s' "$GH_SECRET" > secret.txt
          echo "::add-mask::$(cat secret.txt)"

      - name: Upsert HMRC_CLIENT_SECRET into AWS Secrets Manager
        shell: bash
        env:
          SECRET_NAME: "diy/ci/submit/hmrc/client_secret"
        run: |
          set -euo pipefail
          if aws secretsmanager describe-secret --secret-id "$SECRET_NAME" >/dev/null 2>&1; then
            aws secretsmanager put-secret-value \
              --secret-id "$SECRET_NAME" \
              --secret-string file://secret.txt
          else
            aws secretsmanager create-secret \
              --name "$SECRET_NAME" \
              --secret-string file://secret.txt \
              --tags Key=managed-by,Value=github-actions Key=repo,Value=${GITHUB_REPOSITORY}
          fi
          shred -u secret.txt

      - name: Write GitHub secret DIY_SUBMIT_GOOGLE_CLIENT_SECRET to temp file (keeps out of logs)
        shell: bash
        env:
          GH_SECRET: ${{ secrets.DIY_SUBMIT_GOOGLE_CLIENT_SECRET }}
        run: |
          set -euo pipefail
          umask 077
          printf '%s' "$GH_SECRET" > secret.txt
          echo "::add-mask::$(cat secret.txt)"

      - name: Upsert DIY_SUBMIT_GOOGLE_CLIENT_SECRET into AWS Secrets Manager
        shell: bash
        env:
          SECRET_NAME: "diy/ci/submit/google/client_secret"
        run: |
          set -euo pipefail
          if aws secretsmanager describe-secret --secret-id "$SECRET_NAME" >/dev/null 2>&1; then
            aws secretsmanager put-secret-value \
              --secret-id "$SECRET_NAME" \
              --secret-string file://secret.txt
          else
            aws secretsmanager create-secret \
              --name "$SECRET_NAME" \
              --secret-string file://secret.txt \
              --tags Key=managed-by,Value=github-actions Key=repo,Value=${GITHUB_REPOSITORY}
          fi
          shred -u secret.txt

  deploy:
    needs:
      - upsert-secrets
    name: 'deploy'
    runs-on: ubuntu-latest
    environment: 'ci'
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - run: npm ci --production

      - name: Configure AWS Credentials
        if: ${{ env.skipDeploy != 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::887764105431:role/submit-github-actions-role
          role-chaining: false
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Configure AWS Credentials
        if: ${{ env.skipDeploy != 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::887764105431:role/submit-deployment-role
          role-chaining: true
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - uses: actions/setup-java@v4
        if: ${{ env.skipDeploy != 'true' }}
        with:
          distribution: 'corretto'
          java-version: 21
          cache: 'maven'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Build base image locally (for CI deployment)
        run: |
          BASE_IMAGE_TAG="submit-base:${{ github.sha }}"
          
          # Build the base image using your root Dockerfile
          docker buildx build \
            --load \
            --cache-from type=gha,scope=base \
            --cache-to type=gha,mode=max,scope=base \
            -t $BASE_IMAGE_TAG \
            -f Dockerfile .

      - name: package
        if: ${{ env.skipDeploy != 'true' }}
        id: package
        shell: bash
        run: ./mvnw clean package -DskipTests=true
        env:
          BASE_IMAGE_TAG: "submit-base:${{ github.sha }}"

      - name: Log built files
        if: ${{ env.skipDeploy != 'true' }}
        shell: bash
        run: |
          echo "ls -lh target/:"
          ls -lh target/
          echo "du -h target/:"
          du -h target/

      - name: set-jar-path
        if: ${{ env.skipDeploy != 'true' }}
        id: jar-path
        shell: bash
        run: |
          jarPath=$(mvn help:evaluate --quiet --define expression=project.build.directory --define forceStdout)
          jarFilename=$(mvn help:evaluate --quiet --define expression=project.build.finalName --define forceStdout)
          echo "jarFilepath=${jarPath?}/${jarFilename?}.jar" | tee -a "${GITHUB_OUTPUT?}"

      - name: stacks
        if: ${{ env.skipDeploy != 'true' }}
        id: stacks
        shell: bash
        run: |
          deploy=$(jq -r '.deployStacks' cdk.json | sed 's/SubmitWebStack-dev/SubmitWebStack-ci/g')
          synth=$(jq -r '.synthStacks' cdk.json | sed 's/SubmitWebStack-dev/SubmitWebStack-ci/g')
          echo "deploy=${deploy?}" | tee -a "${GITHUB_OUTPUT?}"
          echo "synth=${synth?}" | tee -a "${GITHUB_OUTPUT?}"

      - name: deploy
        if: ${{ env.skipDeploy != 'true' }}
        id: deploy
        shell: bash
        run: npx dotenv -e .env.ci -- ${{ steps.stacks.outputs.deploy }}
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          ENV_NAME: 'ci'
          LOG_S3_OBJECT_EVENT_HANDLER_SOURCE: ${{ steps.jar-path.outputs.jarFilepath }}
          LOG_GZIPPED_S3_OBJECT_EVENT_HANDLER_SOURCE: ${{ steps.jar-path.outputs.jarFilepath }}
          CERTIFICATE_ARN: ${{ vars.AWS_CERTIFICATE_ARN }}
          CLOUD_TRAIL_ENABLED: ${{ vars.AWS_CLOUD_TRAIL_ENABLED }}
          X_RAY_ENABLED: ${{ vars.AWS_X_RAY_ENABLED }}
          VERBOSE_LOGGING: ${{ vars.AWS_VERBOSE_LOGGING }}
          HOSTED_ZONE_ID: ${{ vars.AWS_HOSTED_ZONE_ID }}
          HOSTED_ZONE_NAME: ${{ vars.AWS_HOSTED_ZONE_NAME }}
          DIY_SUBMIT_HMRC_CLIENT_SECRET_ARN: 'arn:aws:secretsmanager:eu-west-2:887764105431:secret:diy/ci/submit/hmrc/client_secret'
          DIY_SUBMIT_GOOGLE_CLIENT_SECRET_ARN: 'arn:aws:secretsmanager:eu-west-2:887764105431:secret:diy/ci/submit/google/client_secret'
          COMMIT_HASH: ${{ github.sha }}
          BASE_IMAGE_TAG: "submit-base:${{ github.sha }}"

  npm-behaviour-test-ci:
    needs:
      - deploy
    name: 'npm behaviour test ci'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - run: npm ci || npm install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}

      - run: npx playwright install chromium --with-deps

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::887764105431:role/submit-github-actions-role
          role-chaining: false
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      # TODO: Replace submit-deployment-role with a role that can only run tests and access s3.
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::887764105431:role/submit-deployment-role
          role-chaining: true
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - run: cp '.env.ci' '.env.proxy' ; npx dotenv -e '.env.ci' -- npm run test:behaviour

      - name: Convert Playwright video to MP4
        if: ${{ !cancelled() }}
        run: |
          set -euo pipefail
          root="target/behaviour-test-results"
          shopt -s nullglob

          # Flatten nested .webm files into $root preserving only filenames (no paths)
          while IFS= read -r -d '' f; do
            base=$(basename "$f")
            dest="$root/$base"
            if [[ "$f" != "$dest" ]]; then
              cp -v "$f" "$dest"
            fi
          done < <(find "$root" -mindepth 2 -type f -name '*.webm' -print0)

          # Transcode all .webm files at the root concurrently
          pids=()
          for f in "$root"/*.webm; do
            [[ -e "$f" ]] || continue
            base="${f##*/}"
            out="$root/${base%.webm}.mp4"
            echo "Transcoding $f -> $out"
            npm run convert:video -- --in "$f" --out "$out" &
            pids+=($!)
          done

          # Wait for all transcodes to complete
          fail=0
          for pid in "${pids[@]:-}"; do
            if ! wait "$pid"; then
              fail=1
            fi
          done

          # Back-compat: if exactly one MP4 exists and it's not named video.mp4, copy it for the single-artifact step
          mp4s=("$root"/*.mp4)
          if [[ ${#mp4s[@]} -eq 1 && "${mp4s[0]}" != "$root/video.mp4" ]]; then
            cp -v "${mp4s[0]}" "$root/video.mp4" || true
          fi

          exit $fail

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: test-results-behaviour-ci
          path: "target/behaviour-test-results/"
          retention-days: 30

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: test-reports-behaviour-ci
          path: "target/test-reports/"
          retention-days: 30
