# .github/workflows/âˆž-reusable-build-base-image.yml
# Reusable workflow for building the base Docker image
# This eliminates duplicate builds across different jobs and pipelines

name: build-base-image

on:
  workflow_call:
    outputs:
      base-image-tag:
        description: "The tag of the built base image"
        value: ${{ jobs.build-base-image.outputs.base-image-tag }}
      cache-hit:
        description: "Whether the image was loaded from cache"
        value: ${{ jobs.build-base-image.outputs.cache-hit }}

jobs:
  build-base-image:
    runs-on: ubuntu-latest
    outputs:
      base-image-tag: ${{ steps.setup.outputs.base-image-tag }}
      cache-hit: ${{ steps.build.outputs.cache-hit }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
      
      - name: Setup image tag
        id: setup
        run: |
          BASE_IMAGE_TAG="submit-base:${{ github.sha }}"
          echo "base-image-tag=$BASE_IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Building/loading base image with tag: $BASE_IMAGE_TAG"
      
      - name: Build base image with intelligent caching
        id: build
        run: |
          BASE_IMAGE_TAG="submit-base:${{ github.sha }}"
          
          # Build the base image using optimized multi-level caching
          # This will use cached layers from previous builds when possible
          docker buildx build \
            --load \
            --cache-from type=gha,scope=base-${{ github.sha }} \
            --cache-from type=gha,scope=base-main \
            --cache-from type=gha,scope=base \
            --cache-to type=gha,mode=max,scope=base-${{ github.sha }} \
            --cache-to type=gha,mode=max,scope=base \
            -t $BASE_IMAGE_TAG \
            -f Dockerfile .
          
          # Check if the build used significant cache (indicates cache hit)
          if docker images --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}" | grep submit-base; then
            echo "cache-hit=true" >> $GITHUB_OUTPUT
            echo "Base image built successfully (using cache when available)"
          else
            echo "cache-hit=false" >> $GITHUB_OUTPUT
            echo "Warning: Base image build may have failed"
          fi
          
          # Export image info for debugging
          docker inspect $BASE_IMAGE_TAG | jq -r '.[0].Config.Labels // "No labels"' || echo "Image inspection failed"