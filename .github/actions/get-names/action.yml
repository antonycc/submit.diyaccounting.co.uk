name: "Get environment and domain names"

inputs:
  environment-name:
    description: "Origin domain to point to."
    required: false
    default: ""
  deployment-name:
    description: "Computed deployment name"
    required: false
    default: ""

outputs:
  environment-name:
    description: "Computed environment name"
    value: ${{ inputs.environment-name || steps.compute.outputs.ENVIRONMENT_NAME }}
  deployment-name:
    description: "Computed deployment name"
    value: ${{ inputs.deployment-name || steps.compute.outputs.DEPLOYMENT_NAME }}
  base-domain:
    description: "Base hostname for the deployment"
    value: ${{ steps.compute.outputs.DIY_SUBMIT_BASE_DOMAIN }}
  base-url:
    description: "Base URL for the deployment"
    value: ${{ steps.compute.outputs.DIY_SUBMIT_BASE_URL }}
  apex-domain:
    description: "Apex hostname for the environment"
    value: ${{ steps.compute.outputs.DIY_SUBMIT_APEX_DOMAIN }}
  apex-url:
    description: "Apex URL for the environment"
    value: ${{ steps.compute.outputs.DIY_SUBMIT_APEX_URL }}
  holding-domain:
    description: "Holding page hostname for the environment"
    value: ${{ steps.compute.outputs.DIY_SUBMIT_HOLDING_DOMAIN }}
  holding-url:
    description: "Holding page URL for the environment"
    value: ${{ steps.compute.outputs.DIY_SUBMIT_HOLDING_URL }}

runs:
  using: "composite"
  steps:
    - id: compute
      name: Compute deployment config
      shell: bash
      env:
        GET_NAMES_ENVIRONMENT_NAME: ${{ inputs.environment-name }}
        GET_NAMES_DEPLOYMENT_NAME: ${{ inputs.deployment-name }}
        GET_NAMES_GITHUB_REF: ${{ github.ref }}
        GET_NAMES_GITHUB_REF_NAME: ${{ github.ref_name }}
        GET_NAMES_GITHUB_HEAD_REF: ${{ github.head_ref }}
        GET_NAMES_GITHUB_SHA: ${{ github.sha }}
        GET_NAMES_PROD_BRANCH_NAME: 'main'
        GET_NAMES_GITHUB_TOKEN: ${{ github.token }}
        GET_NAMES_GITHUB_EVENT_NAME: ${{ github.event_name }}
      run: |
        set -euo pipefail
        REF_NAME="${GET_NAMES_GITHUB_REF_NAME:-${GET_NAMES_GITHUB_HEAD_REF:-${GET_NAMES_GITHUB_REF##*/}}}"

        # Clean branch name: lowercase, replace non-alphanumeric with hyphens, collapse consecutive hyphens
        CLEANED=$(echo "$REF_NAME" | tr '[:upper:]' '[:lower:]' | sed -e 's/[^a-z0-9]/-/g' -e 's/-\{2,\}/-/g' -e 's/^-//' -e 's/-$//')

        if [ "${GITHUB_REF:-}" = "refs/heads/${GET_NAMES_PROD_BRANCH_NAME?}" ] || [ "${REF_NAME?}" = "${GET_NAMES_PROD_BRANCH_NAME?}" ]; then
          ENVIRONMENT_NAME="prod"
        else
          ENVIRONMENT_NAME="ci"
        fi
        if [ -n "${GET_NAMES_ENVIRONMENT_NAME:-}" ]; then
          ENVIRONMENT_NAME="${GET_NAMES_ENVIRONMENT_NAME?}"
        fi

        if [ "${ENVIRONMENT_NAME?}" = "prod" ]; then
          # Default fallback for prod
          DEPLOYMENT_NAME="prod-${GET_NAMES_GITHUB_SHA::7}"

          # Try to detect if this prod commit came from a merged PR, and use env-<branch>
          if [ "${GITHUB_REF:-}" = "refs/heads/${GET_NAMES_PROD_BRANCH_NAME?}" ] && [ "${GET_NAMES_GITHUB_EVENT_NAME:-}" = "push" ]; then
            API_URL="${GITHUB_API_URL:-https://api.github.com}"
            REPO="${GITHUB_REPOSITORY?}"
            AUTH_HEADER="authorization: Bearer ${GET_NAMES_GITHUB_TOKEN:-}"
            ACCEPT_HEADER="accept: application/vnd.github+json"

            PRS_JSON=$(curl -sS -H "$AUTH_HEADER" -H "$ACCEPT_HEADER" \
              "$API_URL/repos/$REPO/commits/${GET_NAMES_GITHUB_SHA}/pulls?per_page=1") || PRS_JSON='[]'

            # Extract the PR head branch name (if jq is available). Fallback to a simple grep if jq is missing
            if command -v jq >/dev/null 2>&1; then
              MERGED_BRANCH=$(echo "$PRS_JSON" | jq -r '.[0].head.ref // empty')
            else
              MERGED_BRANCH=$(echo "$PRS_JSON" | sed -n 's/.*"head"\s*:\s*{[^}]*"ref"\s*:\s*"\([^"]*\)".*/\1/p' | head -n1)
            fi

            if [ -n "${MERGED_BRANCH:-}" ]; then
              CLEANED_MERGED=$(echo "$MERGED_BRANCH" | tr '[:upper:]' '[:lower:]' | sed -e 's/[^a-z0-9]/-/g' -e 's/-\{2,\}/-/g' -e 's/^-//' -e 's/-$//')
              if [ -n "$CLEANED_MERGED" ]; then
                DEPLOYMENT_NAME="env-$CLEANED_MERGED"
              fi
            fi
          fi
        else
          # Truncate to 9 chars for branch-based deployments to match prior logic (ci-xxxxxxxxx)
          DEPLOYMENT_NAME="ci-${CLEANED:0:9}"
        fi
        if [ -n "${GET_NAMES_DEPLOYMENT_NAME:-}" ]; then
          DEPLOYMENT_NAME="${GET_NAMES_DEPLOYMENT_NAME?}"
        fi

        DIY_SUBMIT_BASE_DOMAIN="${DEPLOYMENT_NAME?}.submit.diyaccounting.co.uk"
        DIY_SUBMIT_BASE_URL="https://${DIY_SUBMIT_BASE_DOMAIN?}/"

        if [ "${ENVIRONMENT_NAME?}" = "prod" ]; then
          DIY_SUBMIT_APEX_DOMAIN="submit.diyaccounting.co.uk"
        else
          DIY_SUBMIT_APEX_DOMAIN="${ENVIRONMENT_NAME?}.submit.diyaccounting.co.uk"
        fi
        DIY_SUBMIT_APEX_URL="https://${DIY_SUBMIT_APEX_DOMAIN?}/"

        DIY_SUBMIT_HOLDING_DOMAIN="${ENVIRONMENT_NAME?}-holding.submit.diyaccounting.co.uk"
        DIY_SUBMIT_HOLDING_URL="https://${DIY_SUBMIT_HOLDING_DOMAIN?}/"

        echo "ENVIRONMENT_NAME=$ENVIRONMENT_NAME" | tee -a "$GITHUB_OUTPUT"
        echo "DEPLOYMENT_NAME=$DEPLOYMENT_NAME" | tee -a "$GITHUB_OUTPUT"

        echo "DIY_SUBMIT_BASE_DOMAIN=$DIY_SUBMIT_BASE_DOMAIN" | tee -a "$GITHUB_OUTPUT"
        echo "DIY_SUBMIT_BASE_URL=$DIY_SUBMIT_BASE_URL" | tee -a "$GITHUB_OUTPUT"

        echo "DIY_SUBMIT_APEX_DOMAIN=$DIY_SUBMIT_APEX_DOMAIN" | tee -a "$GITHUB_OUTPUT"
        echo "DIY_SUBMIT_APEX_URL=$DIY_SUBMIT_APEX_URL" | tee -a "$GITHUB_OUTPUT"

        echo "DIY_SUBMIT_HOLDING_DOMAIN=$DIY_SUBMIT_HOLDING_DOMAIN" | tee -a "$GITHUB_OUTPUT"
        echo "DIY_SUBMIT_HOLDING_URL=$DIY_SUBMIT_HOLDING_URL" | tee -a "$GITHUB_OUTPUT"
