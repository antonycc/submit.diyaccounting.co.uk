name: "Set Apex Origins"
description: "Configure CloudFront Apex distribution origins and default behavior based on provided originsCsv (0/1/2 hosts)."

inputs:
  originsCsv:
    description: "Comma-separated list of app origins to serve from apex (e.g. ci-123.example.com,ci-124.example.com). Leave blank to display maintenance page."
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Configure AWS role via GitHub OIDC
      uses: aws-actions/configure-aws-credentials@v5
      with:
        role-to-assume: ${{ env.ACTIONS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-chaining: false
        audience: sts.amazonaws.com
        role-skip-session-tagging: true
        output-credentials: true
        output-env-credentials: true
        retry-max-attempts: 3

    - name: Assume AWS deployment role
      uses: aws-actions/configure-aws-credentials@v5
      with:
        role-to-assume: ${{ env.DEPLOY_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-chaining: true
        audience: sts.amazonaws.com
        role-skip-session-tagging: true
        output-credentials: true
        output-env-credentials: true
        retry-max-attempts: 3

    - name: Resolve ApexStack distribution id
      id: resolve
      shell: bash
      run: |
        set -euo pipefail
        export AWS_DEFAULT_REGION="${AWS_REGION:-eu-west-2}"
        if [ -z "${ENVIRONMENT_NAME:-}" ]; then
          echo "ENVIRONMENT_NAME env var must be set (e.g. ci or prod)" >&2
          exit 1
        fi
        STACK_NAME="${ENVIRONMENT_NAME}-ApexStack"
        echo "Resolving distribution for stack $STACK_NAME in region ${AWS_REGION:-} (AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION)"
        aws sts get-caller-identity || { echo "AWS credentials not configured" >&2; exit 1; }
        DIST_ID=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query "Stacks[0].Outputs[?OutputKey=='ApexDistributionId'].OutputValue" --output text)
        if [ -z "$DIST_ID" ] || [ "$DIST_ID" = "None" ]; then
          echo "Failed to resolve distribution id from stack outputs for $STACK_NAME" >&2
          exit 1
        fi
        echo "DIST_ID=$DIST_ID" | tee -a "$GITHUB_ENV"

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '22'

    - name: Install Node dependencies (incl. devDependencies)
      shell: bash
      run: |
        set -euo pipefail
        npm -v
        # Install dependencies (dev included) so @aws-sdk/client-cloudfront is available
        npm ci --ignore-scripts --no-audit --fund=false

    - name: Update origins using Node (AWS SDK v3)
      shell: bash
      env:
        ORIGINS_CSV: ${{ inputs.originsCsv }}
      run: |
        set -euo pipefail
        node ./app/actions/set-apex-origins.mjs

    - name: Done
      shell: bash
      run: echo "Updated distribution $DIST_ID successfully."
