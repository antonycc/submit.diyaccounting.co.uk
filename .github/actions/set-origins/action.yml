name: "Set origins"
description: "Set the origin domain for a primary domain"
inputs:
  origin-domain:
    description: "Origin domain to point to."
    required: true
  apex-domain:
    description: "Apex domain to set alias for."
    required: true
  aws-account-id:
    description: "AWS Account ID where the Route 53 hosted zone and cloud front distribution exists."
    required: true
  hosted-zone-id:
    description: "AWS Route 53 Hosted Zone ID for the apex domain."
    required: true
  cloudfront-distribution-id:
    description: "CloudFront Distribution ID to update aliases on."
    required: true

runs:
  using: "composite"
  steps:
    - name: Replace CloudFront aliases with origin-domain
      shell: bash
      env:
        SET_ORIGINS_ORIGIN_DOMAIN: ${{ inputs.origin-domain }}
        SET_ORIGINS_APEX_DOMAIN: ${{ inputs.apex-domain }}
        SET_ORIGINS_AWS_ACCOUNT_ID: ${{ inputs.aws-account-id }}
        SET_ORIGINS_HOSTED_ZONE_ID: ${{ inputs.hosted-zone-id }}
        SET_ORIGINS_CLOUDFRONT_DISTRIBUTION_ID: ${{ inputs.cloudfront-distribution-id }}
      run: |
        set -euo pipefail

        # Skip alias replacement if a CloudFront default domain is provided, as it cannot be an alternate domain
        if [[ "${SET_ORIGINS_ORIGIN_DOMAIN?}" =~ \.cloudfront\.net$ ]]; then
          echo "origin-domain ends with .cloudfront.net; skipping CloudFront alias replacement."
          exit 0
        fi

        echo "Replacing CloudFront aliases on distribution ${SET_ORIGINS_CLOUDFRONT_DISTRIBUTION_ID?} with: ${SET_ORIGINS_ORIGIN_DOMAIN?}"

        #aws cloudfront associate-alias \
        #  --target-distribution-id "${SET_ORIGINS_CLOUDFRONT_DISTRIBUTION_ID?}" \
        #  --alias "${SET_ORIGINS_APEX_DOMAIN?}" || true

        # Query for a distribution with alias matching SET_ORIGINS_APEX_DOMAIN and remove all the aliases from that distribution of there are any.
        echo "Checking for existing CloudFront distribution with alias: ${SET_ORIGINS_APEX_DOMAIN?}"
        EXISTING_DISTRIBUTION_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?Aliases.Items!=null && contains(Aliases.Items, '${SET_ORIGINS_APEX_DOMAIN?}')].Id | [0]" \
            --output text)
        if [ -n "$EXISTING_DISTRIBUTION_ID" ] && [ "$EXISTING_DISTRIBUTION_ID" != "None" ] && [ "$EXISTING_DISTRIBUTION_ID" != "${SET_ORIGINS_CLOUDFRONT_DISTRIBUTION_ID?}" ]; then
          echo "Found existing CloudFront distribution ${EXISTING_DISTRIBUTION_ID?} with alias ${SET_ORIGINS_APEX_DOMAIN?}, removing aliases from that distribution."
          EXISTING_ETAG=$(aws cloudfront get-distribution-config \
            --id "${EXISTING_DISTRIBUTION_ID?}" \
            --query 'ETag' \
            --output text)
          aws cloudfront get-distribution-config \
              --id "${EXISTING_DISTRIBUTION_ID?}" \
              --query 'DistributionConfig' \
              --output json > /tmp/existing-cf-config.json

          # Get the value of the OriginFor tag on the existing distribution to restore it after updating
          ORIGIN_FOR_TAG_VALUE=$(aws cloudfront list-tags-for-resource \
            --resource "arn:aws:cloudfront::${SET_ORIGINS_AWS_ACCOUNT_ID?}:distribution/${EXISTING_DISTRIBUTION_ID?}" \
            --query "Tags.Items[?Key=='OriginFor'].Value | [0]" \
            --output text)

          if [ "$ORIGIN_FOR_TAG_VALUE" != "None" ] && [ -n "$ORIGIN_FOR_TAG_VALUE" ] && [ "$ORIGIN_FOR_TAG_VALUE" != "$SET_ORIGINS_APEX_DOMAIN" ]; then
            echo "Preserving aliases for OriginFor tag value: ${ORIGIN_FOR_TAG_VALUE?}"
            jq --arg origin "$ORIGIN_FOR_TAG_VALUE" '.Aliases = {Quantity: 1, Items: [$origin]}' /tmp/existing-cf-config.json > /tmp/existing-cf-config.updated.json
          else
            jq '.Aliases = {Quantity: 0, Items: []}' /tmp/existing-cf-config.json > /tmp/existing-cf-config.updated.json
          fi
          echo "Updating CloudFront distribution ${EXISTING_DISTRIBUTION_ID?} matching etag ${EXISTING_ETAG?} to remove aliases of ${SET_ORIGINS_APEX_DOMAIN?}"
          aws cloudfront update-distribution \
            --id "${EXISTING_DISTRIBUTION_ID?}" \
            --if-match "${EXISTING_ETAG?}" \
            --distribution-config file:///tmp/existing-cf-config.updated.json
          echo "Waiting for CloudFront distribution ${EXISTING_DISTRIBUTION_ID?} to deploy updated aliases..."
          aws cloudfront wait distribution-deployed --id "${EXISTING_DISTRIBUTION_ID?}"
          echo "Removed aliases from existing CloudFront distribution ${EXISTING_DISTRIBUTION_ID?}."
        else
          echo "No existing CloudFront distribution found with alias ${SET_ORIGINS_APEX_DOMAIN?}."
        fi

        echo "Current CloudFront aliases for: ${SET_ORIGINS_CLOUDFRONT_DISTRIBUTION_ID?}"
        ETAG=$(aws cloudfront get-distribution-config \
          --id "${SET_ORIGINS_CLOUDFRONT_DISTRIBUTION_ID?}" \
          --query 'ETag' \
          --output text)

        echo "ETag for distribution config for: ${SET_ORIGINS_CLOUDFRONT_DISTRIBUTION_ID}"
        aws cloudfront get-distribution-config \
          --id "${SET_ORIGINS_CLOUDFRONT_DISTRIBUTION_ID?}" \
          --query 'DistributionConfig' \
          --output json > /tmp/cf-config.json

        echo "Updating CloudFront aliases to: ${SET_ORIGINS_APEX_DOMAIN?}, ${SET_ORIGINS_ORIGIN_DOMAIN?}"
        jq --arg apex "${SET_ORIGINS_APEX_DOMAIN?}" --arg origin "${SET_ORIGINS_ORIGIN_DOMAIN?}" '
          .Aliases = {Quantity: 2, Items: [$apex, $origin]}
        ' /tmp/cf-config.json > /tmp/cf-config.updated.json

        echo "Updating CloudFront distribution ${SET_ORIGINS_CLOUDFRONT_DISTRIBUTION_ID?} with new aliases"
        aws cloudfront update-distribution \
          --id "${SET_ORIGINS_CLOUDFRONT_DISTRIBUTION_ID?}" \
          --if-match "${ETAG}" \
          --distribution-config file:///tmp/cf-config.updated.json

        echo "Waiting for CloudFront distribution ${SET_ORIGINS_CLOUDFRONT_DISTRIBUTION_ID?} to deploy updated aliases..."
        aws cloudfront wait distribution-deployed --id "${SET_ORIGINS_CLOUDFRONT_DISTRIBUTION_ID?}"

        echo "CloudFront aliases now:"
        aws cloudfront get-distribution --id "${SET_ORIGINS_CLOUDFRONT_DISTRIBUTION_ID?}" \
          --query 'Distribution.DistributionConfig.Aliases.Items' --output json

    - name: Alias apex domain to base domain
      shell: bash
      env:
        SET_ORIGINS_ORIGIN_DOMAIN: ${{ inputs.origin-domain }}
        SET_ORIGINS_APEX_DOMAIN: ${{ inputs.apex-domain }}
        SET_ORIGINS_HOSTED_ZONE_ID: ${{ inputs.hosted-zone-id }}
      run: |
        set -euo pipefail

        cat > /tmp/alias.json <<JSON
        {
          "Comment": "Alias apex domain to base domain",
          "Changes": [
            {
              "Action": "UPSERT",
              "ResourceRecordSet": {
                "Name": "${SET_ORIGINS_APEX_DOMAIN?}.",
                "Type": "A",
                "AliasTarget": {
                  "HostedZoneId": "${SET_ORIGINS_HOSTED_ZONE_ID?}",
                  "DNSName": "${SET_ORIGINS_ORIGIN_DOMAIN?}.",
                  "EvaluateTargetHealth": false
                }
              }
            },
            {
              "Action": "UPSERT",
              "ResourceRecordSet": {
                "Name": "${SET_ORIGINS_APEX_DOMAIN?}.",
                "Type": "AAAA",
                "AliasTarget": {
                  "HostedZoneId": "${SET_ORIGINS_HOSTED_ZONE_ID?}",
                  "DNSName": "${SET_ORIGINS_ORIGIN_DOMAIN?}.",
                  "EvaluateTargetHealth": false
                }
              }
            }
          ]
        }
        JSON

        echo "Upserting alias records: ${SET_ORIGINS_APEX_DOMAIN?} -> ${SET_ORIGINS_ORIGIN_DOMAIN?} in hosted zone ${SET_ORIGINS_HOSTED_ZONE_ID?}"
        aws route53 change-resource-record-sets --hosted-zone-id "${SET_ORIGINS_HOSTED_ZONE_ID?}" --change-batch file:///tmp/alias.json
